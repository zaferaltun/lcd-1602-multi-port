

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Nov 03 00:13:10 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F690 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  010C                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  0115                     	;# 
   138  0116                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  011A                     	;# 
   142  011B                     	;# 
   143  011E                     	;# 
   144  011F                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149                           
   150                           	psect	strings
   151  0800                     __pstrings:	
   152  0800                     stringtab:	
   153  0800                     __stringtab:	
   154                           
   155                           ;	String table - string pointers are 1 byte each
   156  0800  1BFF               	btfsc	btemp+1,7
   157  0801  280A               	ljmp	stringcode
   158  0802  1383               	bcf	3,7
   159  0803  187F               	btfsc	btemp+1,0
   160  0804  1783               	bsf	3,7
   161  0805  0800               	movf	0,w
   162  0806  0A84               	incf	4,f
   163  0807  1903               	skipnz
   164  0808  0AFF               	incf	btemp+1,f
   165  0809  0008               	return
   166  080A                     stringcode:	
   167  080A                     stringdir:	
   168  080A  3008               	movlw	high stringdir
   169  080B  008A               	movwf	10
   170  080C  0804               	movf	4,w
   171  080D  0A84               	incf	4,f
   172  080E  0782               	addwf	2,f
   173  080F                     __stringbase:	
   174  080F  3400               	retlw	0
   175  0810                     __end_of__stringtab:	
   176  0810                     _dpowers:	
   177  0810  3401               	retlw	1
   178  0811  3400               	retlw	0
   179  0812  3400               	retlw	0
   180  0813  3400               	retlw	0
   181  0814  340A               	retlw	10
   182  0815  3400               	retlw	0
   183  0816  3400               	retlw	0
   184  0817  3400               	retlw	0
   185  0818  3464               	retlw	100
   186  0819  3400               	retlw	0
   187  081A  3400               	retlw	0
   188  081B  3400               	retlw	0
   189  081C  34E8               	retlw	232
   190  081D  3403               	retlw	3
   191  081E  3400               	retlw	0
   192  081F  3400               	retlw	0
   193  0820  3410               	retlw	16
   194  0821  3427               	retlw	39
   195  0822  3400               	retlw	0
   196  0823  3400               	retlw	0
   197  0824  34A0               	retlw	160
   198  0825  3486               	retlw	134
   199  0826  3401               	retlw	1
   200  0827  3400               	retlw	0
   201  0828  3440               	retlw	64
   202  0829  3442               	retlw	66
   203  082A  340F               	retlw	15
   204  082B  3400               	retlw	0
   205  082C  3480               	retlw	128
   206  082D  3496               	retlw	150
   207  082E  3498               	retlw	152
   208  082F  3400               	retlw	0
   209  0830  3400               	retlw	0
   210  0831  34E1               	retlw	225
   211  0832  34F5               	retlw	245
   212  0833  3405               	retlw	5
   213  0834  3400               	retlw	0
   214  0835  34CA               	retlw	202
   215  0836  349A               	retlw	154
   216  0837  343B               	retlw	59
   217  0838                     __end_of_dpowers:	
   218  0838                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_7:	
   219  0838  3478               	retlw	120
   220  0839  3400               	retlw	0
   221  083A                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_7:	
   222  083A                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_6:	
   223  083A  3470               	retlw	112
   224  083B  3400               	retlw	0
   225  083C                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_6:	
   226  083C                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_5:	
   227  083C  3468               	retlw	104
   228  083D  3400               	retlw	0
   229  083E                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_5:	
   230  083E                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_4:	
   231  083E  3460               	retlw	96
   232  083F  3400               	retlw	0
   233  0840                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_4:	
   234  0840                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_3:	
   235  0840  3458               	retlw	88
   236  0841  3400               	retlw	0
   237  0842                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_3:	
   238  0842                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_2:	
   239  0842  3450               	retlw	80
   240  0843  3400               	retlw	0
   241  0844                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_2:	
   242  0844                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_1:	
   243  0844  3448               	retlw	72
   244  0845  3400               	retlw	0
   245  0846                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_1:	
   246  0846                     _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_0:	
   247  0846  3440               	retlw	64
   248  0847  3400               	retlw	0
   249  0848                     __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_0:	
   250  0848                     _LCD_CMD_SECOND_LINE_FIRST_POS:	
   251  0848  34C0               	retlw	192
   252  0849  3400               	retlw	0
   253  084A                     __end_of_LCD_CMD_SECOND_LINE_FIRST_POS:	
   254  084A                     _LCD_CMD_JUMP_TO_SECOND_LINE:	
   255  084A  343C               	retlw	60
   256  084B  3400               	retlw	0
   257  084C                     __end_of_LCD_CMD_JUMP_TO_SECOND_LINE:	
   258  084C                     _LCD_CMD_FIRST_LINE_FIRST_POS:	
   259  084C  3480               	retlw	128
   260  084D  3400               	retlw	0
   261  084E                     __end_of_LCD_CMD_FIRST_LINE_FIRST_POS:	
   262  084E                     _LCD_CMD_USE_8_BIT_2_LINE_5x7_MTX:	
   263  084E  3438               	retlw	56
   264  084F  3400               	retlw	0
   265  0850                     __end_of_LCD_CMD_USE_8_BIT_2_LINE_5x7_MTX:	
   266  0850                     _LCD_CMD_USE_4_BIT_2_LINE_5x7_MTX:	
   267  0850  3428               	retlw	40
   268  0851  3400               	retlw	0
   269  0852                     __end_of_LCD_CMD_USE_4_BIT_2_LINE_5x7_MTX:	
   270  0852                     _LCD_CMD_USE_4_BIT_1_LINE_5x7_MTX:	
   271  0852  3420               	retlw	32
   272  0853  3400               	retlw	0
   273  0854                     __end_of_LCD_CMD_USE_4_BIT_1_LINE_5x7_MTX:	
   274  0854                     _LCD_CMD_LCD_DISPLAY_CURSOR_ON:	
   275  0854  340F               	retlw	15
   276  0855  3400               	retlw	0
   277  0856                     __end_of_LCD_CMD_LCD_DISPLAY_CURSOR_ON:	
   278  0856                     _LCD_CMD_DISPLAY_CURSOR_ON:	
   279  0856  340E               	retlw	14
   280  0857  3400               	retlw	0
   281  0858                     __end_of_LCD_CMD_DISPLAY_CURSOR_ON:	
   282  0858                     _LCD_CMD_DISPLAY_ON_CURSOR_OFF:	
   283  0858  340C               	retlw	12
   284  0859  3400               	retlw	0
   285  085A                     __end_of_LCD_CMD_DISPLAY_ON_CURSOR_OFF:	
   286  085A                     _LCD_CMD_INCREMENT_CURSOR:	
   287  085A  3406               	retlw	6
   288  085B  3400               	retlw	0
   289  085C                     __end_of_LCD_CMD_INCREMENT_CURSOR:	
   290  085C                     _LCD_CMD_CLEAR:	
   291  085C  3401               	retlw	1
   292  085D  3400               	retlw	0
   293  085E                     __end_of_LCD_CMD_CLEAR:	
   294  0007                     _PORTC	set	7
   295  0006                     _PORTB	set	6
   296  0087                     _TRISC	set	135
   297  0086                     _TRISB	set	134
   298  08FB                     _ANS11	set	2299
   299  08FA                     _ANS10	set	2298
   300  08F9                     _ANS9	set	2297
   301  08F8                     _ANS8	set	2296
   302  08F7                     _ANS7	set	2295
   303  08F6                     _ANS6	set	2294
   304  08F5                     _ANS5	set	2293
   305  08F4                     _ANS4	set	2292
   306  085E                     STR_2:	
   307  085E  344D               	retlw	77	;'M'
   308  085F  3445               	retlw	69	;'E'
   309  0860  3452               	retlw	82	;'R'
   310  0861  3448               	retlw	72	;'H'
   311  0862  3441               	retlw	65	;'A'
   312  0863  3442               	retlw	66	;'B'
   313  0864  3441               	retlw	65	;'A'
   314  0865  3420               	retlw	32	;' '
   315  0866  3444               	retlw	68	;'D'
   316  0867  3455               	retlw	85	;'U'
   317  0868  344E               	retlw	78	;'N'
   318  0869  3459               	retlw	89	;'Y'
   319  086A  3441               	retlw	65	;'A'
   320  086B  344C               	retlw	76	;'L'
   321  086C  3449               	retlw	73	;'I'
   322  086D  3421               	retlw	33	;'!'
   323  086E  3400               	retlw	0
   324  086F                     STR_4:	
   325  086F  3449               	retlw	73	;'I'
   326  0870  344E               	retlw	78	;'N'
   327  0871  3454               	retlw	84	;'T'
   328  0872  3445               	retlw	69	;'E'
   329  0873  3447               	retlw	71	;'G'
   330  0874  3445               	retlw	69	;'E'
   331  0875  3452               	retlw	82	;'R'
   332  0876  3420               	retlw	32	;' '
   333  0877  344F               	retlw	79	;'O'
   334  0878  3452               	retlw	82	;'R'
   335  0879  344E               	retlw	78	;'N'
   336  087A  3445               	retlw	69	;'E'
   337  087B  3447               	retlw	71	;'G'
   338  087C  3449               	retlw	73	;'I'
   339  087D  343A               	retlw	58	;':'
   340  087E  3400               	retlw	0
   341  087F                     STR_5:	
   342  087F  3446               	retlw	70	;'F'
   343  0880  344C               	retlw	76	;'L'
   344  0881  344F               	retlw	79	;'O'
   345  0882  3441               	retlw	65	;'A'
   346  0883  3454               	retlw	84	;'T'
   347  0884  3420               	retlw	32	;' '
   348  0885  344F               	retlw	79	;'O'
   349  0886  3452               	retlw	82	;'R'
   350  0887  344E               	retlw	78	;'N'
   351  0888  3445               	retlw	69	;'E'
   352  0889  3447               	retlw	71	;'G'
   353  088A  3449               	retlw	73	;'I'
   354  088B  343A               	retlw	58	;':'
   355  088C  3400               	retlw	0
   356  088D                     STR_6:	
   357  088D  3425               	retlw	37	;'%'
   358  088E  346C               	retlw	108	;'l'
   359  088F  3475               	retlw	117	;'u'
   360  0890  342E               	retlw	46	;'.'
   361  0891  3425               	retlw	37	;'%'
   362  0892  3436               	retlw	54	;'6'
   363  0893  342E               	retlw	46	;'.'
   364  0894  3436               	retlw	54	;'6'
   365  0895  346C               	retlw	108	;'l'
   366  0896  3475               	retlw	117	;'u'
   367  0897  3400               	retlw	0
   368  0898                     STR_3:	
   369  0898  3428               	retlw	40	;'('
   370  0899  343A               	retlw	58	;':'
   371  089A  3400               	retlw	0
   372  089B                     STR_1:	
   373  089B  3425               	retlw	37	;'%'
   374  089C  3464               	retlw	100	;'d'
   375  089D  3400               	retlw	0
   376                           
   377                           ; #config settings
   378  0000                     
   379                           	psect	cinit
   380  07F7                     start_initialization:	
   381  07F7                     __initialization:	
   382                           
   383                           ; Clear objects allocated to BANK1
   384  07F7  1383               	bcf	3,7	;select IRP bank0
   385  07F8  30A0               	movlw	low __pbssBANK1
   386  07F9  0084               	movwf	4
   387  07FA  30BD               	movlw	low (__pbssBANK1+29)
   388  07FB  158A  219B         	fcall	clear_ram0
   389  07FD                     end_of_initialization:	
   390                           ;End of C runtime variable initialization code
   391                           
   392  07FD                     __end_of__initialization:	
   393  07FD  0183               	clrf	3
   394  07FE  118A  2A0D         	ljmp	_main	;jump to C main() function
   395                           
   396                           	psect	bssBANK1
   397  00A0                     __pbssBANK1:	
   398  00A0                     _lcd:	
   399  00A0                     	ds	12
   400  00AC                     ftoa@buf:	
   401  00AC                     	ds	17
   402                           
   403                           	psect	clrtext
   404  099B                     clear_ram0:	
   405                           ;	Called with FSR containing the base address, and
   406                           ;	W with the last address+1
   407                           
   408  099B  0064               	clrwdt	;clear the watchdog before getting into this loop
   409  099C                     clrloop0:	
   410  099C  0180               	clrf	0	;clear RAM location pointed to by FSR
   411  099D  0A84               	incf	4,f	;increment pointer
   412  099E  0604               	xorwf	4,w	;XOR with final address
   413  099F  1903               	btfsc	3,2	;have we reached the end yet?
   414  09A0  3400               	retlw	0	;all done for this memory range, return
   415  09A1  0604               	xorwf	4,w	;XOR again to restore value
   416  09A2  299C               	goto	clrloop0	;do the next byte
   417                           
   418                           	psect	cstackBANK1
   419  00BD                     __pcstackBANK1:	
   420  00BD                     ??_lcdDataInt:	
   421  00BD                     ?_lcdDataFloat:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  00BD                     lcdDataFloat@lcd:	
   425                           ; 1 bytes @ 0x0
   426                           
   427                           
   428                           ; 12 bytes @ 0x0
   429  00BD                     	ds	4
   430  00C1                     lcdDataInt@buf:	
   431                           
   432                           ; 16 bytes @ 0x4
   433  00C1                     	ds	8
   434  00C9                     lcdDataFloat@num:	
   435                           
   436                           ; 3 bytes @ 0xC
   437  00C9                     	ds	3
   438  00CC                     lcdDataFloat@precision:	
   439                           
   440                           ; 2 bytes @ 0xF
   441  00CC                     	ds	5
   442  00D1                     ?_main:	
   443  00D1                     main@argc:	
   444                           ; 2 bytes @ 0x14
   445                           
   446                           
   447                           ; 2 bytes @ 0x14
   448  00D1                     	ds	2
   449  00D3                     main@argv:	
   450                           
   451                           ; 2 bytes @ 0x16
   452  00D3                     	ds	2
   453  00D5                     ??_main:	
   454                           
   455                           ; 1 bytes @ 0x18
   456  00D5                     	ds	4
   457                           
   458                           	psect	cstackCOMMON
   459  0070                     __pcstackCOMMON:	
   460  0070                     ?_isdigit:	
   461  0070                     ?___ftge:	
   462                           ; 1 bit 
   463                           
   464  0070                     ?_lcdSetRegPin:	
   465                           ; 1 bit 
   466                           
   467  0070                     ?_lcdClearRegPin:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_lcdDelay:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ??_isdigit:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_delayUS:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_delayMS:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_init:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?___wmul:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?___ftpack:	
   489                           ; 2 bytes @ 0x0
   490                           
   491  0070                     ?___ftneg:	
   492                           ; 3 bytes @ 0x0
   493                           
   494  0070                     ?___lldiv:	
   495                           ; 3 bytes @ 0x0
   496                           
   497  0070                     _isdigit$465:	
   498                           ; 4 bytes @ 0x0
   499                           
   500  0070                     delayUS@us:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     delayMS@us:	
   504                           ; 2 bytes @ 0x0
   505                           
   506  0070                     ___wmul@multiplier:	
   507                           ; 2 bytes @ 0x0
   508                           
   509  0070                     ___ftpack@arg:	
   510                           ; 2 bytes @ 0x0
   511                           
   512  0070                     ___ftge@ff1:	
   513                           ; 3 bytes @ 0x0
   514                           
   515  0070                     ___ftneg@f1:	
   516                           ; 3 bytes @ 0x0
   517                           
   518  0070                     ___lldiv@divisor:	
   519                           ; 3 bytes @ 0x0
   520                           
   521  0070                     lcdSetRegPin@lcd:	
   522                           ; 4 bytes @ 0x0
   523                           
   524  0070                     lcdClearRegPin@lcd:	
   525                           ; 12 bytes @ 0x0
   526                           
   527                           
   528                           ; 12 bytes @ 0x0
   529  0070                     	ds	1
   530  0071                     isdigit@c:	
   531                           
   532                           ; 1 bytes @ 0x1
   533  0071                     	ds	1
   534  0072                     ??_lcdDelay:	
   535  0072                     ??_delayUS:	
   536                           ; 1 bytes @ 0x2
   537                           
   538  0072                     ??_delayMS:	
   539                           ; 1 bytes @ 0x2
   540                           
   541  0072                     ___wmul@multiplicand:	
   542                           ; 1 bytes @ 0x2
   543                           
   544                           
   545                           ; 2 bytes @ 0x2
   546  0072                     	ds	1
   547  0073                     ??___ftneg:	
   548  0073                     ___ftpack@exp:	
   549                           ; 1 bytes @ 0x3
   550                           
   551  0073                     ___ftge@ff2:	
   552                           ; 1 bytes @ 0x3
   553                           
   554                           
   555                           ; 3 bytes @ 0x3
   556  0073                     	ds	1
   557  0074                     ??___wmul:	
   558  0074                     ___ftpack@sign:	
   559                           ; 1 bytes @ 0x4
   560                           
   561  0074                     ___wmul@product:	
   562                           ; 1 bytes @ 0x4
   563                           
   564  0074                     ___lldiv@dividend:	
   565                           ; 2 bytes @ 0x4
   566                           
   567                           
   568                           ; 4 bytes @ 0x4
   569  0074                     	ds	1
   570  0075                     ??___ftpack:	
   571                           
   572                           ; 1 bytes @ 0x5
   573  0075                     	ds	1
   574  0076                     ??___ftge:	
   575                           
   576                           ; 1 bytes @ 0x6
   577  0076                     	ds	2
   578  0078                     ??___lldiv:	
   579  0078                     ?___ftadd:	
   580                           ; 1 bytes @ 0x8
   581                           
   582  0078                     ?___ftmul:	
   583                           ; 3 bytes @ 0x8
   584                           
   585  0078                     ?___lltoft:	
   586                           ; 3 bytes @ 0x8
   587                           
   588  0078                     ___ftadd@f1:	
   589                           ; 3 bytes @ 0x8
   590                           
   591  0078                     ___ftmul@f1:	
   592                           ; 3 bytes @ 0x8
   593                           
   594  0078                     ___lltoft@c:	
   595                           ; 3 bytes @ 0x8
   596                           
   597                           
   598                           ; 4 bytes @ 0x8
   599  0078                     	ds	1
   600  0079                     ___lldiv@quotient:	
   601                           
   602                           ; 4 bytes @ 0x9
   603  0079                     	ds	2
   604  007B                     ___ftadd@f2:	
   605  007B                     ___ftmul@f2:	
   606                           ; 3 bytes @ 0xB
   607                           
   608                           
   609                           ; 3 bytes @ 0xB
   610  007B                     	ds	1
   611  007C                     ??___lltoft:	
   612  007C                     lcdSetRegPin@pin:	
   613                           ; 1 bytes @ 0xC
   614                           
   615  007C                     lcdClearRegPin@pin:	
   616                           ; 1 bytes @ 0xC
   617                           
   618                           
   619                           ; 1 bytes @ 0xC
   620  007C                     	ds	1
   621  007D                     ___lldiv@counter:	
   622  007D                     ___lltoft@exp:	
   623                           ; 1 bytes @ 0xD
   624                           
   625                           
   626                           ; 1 bytes @ 0xD
   627  007D                     	ds	1
   628  007E                     ??___ftsub:	
   629                           
   630                           	psect	cstackBANK0
   631  0020                     __pcstackBANK0:	
   632                           ; 1 bytes @ 0xE
   633                           
   634  0020                     ??_lcdSetRegPin:	
   635  0020                     ??_lcdClearRegPin:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0020                     ??___ftadd:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0020                     ??___ftmul:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0020                     ?___llmod:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0020                     ___llmod@divisor:	
   648                           ; 4 bytes @ 0x0
   649                           
   650                           
   651                           ; 4 bytes @ 0x0
   652  0020                     	ds	2
   653  0022                     ?_lcdProcess:	
   654  0022                     lcdProcess@lcd:	
   655                           ; 1 bytes @ 0x2
   656                           
   657                           
   658                           ; 12 bytes @ 0x2
   659  0022                     	ds	2
   660  0024                     ___ftadd@sign:	
   661  0024                     ___ftmul@exp:	
   662                           ; 1 bytes @ 0x4
   663                           
   664  0024                     ___llmod@dividend:	
   665                           ; 1 bytes @ 0x4
   666                           
   667                           
   668                           ; 4 bytes @ 0x4
   669  0024                     	ds	1
   670  0025                     ___ftadd@exp2:	
   671  0025                     ___ftmul@f3_as_product:	
   672                           ; 1 bytes @ 0x5
   673                           
   674                           
   675                           ; 3 bytes @ 0x5
   676  0025                     	ds	1
   677  0026                     ___ftadd@exp1:	
   678                           
   679                           ; 1 bytes @ 0x6
   680  0026                     	ds	1
   681  0027                     ?___ftsub:	
   682  0027                     ___ftsub@f2:	
   683                           ; 3 bytes @ 0x7
   684                           
   685                           
   686                           ; 3 bytes @ 0x7
   687  0027                     	ds	1
   688  0028                     ??___llmod:	
   689  0028                     ___ftmul@cntr:	
   690                           ; 1 bytes @ 0x8
   691                           
   692                           
   693                           ; 1 bytes @ 0x8
   694  0028                     	ds	1
   695  0029                     ___ftmul@sign:	
   696  0029                     ___llmod@counter:	
   697                           ; 1 bytes @ 0x9
   698                           
   699                           
   700                           ; 1 bytes @ 0x9
   701  0029                     	ds	1
   702  002A                     ?_sprintf:	
   703  002A                     ?___fttol:	
   704                           ; 2 bytes @ 0xA
   705                           
   706  002A                     sprintf@f:	
   707                           ; 4 bytes @ 0xA
   708                           
   709  002A                     ___ftsub@f1:	
   710                           ; 1 bytes @ 0xA
   711                           
   712  002A                     ___fttol@f1:	
   713                           ; 3 bytes @ 0xA
   714                           
   715                           
   716                           ; 3 bytes @ 0xA
   717  002A                     	ds	4
   718  002E                     ??___fttol:	
   719  002E                     lcdProcess@cmd:	
   720                           ; 1 bytes @ 0xE
   721                           
   722                           
   723                           ; 2 bytes @ 0xE
   724  002E                     	ds	2
   725  0030                     lcdProcess@isData:	
   726                           
   727                           ; 2 bytes @ 0x10
   728  0030                     	ds	2
   729  0032                     ??_lcdProcess:	
   730  0032                     ___fttol@sign1:	
   731                           ; 1 bytes @ 0x12
   732                           
   733                           
   734                           ; 1 bytes @ 0x12
   735  0032                     	ds	1
   736  0033                     ??_sprintf:	
   737  0033                     ___fttol@lval:	
   738                           ; 1 bytes @ 0x13
   739                           
   740                           
   741                           ; 4 bytes @ 0x13
   742  0033                     	ds	4
   743  0037                     ?_lcdCommand:	
   744  0037                     ?_lcdPutChar:	
   745                           ; 1 bytes @ 0x17
   746                           
   747  0037                     ___fttol@exp1:	
   748                           ; 1 bytes @ 0x17
   749                           
   750  0037                     lcdCommand@lcd:	
   751                           ; 1 bytes @ 0x17
   752                           
   753  0037                     lcdPutChar@lcd:	
   754                           ; 12 bytes @ 0x17
   755                           
   756                           
   757                           ; 12 bytes @ 0x17
   758  0037                     	ds	1
   759  0038                     sprintf@ap:	
   760                           
   761                           ; 1 bytes @ 0x18
   762  0038                     	ds	1
   763  0039                     sprintf@val:	
   764                           
   765                           ; 4 bytes @ 0x19
   766  0039                     	ds	4
   767  003D                     sprintf@flag:	
   768                           
   769                           ; 1 bytes @ 0x1D
   770  003D                     	ds	1
   771  003E                     sprintf@sp:	
   772                           
   773                           ; 1 bytes @ 0x1E
   774  003E                     	ds	1
   775  003F                     sprintf@width:	
   776                           
   777                           ; 2 bytes @ 0x1F
   778  003F                     	ds	2
   779  0041                     sprintf@prec:	
   780                           
   781                           ; 2 bytes @ 0x21
   782  0041                     	ds	2
   783  0043                     lcdPutChar@str:	
   784  0043                     sprintf@c:	
   785                           ; 1 bytes @ 0x23
   786                           
   787  0043                     lcdCommand@cmd:	
   788                           ; 1 bytes @ 0x23
   789                           
   790                           
   791                           ; 2 bytes @ 0x23
   792  0043                     	ds	1
   793  0044                     ??_lcdPutChar:	
   794  0044                     ?_ftoa:	
   795                           ; 1 bytes @ 0x24
   796                           
   797  0044                     ftoa@f:	
   798                           ; 1 bytes @ 0x24
   799                           
   800                           
   801                           ; 3 bytes @ 0x24
   802  0044                     	ds	1
   803  0045                     ??_lcdCommand:	
   804                           
   805                           ; 1 bytes @ 0x25
   806  0045                     	ds	2
   807  0047                     ftoa@status:	
   808                           
   809                           ; 1 bytes @ 0x27
   810  0047                     	ds	1
   811  0048                     ??_ftoa:	
   812                           
   813                           ; 1 bytes @ 0x28
   814  0048                     	ds	1
   815  0049                     ?_lcdClear:	
   816  0049                     ftoa@rem:	
   817                           ; 1 bytes @ 0x29
   818                           
   819  0049                     lcdClear@lcd:	
   820                           ; 4 bytes @ 0x29
   821                           
   822                           
   823                           ; 12 bytes @ 0x29
   824  0049                     	ds	1
   825  004A                     ?_lcdData:	
   826  004A                     lcdData@lcd:	
   827                           ; 1 bytes @ 0x2A
   828                           
   829                           
   830                           ; 12 bytes @ 0x2A
   831  004A                     	ds	3
   832  004D                     ftoa@l:	
   833                           
   834                           ; 4 bytes @ 0x2D
   835  004D                     	ds	4
   836  0051                     ftoa@cp:	
   837                           
   838                           ; 1 bytes @ 0x31
   839  0051                     	ds	4
   840  0055                     ??_lcdClear:	
   841                           
   842                           ; 1 bytes @ 0x35
   843  0055                     	ds	1
   844  0056                     lcdData@str:	
   845                           
   846                           ; 2 bytes @ 0x36
   847  0056                     	ds	2
   848  0058                     ??_lcdData:	
   849                           
   850                           ; 1 bytes @ 0x38
   851  0058                     	ds	1
   852  0059                     ?_lcdInit:	
   853  0059                     lcdInit@lcd:	
   854                           ; 1 bytes @ 0x39
   855                           
   856                           
   857                           ; 12 bytes @ 0x39
   858  0059                     	ds	7
   859  0060                     lcdData@c:	
   860                           
   861                           ; 2 bytes @ 0x40
   862  0060                     	ds	2
   863  0062                     ?_lcdDataInt:	
   864  0062                     ??_lcdDataFloat:	
   865                           ; 1 bytes @ 0x42
   866                           
   867  0062                     lcdDataInt@lcd:	
   868                           ; 1 bytes @ 0x42
   869                           
   870                           
   871                           ; 12 bytes @ 0x42
   872  0062                     	ds	3
   873  0065                     ??_lcdInit:	
   874                           
   875                           ; 1 bytes @ 0x45
   876  0065                     	ds	2
   877  0067                     lcdDataFloat@status:	
   878                           
   879                           ; 2 bytes @ 0x47
   880  0067                     	ds	2
   881  0069                     _lcdInit$120:	
   882  0069                     _lcdDataFloat$185:	
   883                           ; 2 bytes @ 0x49
   884                           
   885                           
   886                           ; 2 bytes @ 0x49
   887  0069                     	ds	2
   888  006B                     ??_init:	
   889  006B                     lcdDataFloat@di:	
   890                           ; 1 bytes @ 0x4B
   891                           
   892                           
   893                           ; 2 bytes @ 0x4B
   894  006B                     	ds	2
   895  006D                     lcdDataFloat@str:	
   896                           
   897                           ; 1 bytes @ 0x4D
   898  006D                     	ds	1
   899  006E                     lcdDataInt@num:	
   900  006E                     lcdDataFloat@c:	
   901                           ; 2 bytes @ 0x4E
   902                           
   903                           
   904                           ; 2 bytes @ 0x4E
   905  006E                     	ds	2
   906                           
   907                           	psect	maintext
   908  020D                     __pmaintext:	
   909 ;;
   910 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   911 ;;
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 55 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  argc            2   20[BANK1 ] int 
   917 ;;  argv            2   22[BANK1 ] PTR PTR unsigned char 
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  2   20[BANK1 ] int 
   922 ;; Registers used:
   923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : B00/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   929 ;;      Params:         0       0       4       0
   930 ;;      Locals:         0       0       0       0
   931 ;;      Temps:          0       0       4       0
   932 ;;      Totals:         0       0       8       0
   933 ;;Total ram usage:        8 bytes
   934 ;; Hardware stack levels required when called:    7
   935 ;; This function calls:
   936 ;;		_delayMS
   937 ;;		_init
   938 ;;		_lcdClear
   939 ;;		_lcdCommand
   940 ;;		_lcdData
   941 ;;		_lcdDataFloat
   942 ;;		_lcdDataInt
   943 ;; This function is called by:
   944 ;;		Startup code after reset
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function _main
   950  020D                     _main:	
   951                           
   952                           ;main.c: 57: init();
   953                           
   954                           ;incstack = 0
   955                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   956  020D  158A  22F1  118A   	fcall	_init
   957  0210                     l162:	
   958                           ;main.c: 59: while (1) {
   959                           
   960                           
   961                           ;main.c: 60: lcdClear(lcd);
   962  0210  3049               	movlw	lcdClear@lcd& (0+255)
   963  0211  0084               	movwf	4
   964  0212  30A0               	movlw	low _lcd
   965  0213  1683               	bsf	3,5	;RP0=1, select bank1
   966  0214  1303               	bcf	3,6	;RP1=0, select bank1
   967  0215  00D5               	movwf	??_main^(0+128)
   968  0216  0804               	movf	4,w
   969  0217  00D6               	movwf	(??_main^(0+128)+1)
   970  0218  300C               	movlw	12
   971  0219  00D7               	movwf	(??_main^(0+128)+2)
   972  021A                     u3420:	
   973  021A  0855               	movf	??_main^(0+128),w
   974  021B  0084               	movwf	4
   975  021C  1383               	bcf	3,7	;select IRP bank1
   976  021D  0800               	movf	0,w
   977  021E  00D8               	movwf	(??_main^(0+128)+3)
   978  021F  0AD5               	incf	??_main^(0+128),f
   979  0220  0856               	movf	(??_main^(0+128)+1),w
   980  0221  0084               	movwf	4
   981  0222  0858               	movf	(??_main^(0+128)+3),w
   982  0223  0080               	movwf	0
   983  0224  0AD6               	incf	(??_main^(0+128)+1),f
   984  0225  0BD7               	decfsz	(??_main^(0+128)+2),f
   985  0226  2A1A               	goto	u3420
   986  0227  158A  224E  118A   	fcall	_lcdClear
   987                           
   988                           ;main.c: 61: lcdCommand(lcd, LCD_CMD_FIRST_LINE_FIRST_POS);
   989  022A  3037               	movlw	lcdCommand@lcd& (0+255)
   990  022B  0084               	movwf	4
   991  022C  30A0               	movlw	low _lcd
   992  022D  1683               	bsf	3,5	;RP0=1, select bank1
   993  022E  1303               	bcf	3,6	;RP1=0, select bank1
   994  022F  00D5               	movwf	??_main^(0+128)
   995  0230  0804               	movf	4,w
   996  0231  00D6               	movwf	(??_main^(0+128)+1)
   997  0232  300C               	movlw	12
   998  0233  00D7               	movwf	(??_main^(0+128)+2)
   999  0234                     u3430:	
  1000  0234  0855               	movf	??_main^(0+128),w
  1001  0235  0084               	movwf	4
  1002  0236  1383               	bcf	3,7	;select IRP bank1
  1003  0237  0800               	movf	0,w
  1004  0238  00D8               	movwf	(??_main^(0+128)+3)
  1005  0239  0AD5               	incf	??_main^(0+128),f
  1006  023A  0856               	movf	(??_main^(0+128)+1),w
  1007  023B  0084               	movwf	4
  1008  023C  0858               	movf	(??_main^(0+128)+3),w
  1009  023D  0080               	movwf	0
  1010  023E  0AD6               	incf	(??_main^(0+128)+1),f
  1011  023F  0BD7               	decfsz	(??_main^(0+128)+2),f
  1012  0240  2A34               	goto	u3430
  1013  0241  303D               	movlw	low (_LCD_CMD_FIRST_LINE_FIRST_POS-__stringbase)
  1014  0242  0084               	movwf	4
  1015  0243  158A  200A  118A   	fcall	stringdir
  1016  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1017  0247  1303               	bcf	3,6	;RP1=0, select bank0
  1018  0248  00C3               	movwf	lcdCommand@cmd
  1019  0249  158A  200A  118A   	fcall	stringdir
  1020  024C  00C4               	movwf	lcdCommand@cmd+1
  1021  024D  158A  220C  118A   	fcall	_lcdCommand
  1022                           
  1023                           ;main.c: 62: lcdData(lcd, "MERHABA DUNYALI!");
  1024  0250  304A               	movlw	lcdData@lcd& (0+255)
  1025  0251  0084               	movwf	4
  1026  0252  30A0               	movlw	low _lcd
  1027  0253  1683               	bsf	3,5	;RP0=1, select bank1
  1028  0254  1303               	bcf	3,6	;RP1=0, select bank1
  1029  0255  00D5               	movwf	??_main^(0+128)
  1030  0256  0804               	movf	4,w
  1031  0257  00D6               	movwf	(??_main^(0+128)+1)
  1032  0258  300C               	movlw	12
  1033  0259  00D7               	movwf	(??_main^(0+128)+2)
  1034  025A                     u3440:	
  1035  025A  0855               	movf	??_main^(0+128),w
  1036  025B  0084               	movwf	4
  1037  025C  1383               	bcf	3,7	;select IRP bank1
  1038  025D  0800               	movf	0,w
  1039  025E  00D8               	movwf	(??_main^(0+128)+3)
  1040  025F  0AD5               	incf	??_main^(0+128),f
  1041  0260  0856               	movf	(??_main^(0+128)+1),w
  1042  0261  0084               	movwf	4
  1043  0262  0858               	movf	(??_main^(0+128)+3),w
  1044  0263  0080               	movwf	0
  1045  0264  0AD6               	incf	(??_main^(0+128)+1),f
  1046  0265  0BD7               	decfsz	(??_main^(0+128)+2),f
  1047  0266  2A5A               	goto	u3440
  1048  0267  304F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1049  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1050  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1051  026A  00D6               	movwf	lcdData@str
  1052  026B  3080               	movlw	128
  1053  026C  00D7               	movwf	lcdData@str+1
  1054  026D  158A  2389  118A   	fcall	_lcdData
  1055                           
  1056                           ;main.c: 63: lcdCommand(lcd, LCD_CMD_SECOND_LINE_FIRST_POS);
  1057  0270  3037               	movlw	lcdCommand@lcd& (0+255)
  1058  0271  0084               	movwf	4
  1059  0272  30A0               	movlw	low _lcd
  1060  0273  1683               	bsf	3,5	;RP0=1, select bank1
  1061  0274  1303               	bcf	3,6	;RP1=0, select bank1
  1062  0275  00D5               	movwf	??_main^(0+128)
  1063  0276  0804               	movf	4,w
  1064  0277  00D6               	movwf	(??_main^(0+128)+1)
  1065  0278  300C               	movlw	12
  1066  0279  00D7               	movwf	(??_main^(0+128)+2)
  1067  027A                     u3450:	
  1068  027A  0855               	movf	??_main^(0+128),w
  1069  027B  0084               	movwf	4
  1070  027C  1383               	bcf	3,7	;select IRP bank1
  1071  027D  0800               	movf	0,w
  1072  027E  00D8               	movwf	(??_main^(0+128)+3)
  1073  027F  0AD5               	incf	??_main^(0+128),f
  1074  0280  0856               	movf	(??_main^(0+128)+1),w
  1075  0281  0084               	movwf	4
  1076  0282  0858               	movf	(??_main^(0+128)+3),w
  1077  0283  0080               	movwf	0
  1078  0284  0AD6               	incf	(??_main^(0+128)+1),f
  1079  0285  0BD7               	decfsz	(??_main^(0+128)+2),f
  1080  0286  2A7A               	goto	u3450
  1081  0287  3039               	movlw	low (_LCD_CMD_SECOND_LINE_FIRST_POS-__stringbase)
  1082  0288  0084               	movwf	4
  1083  0289  158A  200A  118A   	fcall	stringdir
  1084  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1085  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1086  028E  00C3               	movwf	lcdCommand@cmd
  1087  028F  158A  200A  118A   	fcall	stringdir
  1088  0292  00C4               	movwf	lcdCommand@cmd+1
  1089  0293  158A  220C  118A   	fcall	_lcdCommand
  1090                           
  1091                           ;main.c: 64: lcdData(lcd, "(:");
  1092  0296  304A               	movlw	lcdData@lcd& (0+255)
  1093  0297  0084               	movwf	4
  1094  0298  30A0               	movlw	low _lcd
  1095  0299  1683               	bsf	3,5	;RP0=1, select bank1
  1096  029A  1303               	bcf	3,6	;RP1=0, select bank1
  1097  029B  00D5               	movwf	??_main^(0+128)
  1098  029C  0804               	movf	4,w
  1099  029D  00D6               	movwf	(??_main^(0+128)+1)
  1100  029E  300C               	movlw	12
  1101  029F  00D7               	movwf	(??_main^(0+128)+2)
  1102  02A0                     u3460:	
  1103  02A0  0855               	movf	??_main^(0+128),w
  1104  02A1  0084               	movwf	4
  1105  02A2  1383               	bcf	3,7	;select IRP bank1
  1106  02A3  0800               	movf	0,w
  1107  02A4  00D8               	movwf	(??_main^(0+128)+3)
  1108  02A5  0AD5               	incf	??_main^(0+128),f
  1109  02A6  0856               	movf	(??_main^(0+128)+1),w
  1110  02A7  0084               	movwf	4
  1111  02A8  0858               	movf	(??_main^(0+128)+3),w
  1112  02A9  0080               	movwf	0
  1113  02AA  0AD6               	incf	(??_main^(0+128)+1),f
  1114  02AB  0BD7               	decfsz	(??_main^(0+128)+2),f
  1115  02AC  2AA0               	goto	u3460
  1116  02AD  3089               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1117  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  1118  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  1119  02B0  00D6               	movwf	lcdData@str
  1120  02B1  3080               	movlw	128
  1121  02B2  00D7               	movwf	lcdData@str+1
  1122  02B3  158A  2389  118A   	fcall	_lcdData
  1123                           
  1124                           ;main.c: 65: delayMS(1000);
  1125  02B6  30E8               	movlw	232
  1126  02B7  00F0               	movwf	delayMS@us
  1127  02B8  3003               	movlw	3
  1128  02B9  00F1               	movwf	delayMS@us+1
  1129  02BA  158A  21AF  118A   	fcall	_delayMS
  1130                           
  1131                           ;main.c: 67: lcdClear(lcd);
  1132  02BD  3049               	movlw	lcdClear@lcd& (0+255)
  1133  02BE  0084               	movwf	4
  1134  02BF  30A0               	movlw	low _lcd
  1135  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  1136  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  1137  02C2  00D5               	movwf	??_main^(0+128)
  1138  02C3  0804               	movf	4,w
  1139  02C4  00D6               	movwf	(??_main^(0+128)+1)
  1140  02C5  300C               	movlw	12
  1141  02C6  00D7               	movwf	(??_main^(0+128)+2)
  1142  02C7                     u3470:	
  1143  02C7  0855               	movf	??_main^(0+128),w
  1144  02C8  0084               	movwf	4
  1145  02C9  1383               	bcf	3,7	;select IRP bank1
  1146  02CA  0800               	movf	0,w
  1147  02CB  00D8               	movwf	(??_main^(0+128)+3)
  1148  02CC  0AD5               	incf	??_main^(0+128),f
  1149  02CD  0856               	movf	(??_main^(0+128)+1),w
  1150  02CE  0084               	movwf	4
  1151  02CF  0858               	movf	(??_main^(0+128)+3),w
  1152  02D0  0080               	movwf	0
  1153  02D1  0AD6               	incf	(??_main^(0+128)+1),f
  1154  02D2  0BD7               	decfsz	(??_main^(0+128)+2),f
  1155  02D3  2AC7               	goto	u3470
  1156  02D4  158A  224E  118A   	fcall	_lcdClear
  1157                           
  1158                           ;main.c: 68: lcdData(lcd, "INTEGER ORNEGI:");
  1159  02D7  304A               	movlw	lcdData@lcd& (0+255)
  1160  02D8  0084               	movwf	4
  1161  02D9  30A0               	movlw	low _lcd
  1162  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  1163  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  1164  02DC  00D5               	movwf	??_main^(0+128)
  1165  02DD  0804               	movf	4,w
  1166  02DE  00D6               	movwf	(??_main^(0+128)+1)
  1167  02DF  300C               	movlw	12
  1168  02E0  00D7               	movwf	(??_main^(0+128)+2)
  1169  02E1                     u3480:	
  1170  02E1  0855               	movf	??_main^(0+128),w
  1171  02E2  0084               	movwf	4
  1172  02E3  1383               	bcf	3,7	;select IRP bank1
  1173  02E4  0800               	movf	0,w
  1174  02E5  00D8               	movwf	(??_main^(0+128)+3)
  1175  02E6  0AD5               	incf	??_main^(0+128),f
  1176  02E7  0856               	movf	(??_main^(0+128)+1),w
  1177  02E8  0084               	movwf	4
  1178  02E9  0858               	movf	(??_main^(0+128)+3),w
  1179  02EA  0080               	movwf	0
  1180  02EB  0AD6               	incf	(??_main^(0+128)+1),f
  1181  02EC  0BD7               	decfsz	(??_main^(0+128)+2),f
  1182  02ED  2AE1               	goto	u3480
  1183  02EE  3060               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1184  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  1185  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  1186  02F1  00D6               	movwf	lcdData@str
  1187  02F2  3080               	movlw	128
  1188  02F3  00D7               	movwf	lcdData@str+1
  1189  02F4  158A  2389  118A   	fcall	_lcdData
  1190                           
  1191                           ;main.c: 69: lcdCommand(lcd, LCD_CMD_SECOND_LINE_FIRST_POS);
  1192  02F7  3037               	movlw	lcdCommand@lcd& (0+255)
  1193  02F8  0084               	movwf	4
  1194  02F9  30A0               	movlw	low _lcd
  1195  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  1196  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  1197  02FC  00D5               	movwf	??_main^(0+128)
  1198  02FD  0804               	movf	4,w
  1199  02FE  00D6               	movwf	(??_main^(0+128)+1)
  1200  02FF  300C               	movlw	12
  1201  0300  00D7               	movwf	(??_main^(0+128)+2)
  1202  0301                     u3490:	
  1203  0301  0855               	movf	??_main^(0+128),w
  1204  0302  0084               	movwf	4
  1205  0303  1383               	bcf	3,7	;select IRP bank1
  1206  0304  0800               	movf	0,w
  1207  0305  00D8               	movwf	(??_main^(0+128)+3)
  1208  0306  0AD5               	incf	??_main^(0+128),f
  1209  0307  0856               	movf	(??_main^(0+128)+1),w
  1210  0308  0084               	movwf	4
  1211  0309  0858               	movf	(??_main^(0+128)+3),w
  1212  030A  0080               	movwf	0
  1213  030B  0AD6               	incf	(??_main^(0+128)+1),f
  1214  030C  0BD7               	decfsz	(??_main^(0+128)+2),f
  1215  030D  2B01               	goto	u3490
  1216  030E  3039               	movlw	low (_LCD_CMD_SECOND_LINE_FIRST_POS-__stringbase)
  1217  030F  0084               	movwf	4
  1218  0310  158A  200A  118A   	fcall	stringdir
  1219  0313  1283               	bcf	3,5	;RP0=0, select bank0
  1220  0314  1303               	bcf	3,6	;RP1=0, select bank0
  1221  0315  00C3               	movwf	lcdCommand@cmd
  1222  0316  158A  200A  118A   	fcall	stringdir
  1223  0319  00C4               	movwf	lcdCommand@cmd+1
  1224  031A  158A  220C  118A   	fcall	_lcdCommand
  1225                           
  1226                           ;main.c: 70: lcdDataInt(lcd, 1453);
  1227  031D  3062               	movlw	lcdDataInt@lcd& (0+255)
  1228  031E  0084               	movwf	4
  1229  031F  30A0               	movlw	low _lcd
  1230  0320  1683               	bsf	3,5	;RP0=1, select bank1
  1231  0321  1303               	bcf	3,6	;RP1=0, select bank1
  1232  0322  00D5               	movwf	??_main^(0+128)
  1233  0323  0804               	movf	4,w
  1234  0324  00D6               	movwf	(??_main^(0+128)+1)
  1235  0325  300C               	movlw	12
  1236  0326  00D7               	movwf	(??_main^(0+128)+2)
  1237  0327                     u3500:	
  1238  0327  0855               	movf	??_main^(0+128),w
  1239  0328  0084               	movwf	4
  1240  0329  1383               	bcf	3,7	;select IRP bank1
  1241  032A  0800               	movf	0,w
  1242  032B  00D8               	movwf	(??_main^(0+128)+3)
  1243  032C  0AD5               	incf	??_main^(0+128),f
  1244  032D  0856               	movf	(??_main^(0+128)+1),w
  1245  032E  0084               	movwf	4
  1246  032F  0858               	movf	(??_main^(0+128)+3),w
  1247  0330  0080               	movwf	0
  1248  0331  0AD6               	incf	(??_main^(0+128)+1),f
  1249  0332  0BD7               	decfsz	(??_main^(0+128)+2),f
  1250  0333  2B27               	goto	u3500
  1251  0334  30AD               	movlw	173
  1252  0335  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0336  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0337  00EE               	movwf	lcdDataInt@num
  1255  0338  3005               	movlw	5
  1256  0339  00EF               	movwf	lcdDataInt@num+1
  1257  033A  158A  22C1  118A   	fcall	_lcdDataInt
  1258                           
  1259                           ;main.c: 71: delayMS(1000);
  1260  033D  30E8               	movlw	232
  1261  033E  00F0               	movwf	delayMS@us
  1262  033F  3003               	movlw	3
  1263  0340  00F1               	movwf	delayMS@us+1
  1264  0341  158A  21AF  118A   	fcall	_delayMS
  1265                           
  1266                           ;main.c: 73: lcdClear(lcd);
  1267  0344  3049               	movlw	lcdClear@lcd& (0+255)
  1268  0345  0084               	movwf	4
  1269  0346  30A0               	movlw	low _lcd
  1270  0347  1683               	bsf	3,5	;RP0=1, select bank1
  1271  0348  1303               	bcf	3,6	;RP1=0, select bank1
  1272  0349  00D5               	movwf	??_main^(0+128)
  1273  034A  0804               	movf	4,w
  1274  034B  00D6               	movwf	(??_main^(0+128)+1)
  1275  034C  300C               	movlw	12
  1276  034D  00D7               	movwf	(??_main^(0+128)+2)
  1277  034E                     u3510:	
  1278  034E  0855               	movf	??_main^(0+128),w
  1279  034F  0084               	movwf	4
  1280  0350  1383               	bcf	3,7	;select IRP bank1
  1281  0351  0800               	movf	0,w
  1282  0352  00D8               	movwf	(??_main^(0+128)+3)
  1283  0353  0AD5               	incf	??_main^(0+128),f
  1284  0354  0856               	movf	(??_main^(0+128)+1),w
  1285  0355  0084               	movwf	4
  1286  0356  0858               	movf	(??_main^(0+128)+3),w
  1287  0357  0080               	movwf	0
  1288  0358  0AD6               	incf	(??_main^(0+128)+1),f
  1289  0359  0BD7               	decfsz	(??_main^(0+128)+2),f
  1290  035A  2B4E               	goto	u3510
  1291  035B  158A  224E  118A   	fcall	_lcdClear
  1292                           
  1293                           ;main.c: 74: lcdData(lcd, "FLOAT ORNEGI:");
  1294  035E  304A               	movlw	lcdData@lcd& (0+255)
  1295  035F  0084               	movwf	4
  1296  0360  30A0               	movlw	low _lcd
  1297  0361  1683               	bsf	3,5	;RP0=1, select bank1
  1298  0362  1303               	bcf	3,6	;RP1=0, select bank1
  1299  0363  00D5               	movwf	??_main^(0+128)
  1300  0364  0804               	movf	4,w
  1301  0365  00D6               	movwf	(??_main^(0+128)+1)
  1302  0366  300C               	movlw	12
  1303  0367  00D7               	movwf	(??_main^(0+128)+2)
  1304  0368                     u3520:	
  1305  0368  0855               	movf	??_main^(0+128),w
  1306  0369  0084               	movwf	4
  1307  036A  1383               	bcf	3,7	;select IRP bank1
  1308  036B  0800               	movf	0,w
  1309  036C  00D8               	movwf	(??_main^(0+128)+3)
  1310  036D  0AD5               	incf	??_main^(0+128),f
  1311  036E  0856               	movf	(??_main^(0+128)+1),w
  1312  036F  0084               	movwf	4
  1313  0370  0858               	movf	(??_main^(0+128)+3),w
  1314  0371  0080               	movwf	0
  1315  0372  0AD6               	incf	(??_main^(0+128)+1),f
  1316  0373  0BD7               	decfsz	(??_main^(0+128)+2),f
  1317  0374  2B68               	goto	u3520
  1318  0375  3070               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1319  0376  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0377  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0378  00D6               	movwf	lcdData@str
  1322  0379  3080               	movlw	128
  1323  037A  00D7               	movwf	lcdData@str+1
  1324  037B  158A  2389  118A   	fcall	_lcdData
  1325                           
  1326                           ;main.c: 75: lcdCommand(lcd, LCD_CMD_SECOND_LINE_FIRST_POS);
  1327  037E  3037               	movlw	lcdCommand@lcd& (0+255)
  1328  037F  0084               	movwf	4
  1329  0380  30A0               	movlw	low _lcd
  1330  0381  1683               	bsf	3,5	;RP0=1, select bank1
  1331  0382  1303               	bcf	3,6	;RP1=0, select bank1
  1332  0383  00D5               	movwf	??_main^(0+128)
  1333  0384  0804               	movf	4,w
  1334  0385  00D6               	movwf	(??_main^(0+128)+1)
  1335  0386  300C               	movlw	12
  1336  0387  00D7               	movwf	(??_main^(0+128)+2)
  1337  0388                     u3530:	
  1338  0388  0855               	movf	??_main^(0+128),w
  1339  0389  0084               	movwf	4
  1340  038A  1383               	bcf	3,7	;select IRP bank1
  1341  038B  0800               	movf	0,w
  1342  038C  00D8               	movwf	(??_main^(0+128)+3)
  1343  038D  0AD5               	incf	??_main^(0+128),f
  1344  038E  0856               	movf	(??_main^(0+128)+1),w
  1345  038F  0084               	movwf	4
  1346  0390  0858               	movf	(??_main^(0+128)+3),w
  1347  0391  0080               	movwf	0
  1348  0392  0AD6               	incf	(??_main^(0+128)+1),f
  1349  0393  0BD7               	decfsz	(??_main^(0+128)+2),f
  1350  0394  2B88               	goto	u3530
  1351  0395  3039               	movlw	low (_LCD_CMD_SECOND_LINE_FIRST_POS-__stringbase)
  1352  0396  0084               	movwf	4
  1353  0397  158A  200A  118A   	fcall	stringdir
  1354  039A  1283               	bcf	3,5	;RP0=0, select bank0
  1355  039B  1303               	bcf	3,6	;RP1=0, select bank0
  1356  039C  00C3               	movwf	lcdCommand@cmd
  1357  039D  158A  200A  118A   	fcall	stringdir
  1358  03A0  00C4               	movwf	lcdCommand@cmd+1
  1359  03A1  158A  220C  118A   	fcall	_lcdCommand
  1360                           
  1361                           ;main.c: 76: lcdDataFloat(lcd, 123.456, 2);
  1362  03A4  30BD               	movlw	lcdDataFloat@lcd& (0+255)
  1363  03A5  0084               	movwf	4
  1364  03A6  30A0               	movlw	low _lcd
  1365  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  1366  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  1367  03A9  00D5               	movwf	??_main^(0+128)
  1368  03AA  0804               	movf	4,w
  1369  03AB  00D6               	movwf	(??_main^(0+128)+1)
  1370  03AC  300C               	movlw	12
  1371  03AD  00D7               	movwf	(??_main^(0+128)+2)
  1372  03AE                     u3540:	
  1373  03AE  0855               	movf	??_main^(0+128),w
  1374  03AF  0084               	movwf	4
  1375  03B0  1383               	bcf	3,7	;select IRP bank1
  1376  03B1  0800               	movf	0,w
  1377  03B2  00D8               	movwf	(??_main^(0+128)+3)
  1378  03B3  0AD5               	incf	??_main^(0+128),f
  1379  03B4  0856               	movf	(??_main^(0+128)+1),w
  1380  03B5  0084               	movwf	4
  1381  03B6  0858               	movf	(??_main^(0+128)+3),w
  1382  03B7  0080               	movwf	0
  1383  03B8  0AD6               	incf	(??_main^(0+128)+1),f
  1384  03B9  0BD7               	decfsz	(??_main^(0+128)+2),f
  1385  03BA  2BAE               	goto	u3540
  1386  03BB  30E9               	movlw	233
  1387  03BC  00C9               	movwf	lcdDataFloat@num^(0+128)
  1388  03BD  30F6               	movlw	246
  1389  03BE  00CA               	movwf	(lcdDataFloat@num+1)^(0+128)
  1390  03BF  3042               	movlw	66
  1391  03C0  00CB               	movwf	(lcdDataFloat@num+2)^(0+128)
  1392  03C1  3002               	movlw	2
  1393  03C2  00CC               	movwf	lcdDataFloat@precision^(0+128)
  1394  03C3  3000               	movlw	0
  1395  03C4  00CD               	movwf	(lcdDataFloat@precision^(0+128)+1)
  1396  03C5  118A  2012  118A   	fcall	_lcdDataFloat
  1397                           
  1398                           ;main.c: 77: delayMS(1000);
  1399  03C8  30E8               	movlw	232
  1400  03C9  00F0               	movwf	delayMS@us
  1401  03CA  3003               	movlw	3
  1402  03CB  00F1               	movwf	delayMS@us+1
  1403  03CC  158A  21AF  118A   	fcall	_delayMS
  1404  03CF  2A10               	goto	l162
  1405  03D0                     __end_of_main:	
  1406                           ;main.c: 78: }
  1407                           ;main.c: 80: return (0);
  1408                           ;	Return value of _main is never used
  1409                           
  1410                           
  1411                           	psect	text1
  1412  0AC1                     __ptext1:	
  1413 ;; *************** function _lcdDataInt *****************
  1414 ;; Defined at:
  1415 ;;		line 161 in file "../lib/lcd1602.h"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  lcd            12   66[BANK0 ] struct LCD_1602
  1418 ;;  num             2   78[BANK0 ] int 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  buf            16    4[BANK1 ] unsigned char [16]
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1430 ;;      Params:         0      14       0       0
  1431 ;;      Locals:         0       0      16       0
  1432 ;;      Temps:          0       0       4       0
  1433 ;;      Totals:         0      14      20       0
  1434 ;;Total ram usage:       34 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    5
  1437 ;; This function calls:
  1438 ;;		_lcdData
  1439 ;;		_sprintf
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           
  1446                           ;psect for function _lcdDataInt
  1447  0AC1                     _lcdDataInt:	
  1448                           
  1449                           ;lcd1602.h: 162: char buf[16];
  1450                           ;lcd1602.h: 163: sprintf(buf, "%d", num);
  1451                           
  1452                           ;incstack = 0
  1453                           ; Regs used in _lcdDataInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1454  0AC1  308C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1455  0AC2  1683               	bsf	3,5	;RP0=1, select bank1
  1456  0AC3  1303               	bcf	3,6	;RP1=0, select bank1
  1457  0AC4  00BD               	movwf	??_lcdDataInt^(0+128)
  1458  0AC5  083D               	movf	??_lcdDataInt^(0+128),w
  1459  0AC6  1283               	bcf	3,5	;RP0=0, select bank0
  1460  0AC7  1303               	bcf	3,6	;RP1=0, select bank0
  1461  0AC8  00AA               	movwf	sprintf@f
  1462  0AC9  086F               	movf	lcdDataInt@num+1,w
  1463  0ACA  00AC               	movwf	?_sprintf+2
  1464  0ACB  086E               	movf	lcdDataInt@num,w
  1465  0ACC  00AB               	movwf	?_sprintf+1
  1466  0ACD  30C1               	movlw	(low (lcdDataInt@buf| 0))& (0+255)
  1467  0ACE  118A  259E  158A   	fcall	_sprintf
  1468                           
  1469                           ;lcd1602.h: 164: lcdData(lcd, buf);
  1470  0AD1  304A               	movlw	lcdData@lcd& (0+255)
  1471  0AD2  0084               	movwf	4
  1472  0AD3  3062               	movlw	low lcdDataInt@lcd
  1473  0AD4  1683               	bsf	3,5	;RP0=1, select bank1
  1474  0AD5  1303               	bcf	3,6	;RP1=0, select bank1
  1475  0AD6  00BD               	movwf	??_lcdDataInt^(0+128)
  1476  0AD7  0804               	movf	4,w
  1477  0AD8  00BE               	movwf	(??_lcdDataInt^(0+128)+1)
  1478  0AD9  300C               	movlw	12
  1479  0ADA  00BF               	movwf	(??_lcdDataInt^(0+128)+2)
  1480  0ADB                     u3320:	
  1481  0ADB  083D               	movf	??_lcdDataInt^(0+128),w
  1482  0ADC  0084               	movwf	4
  1483  0ADD  1383               	bcf	3,7	;select IRP bank0
  1484  0ADE  0800               	movf	0,w
  1485  0ADF  00C0               	movwf	(??_lcdDataInt^(0+128)+3)
  1486  0AE0  0ABD               	incf	??_lcdDataInt^(0+128),f
  1487  0AE1  083E               	movf	(??_lcdDataInt^(0+128)+1),w
  1488  0AE2  0084               	movwf	4
  1489  0AE3  0840               	movf	(??_lcdDataInt^(0+128)+3),w
  1490  0AE4  0080               	movwf	0
  1491  0AE5  0ABE               	incf	(??_lcdDataInt^(0+128)+1),f
  1492  0AE6  0BBF               	decfsz	(??_lcdDataInt^(0+128)+2),f
  1493  0AE7  2ADB               	goto	u3320
  1494  0AE8  30C1               	movlw	(low (lcdDataInt@buf| 0))& (0+255)
  1495  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  1497  0AEB  00D6               	movwf	lcdData@str
  1498  0AEC  3000               	movlw	0
  1499  0AED  00D7               	movwf	lcdData@str+1
  1500  0AEE  158A  2389         	fcall	_lcdData
  1501  0AF0  0008               	return
  1502  0AF1                     __end_of_lcdDataInt:	
  1503                           
  1504                           	psect	text2
  1505  0012                     __ptext2:	
  1506 ;; *************** function _lcdDataFloat *****************
  1507 ;; Defined at:
  1508 ;;		line 167 in file "../lib/lcd1602.h"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  lcd            12    0[BANK1 ] struct LCD_1602
  1511 ;;  num             3   12[BANK1 ] float 
  1512 ;;  precision       2   15[BANK1 ] int 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  c               2   78[BANK0 ] int 
  1515 ;;  di              2   75[BANK0 ] int 
  1516 ;;  status          2   71[BANK0 ] int 
  1517 ;;  str             1   77[BANK0 ] PTR unsigned char 
  1518 ;;		 -> ftoa@buf(17), 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1528 ;;      Params:         0       0      17       0
  1529 ;;      Locals:         0       9       0       0
  1530 ;;      Temps:          0       5       0       0
  1531 ;;      Totals:         0      14      17       0
  1532 ;;Total ram usage:       31 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    5
  1535 ;; This function calls:
  1536 ;;		_ftoa
  1537 ;;		_lcdData
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function _lcdDataFloat
  1545  0012                     _lcdDataFloat:	
  1546                           
  1547                           ;lcd1602.h: 168: int status;
  1548                           ;lcd1602.h: 169: char* str = ftoa(num, &status);
  1549                           
  1550                           ;incstack = 0
  1551                           ; Regs used in _lcdDataFloat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1552  0012  1683               	bsf	3,5	;RP0=1, select bank1
  1553  0013  1303               	bcf	3,6	;RP1=0, select bank1
  1554  0014  0849               	movf	lcdDataFloat@num^(0+128),w
  1555  0015  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0016  1303               	bcf	3,6	;RP1=0, select bank0
  1557  0017  00C4               	movwf	ftoa@f
  1558  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1559  0019  1303               	bcf	3,6	;RP1=0, select bank1
  1560  001A  084A               	movf	(lcdDataFloat@num+1)^(0+128),w
  1561  001B  1283               	bcf	3,5	;RP0=0, select bank0
  1562  001C  1303               	bcf	3,6	;RP1=0, select bank0
  1563  001D  00C5               	movwf	ftoa@f+1
  1564  001E  1683               	bsf	3,5	;RP0=1, select bank1
  1565  001F  1303               	bcf	3,6	;RP1=0, select bank1
  1566  0020  084B               	movf	(lcdDataFloat@num+2)^(0+128),w
  1567  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0023  00C6               	movwf	ftoa@f+2
  1570  0024  3067               	movlw	(low (lcdDataFloat@status| 0))& (0+255)
  1571  0025  00E2               	movwf	??_lcdDataFloat
  1572  0026  0862               	movf	??_lcdDataFloat,w
  1573  0027  00C7               	movwf	ftoa@status
  1574  0028  158A  2591  118A   	fcall	_ftoa
  1575  002B  1283               	bcf	3,5	;RP0=0, select bank0
  1576  002C  1303               	bcf	3,6	;RP1=0, select bank0
  1577  002D  00E3               	movwf	??_lcdDataFloat+1
  1578  002E  0863               	movf	??_lcdDataFloat+1,w
  1579  002F  00ED               	movwf	lcdDataFloat@str
  1580                           
  1581                           ;lcd1602.h: 170: int c = -1;
  1582  0030  30FF               	movlw	255
  1583  0031  00EE               	movwf	lcdDataFloat@c
  1584  0032  30FF               	movlw	255
  1585  0033  00EF               	movwf	lcdDataFloat@c+1
  1586                           
  1587                           ;lcd1602.h: 171: int di = -1;
  1588  0034  30FF               	movlw	255
  1589  0035  00EB               	movwf	lcdDataFloat@di
  1590  0036  30FF               	movlw	255
  1591  0037  00EC               	movwf	lcdDataFloat@di+1
  1592                           
  1593                           ;lcd1602.h: 172: while (str[c + 1] != '\0' && c < 16){
  1594  0038  28D2               	goto	l127
  1595  0039                     l1912:	
  1596                           
  1597                           ;lcd1602.h: 173: c++;
  1598  0039  3001               	movlw	1
  1599  003A  1283               	bcf	3,5	;RP0=0, select bank0
  1600  003B  1303               	bcf	3,6	;RP1=0, select bank0
  1601  003C  07EE               	addwf	lcdDataFloat@c,f
  1602  003D  1803               	skipnc
  1603  003E  0AEF               	incf	lcdDataFloat@c+1,f
  1604  003F  3000               	movlw	0
  1605  0040  07EF               	addwf	lcdDataFloat@c+1,f
  1606                           
  1607                           ;lcd1602.h: 174: if (str[c] == '.'){
  1608  0041  086E               	movf	lcdDataFloat@c,w
  1609  0042  076D               	addwf	lcdDataFloat@str,w
  1610  0043  00E2               	movwf	??_lcdDataFloat
  1611  0044  0862               	movf	??_lcdDataFloat,w
  1612  0045  0084               	movwf	4
  1613  0046  302E               	movlw	46
  1614  0047  1383               	bcf	3,7	;select IRP bank0
  1615  0048  0600               	xorwf	0,w
  1616  0049  1D03               	btfss	3,2
  1617  004A  2850               	goto	l1918
  1618                           
  1619                           ;lcd1602.h: 175: di = c;
  1620  004B  086F               	movf	lcdDataFloat@c+1,w
  1621  004C  00EC               	movwf	lcdDataFloat@di+1
  1622  004D  086E               	movf	lcdDataFloat@c,w
  1623  004E  00EB               	movwf	lcdDataFloat@di
  1624                           
  1625                           ;lcd1602.h: 176: } else if (di != -1 && c - di > precision){
  1626  004F  28D2               	goto	l127
  1627  0050                     l1918:	
  1628  0050  0A6B               	incf	lcdDataFloat@di,w
  1629  0051  1903               	btfsc	3,2
  1630  0052  0A6C               	incf	lcdDataFloat@di+1,w
  1631  0053  1903               	btfsc	3,2
  1632  0054  28D2               	goto	l127
  1633  0055  096B               	comf	lcdDataFloat@di,w
  1634  0056  00E2               	movwf	??_lcdDataFloat
  1635  0057  096C               	comf	lcdDataFloat@di+1,w
  1636  0058  00E3               	movwf	??_lcdDataFloat+1
  1637  0059  0AE2               	incf	??_lcdDataFloat,f
  1638  005A  1903               	skipnz
  1639  005B  0AE3               	incf	??_lcdDataFloat+1,f
  1640  005C  086E               	movf	lcdDataFloat@c,w
  1641  005D  0762               	addwf	??_lcdDataFloat,w
  1642  005E  00E4               	movwf	??_lcdDataFloat+2
  1643  005F  086F               	movf	lcdDataFloat@c+1,w
  1644  0060  1803               	skipnc
  1645  0061  0A6F               	incf	lcdDataFloat@c+1,w
  1646  0062  0763               	addwf	??_lcdDataFloat+1,w
  1647  0063  00E5               	movwf	??_lcdDataFloat+3
  1648  0064  1683               	bsf	3,5	;RP0=1, select bank1
  1649  0065  1303               	bcf	3,6	;RP1=0, select bank1
  1650  0066  084D               	movf	(lcdDataFloat@precision+1)^(0+128),w
  1651  0067  3A80               	xorlw	128
  1652  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1653  0069  1303               	bcf	3,6	;RP1=0, select bank0
  1654  006A  00E6               	movwf	??_lcdDataFloat+4
  1655  006B  0865               	movf	??_lcdDataFloat+3,w
  1656  006C  3A80               	xorlw	128
  1657  006D  0266               	subwf	??_lcdDataFloat+4,w
  1658  006E  1D03               	skipz
  1659  006F  2874               	goto	u3355
  1660  0070  0864               	movf	??_lcdDataFloat+2,w
  1661  0071  1683               	bsf	3,5	;RP0=1, select bank1
  1662  0072  1303               	bcf	3,6	;RP1=0, select bank1
  1663  0073  024C               	subwf	lcdDataFloat@precision^(0+128),w
  1664  0074                     u3355:	
  1665  0074  1803               	skipnc
  1666  0075  28D2               	goto	l127
  1667                           
  1668                           ;lcd1602.h: 177: if (c - di - 1 == precision){
  1669  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1671  0078  086B               	movf	lcdDataFloat@di,w
  1672  0079  3E01               	addlw	1
  1673  007A  00E2               	movwf	??_lcdDataFloat
  1674  007B  086C               	movf	lcdDataFloat@di+1,w
  1675  007C  1803               	skipnc
  1676  007D  3E01               	addlw	1
  1677  007E  3E00               	addlw	0
  1678  007F  00E3               	movwf	??_lcdDataFloat+1
  1679  0080  09E2               	comf	??_lcdDataFloat,f
  1680  0081  09E3               	comf	??_lcdDataFloat+1,f
  1681  0082  0AE2               	incf	??_lcdDataFloat,f
  1682  0083  1903               	skipnz
  1683  0084  0AE3               	incf	??_lcdDataFloat+1,f
  1684  0085  086E               	movf	lcdDataFloat@c,w
  1685  0086  0762               	addwf	??_lcdDataFloat,w
  1686  0087  00E4               	movwf	??_lcdDataFloat+2
  1687  0088  086F               	movf	lcdDataFloat@c+1,w
  1688  0089  1803               	skipnc
  1689  008A  0A6F               	incf	lcdDataFloat@c+1,w
  1690  008B  0763               	addwf	??_lcdDataFloat+1,w
  1691  008C  00E5               	movwf	??_lcdDataFloat+3
  1692  008D  1683               	bsf	3,5	;RP0=1, select bank1
  1693  008E  1303               	bcf	3,6	;RP1=0, select bank1
  1694  008F  084D               	movf	(lcdDataFloat@precision+1)^(0+128),w
  1695  0090  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0091  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0092  0665               	xorwf	??_lcdDataFloat+3,w
  1698  0093  1D03               	skipz
  1699  0094  289B               	goto	u3365
  1700  0095  1683               	bsf	3,5	;RP0=1, select bank1
  1701  0096  1303               	bcf	3,6	;RP1=0, select bank1
  1702  0097  084C               	movf	lcdDataFloat@precision^(0+128),w
  1703  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1705  009A  0664               	xorwf	??_lcdDataFloat+2,w
  1706  009B                     u3365:	
  1707  009B  1D03               	skipz
  1708  009C  28CB               	goto	l132
  1709                           
  1710                           ;lcd1602.h: 178: str[c - 1] = str[c] >= '5' ? str[c - 1] + 1 : str[c - 1];
  1711  009D  086E               	movf	lcdDataFloat@c,w
  1712  009E  076D               	addwf	lcdDataFloat@str,w
  1713  009F  00E2               	movwf	??_lcdDataFloat
  1714  00A0  0862               	movf	??_lcdDataFloat,w
  1715  00A1  0084               	movwf	4
  1716  00A2  3035               	movlw	53
  1717  00A3  1383               	bcf	3,7	;select IRP bank0
  1718  00A4  0200               	subwf	0,w
  1719  00A5  1803               	skipnc
  1720  00A6  28B4               	goto	l1928
  1721  00A7  086E               	movf	lcdDataFloat@c,w
  1722  00A8  3EFF               	addlw	-1
  1723  00A9  076D               	addwf	lcdDataFloat@str,w
  1724  00AA  00E2               	movwf	??_lcdDataFloat
  1725  00AB  0862               	movf	??_lcdDataFloat,w
  1726  00AC  0084               	movwf	4
  1727  00AD  0800               	movf	0,w
  1728  00AE  00E3               	movwf	??_lcdDataFloat+1
  1729  00AF  01E4               	clrf	??_lcdDataFloat+2
  1730  00B0  0863               	movf	??_lcdDataFloat+1,w
  1731  00B1  00E9               	movwf	_lcdDataFloat$185
  1732  00B2  0864               	movf	??_lcdDataFloat+2,w
  1733  00B3  28C0               	goto	L1
  1734  00B4                     l1928:	
  1735  00B4  086E               	movf	lcdDataFloat@c,w
  1736  00B5  3EFF               	addlw	-1
  1737  00B6  076D               	addwf	lcdDataFloat@str,w
  1738  00B7  00E2               	movwf	??_lcdDataFloat
  1739  00B8  0862               	movf	??_lcdDataFloat,w
  1740  00B9  0084               	movwf	4
  1741  00BA  0800               	movf	0,w
  1742  00BB  3E01               	addlw	1
  1743  00BC  00E9               	movwf	_lcdDataFloat$185
  1744  00BD  3000               	movlw	0
  1745  00BE  1803               	skipnc
  1746  00BF  3001               	movlw	1
  1747  00C0                     L1:	
  1748  00C0  00EA               	movwf	_lcdDataFloat$185+1
  1749  00C1  0869               	movf	_lcdDataFloat$185,w
  1750  00C2  00E2               	movwf	??_lcdDataFloat
  1751  00C3  086E               	movf	lcdDataFloat@c,w
  1752  00C4  3EFF               	addlw	-1
  1753  00C5  076D               	addwf	lcdDataFloat@str,w
  1754  00C6  00E3               	movwf	??_lcdDataFloat+1
  1755  00C7  0863               	movf	??_lcdDataFloat+1,w
  1756  00C8  0084               	movwf	4
  1757  00C9  0862               	movf	??_lcdDataFloat,w
  1758  00CA  0080               	movwf	0
  1759  00CB                     l132:	
  1760                           
  1761                           ;lcd1602.h: 179: }
  1762                           ;lcd1602.h: 180: str[c] = '\0';
  1763  00CB  086E               	movf	lcdDataFloat@c,w
  1764  00CC  076D               	addwf	lcdDataFloat@str,w
  1765  00CD  00E2               	movwf	??_lcdDataFloat
  1766  00CE  0862               	movf	??_lcdDataFloat,w
  1767  00CF  0084               	movwf	4
  1768  00D0  1383               	bcf	3,7	;select IRP bank0
  1769  00D1  0180               	clrf	0
  1770  00D2                     l127:	
  1771  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1772  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1773  00D4  086E               	movf	lcdDataFloat@c,w
  1774  00D5  3E01               	addlw	1
  1775  00D6  076D               	addwf	lcdDataFloat@str,w
  1776  00D7  00E2               	movwf	??_lcdDataFloat
  1777  00D8  0862               	movf	??_lcdDataFloat,w
  1778  00D9  0084               	movwf	4
  1779  00DA  1383               	bcf	3,7	;select IRP bank0
  1780  00DB  0800               	movf	0,w
  1781  00DC  1903               	btfsc	3,2
  1782  00DD  28E9               	goto	l1932
  1783  00DE  086F               	movf	lcdDataFloat@c+1,w
  1784  00DF  3A80               	xorlw	128
  1785  00E0  00FF               	movwf	127
  1786  00E1  3080               	movlw	128
  1787  00E2  027F               	subwf	127,w
  1788  00E3  1D03               	skipz
  1789  00E4  28E7               	goto	u3395
  1790  00E5  3010               	movlw	16
  1791  00E6  026E               	subwf	lcdDataFloat@c,w
  1792  00E7                     u3395:	
  1793  00E7  1C03               	skipc
  1794  00E8  2839               	goto	l1912
  1795  00E9                     l1932:	
  1796                           
  1797                           ;lcd1602.h: 181: }
  1798                           ;lcd1602.h: 182: }
  1799                           ;lcd1602.h: 184: lcdData(lcd, str);
  1800  00E9  304A               	movlw	lcdData@lcd& (0+255)
  1801  00EA  0084               	movwf	4
  1802  00EB  30BD               	movlw	low lcdDataFloat@lcd
  1803  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  1804  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  1805  00EE  00E2               	movwf	??_lcdDataFloat
  1806  00EF  0804               	movf	4,w
  1807  00F0  00E3               	movwf	??_lcdDataFloat+1
  1808  00F1  300C               	movlw	12
  1809  00F2  00E4               	movwf	??_lcdDataFloat+2
  1810  00F3                     u3400:	
  1811  00F3  0862               	movf	??_lcdDataFloat,w
  1812  00F4  0084               	movwf	4
  1813  00F5  1383               	bcf	3,7	;select IRP bank1
  1814  00F6  0800               	movf	0,w
  1815  00F7  00E5               	movwf	??_lcdDataFloat+3
  1816  00F8  0AE2               	incf	??_lcdDataFloat,f
  1817  00F9  0863               	movf	??_lcdDataFloat+1,w
  1818  00FA  0084               	movwf	4
  1819  00FB  0865               	movf	??_lcdDataFloat+3,w
  1820  00FC  0080               	movwf	0
  1821  00FD  0AE3               	incf	??_lcdDataFloat+1,f
  1822  00FE  0BE4               	decfsz	??_lcdDataFloat+2,f
  1823  00FF  28F3               	goto	u3400
  1824  0100  086D               	movf	lcdDataFloat@str,w
  1825  0101  00D6               	movwf	lcdData@str
  1826  0102  3000               	movlw	0
  1827  0103  00D7               	movwf	lcdData@str+1
  1828  0104  158A  2389         	fcall	_lcdData
  1829  0106  0008               	return
  1830  0107                     __end_of_lcdDataFloat:	
  1831                           
  1832                           	psect	text3
  1833  0B89                     __ptext3:	
  1834 ;; *************** function _lcdData *****************
  1835 ;; Defined at:
  1836 ;;		line 153 in file "../lib/lcd1602.h"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  lcd            12   42[BANK0 ] struct LCD_1602
  1839 ;;  str             2   54[BANK0 ] PTR const unsigned char 
  1840 ;;		 -> ftoa@buf(17), STR_5(14), STR_4(16), STR_3(3), 
  1841 ;;		 -> STR_2(17), lcdDataInt@buf(16), 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  c               2   64[BANK0 ] int 
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1853 ;;      Params:         0      14       0       0
  1854 ;;      Locals:         0       2       0       0
  1855 ;;      Temps:          0       8       0       0
  1856 ;;      Totals:         0      24       0       0
  1857 ;;Total ram usage:       24 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    4
  1860 ;; This function calls:
  1861 ;;		_lcdPutChar
  1862 ;; This function is called by:
  1863 ;;		_lcdDataInt
  1864 ;;		_lcdDataFloat
  1865 ;;		_main
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           
  1870                           ;psect for function _lcdData
  1871  0B89                     _lcdData:	
  1872                           
  1873                           ;lcd1602.h: 154: int c = 0;
  1874                           
  1875                           ;incstack = 0
  1876                           ; Regs used in _lcdData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1877  0B89  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0B8A  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0B8B  01E0               	clrf	lcdData@c
  1880  0B8C  01E1               	clrf	lcdData@c+1
  1881  0B8D                     l1872:	
  1882                           ;lcd1602.h: 155: while (str[c] != '\0') {
  1883                           
  1884  0B8D  0860               	movf	lcdData@c,w
  1885  0B8E  0756               	addwf	lcdData@str,w
  1886  0B8F  00D9               	movwf	??_lcdData+1
  1887  0B90  0857               	movf	lcdData@str+1,w
  1888  0B91  00D8               	movwf	??_lcdData
  1889  0B92  1803               	skipnc
  1890  0B93  0AD8               	incf	??_lcdData,f
  1891  0B94  1BE0               	btfsc	lcdData@c,7
  1892  0B95  03D8               	decf	??_lcdData,f
  1893  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0B98  0858               	movf	??_lcdData,w
  1896  0B99  00DA               	movwf	??_lcdData+2
  1897  0B9A  085A               	movf	??_lcdData+2,w
  1898  0B9B  00FF               	movwf	127
  1899  0B9C  0859               	movf	??_lcdData+1,w
  1900  0B9D  0084               	movwf	4
  1901  0B9E  158A  2000  158A   	fcall	stringtab
  1902  0BA1  3A00               	xorlw	0
  1903  0BA2  1903               	btfsc	3,2
  1904  0BA3  0008               	return
  1905                           
  1906                           ;lcd1602.h: 156: lcdPutChar(lcd, str[c]);
  1907  0BA4  3037               	movlw	lcdPutChar@lcd& (0+255)
  1908  0BA5  0084               	movwf	4
  1909  0BA6  304A               	movlw	low lcdData@lcd
  1910  0BA7  00D8               	movwf	??_lcdData
  1911  0BA8  0804               	movf	4,w
  1912  0BA9  00D9               	movwf	??_lcdData+1
  1913  0BAA  300C               	movlw	12
  1914  0BAB  00DA               	movwf	??_lcdData+2
  1915  0BAC                     u3260:	
  1916  0BAC  0858               	movf	??_lcdData,w
  1917  0BAD  0084               	movwf	4
  1918  0BAE  1383               	bcf	3,7	;select IRP bank0
  1919  0BAF  0800               	movf	0,w
  1920  0BB0  00DB               	movwf	??_lcdData+3
  1921  0BB1  0AD8               	incf	??_lcdData,f
  1922  0BB2  0859               	movf	??_lcdData+1,w
  1923  0BB3  0084               	movwf	4
  1924  0BB4  085B               	movf	??_lcdData+3,w
  1925  0BB5  0080               	movwf	0
  1926  0BB6  0AD9               	incf	??_lcdData+1,f
  1927  0BB7  0BDA               	decfsz	??_lcdData+2,f
  1928  0BB8  2BAC               	goto	u3260
  1929  0BB9  0860               	movf	lcdData@c,w
  1930  0BBA  0756               	addwf	lcdData@str,w
  1931  0BBB  00DD               	movwf	??_lcdData+5
  1932  0BBC  0857               	movf	lcdData@str+1,w
  1933  0BBD  00DC               	movwf	??_lcdData+4
  1934  0BBE  1803               	skipnc
  1935  0BBF  0ADC               	incf	??_lcdData+4,f
  1936  0BC0  1BE0               	btfsc	lcdData@c,7
  1937  0BC1  03DC               	decf	??_lcdData+4,f
  1938  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0BC4  085C               	movf	??_lcdData+4,w
  1941  0BC5  00DE               	movwf	??_lcdData+6
  1942  0BC6  085E               	movf	??_lcdData+6,w
  1943  0BC7  00FF               	movwf	127
  1944  0BC8  085D               	movf	??_lcdData+5,w
  1945  0BC9  0084               	movwf	4
  1946  0BCA  158A  2000  158A   	fcall	stringtab
  1947  0BCD  00DF               	movwf	??_lcdData+7
  1948  0BCE  085F               	movf	??_lcdData+7,w
  1949  0BCF  00C3               	movwf	lcdPutChar@str
  1950  0BD0  158A  2272  158A   	fcall	_lcdPutChar
  1951                           
  1952                           ;lcd1602.h: 157: c++;
  1953  0BD3  3001               	movlw	1
  1954  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  1955  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  1956  0BD6  07E0               	addwf	lcdData@c,f
  1957  0BD7  1803               	skipnc
  1958  0BD8  0AE1               	incf	lcdData@c+1,f
  1959  0BD9  3000               	movlw	0
  1960  0BDA  07E1               	addwf	lcdData@c+1,f
  1961  0BDB  2B8D               	goto	l1872
  1962  0BDC                     __end_of_lcdData:	
  1963                           
  1964                           	psect	text4
  1965  0A72                     __ptext4:	
  1966 ;; *************** function _lcdPutChar *****************
  1967 ;; Defined at:
  1968 ;;		line 187 in file "../lib/lcd1602.h"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  lcd            12   23[BANK0 ] struct LCD_1602
  1971 ;;  str             1   35[BANK0 ] unsigned char 
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;		None
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  1    wreg      void 
  1976 ;; Registers used:
  1977 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1983 ;;      Params:         0      13       0       0
  1984 ;;      Locals:         0       0       0       0
  1985 ;;      Temps:          0       6       0       0
  1986 ;;      Totals:         0      19       0       0
  1987 ;;Total ram usage:       19 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    3
  1990 ;; This function calls:
  1991 ;;		_lcdProcess
  1992 ;; This function is called by:
  1993 ;;		_lcdData
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           
  1998                           ;psect for function _lcdPutChar
  1999  0A72                     _lcdPutChar:	
  2000                           
  2001                           ;lcd1602.h: 188: lcdProcess(lcd, str, 1);
  2002                           
  2003                           ;incstack = 0
  2004                           ; Regs used in _lcdPutChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2005  0A72  3022               	movlw	lcdProcess@lcd& (0+255)
  2006  0A73  0084               	movwf	4
  2007  0A74  3037               	movlw	low lcdPutChar@lcd
  2008  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  2010  0A77  00C4               	movwf	??_lcdPutChar
  2011  0A78  0804               	movf	4,w
  2012  0A79  00C5               	movwf	??_lcdPutChar+1
  2013  0A7A  300C               	movlw	12
  2014  0A7B  00C6               	movwf	??_lcdPutChar+2
  2015  0A7C                     u2560:	
  2016  0A7C  0844               	movf	??_lcdPutChar,w
  2017  0A7D  0084               	movwf	4
  2018  0A7E  1383               	bcf	3,7	;select IRP bank0
  2019  0A7F  0800               	movf	0,w
  2020  0A80  00C7               	movwf	??_lcdPutChar+3
  2021  0A81  0AC4               	incf	??_lcdPutChar,f
  2022  0A82  0845               	movf	??_lcdPutChar+1,w
  2023  0A83  0084               	movwf	4
  2024  0A84  0847               	movf	??_lcdPutChar+3,w
  2025  0A85  0080               	movwf	0
  2026  0A86  0AC5               	incf	??_lcdPutChar+1,f
  2027  0A87  0BC6               	decfsz	??_lcdPutChar+2,f
  2028  0A88  2A7C               	goto	u2560
  2029  0A89  0843               	movf	lcdPutChar@str,w
  2030  0A8A  00C8               	movwf	??_lcdPutChar+4
  2031  0A8B  01C9               	clrf	??_lcdPutChar+5
  2032  0A8C  0848               	movf	??_lcdPutChar+4,w
  2033  0A8D  00AE               	movwf	lcdProcess@cmd
  2034  0A8E  0849               	movf	??_lcdPutChar+5,w
  2035  0A8F  00AF               	movwf	lcdProcess@cmd+1
  2036  0A90  3001               	movlw	1
  2037  0A91  00B0               	movwf	lcdProcess@isData
  2038  0A92  3000               	movlw	0
  2039  0A93  00B1               	movwf	lcdProcess@isData+1
  2040  0A94  118A  23D0         	fcall	_lcdProcess
  2041  0A96  0008               	return
  2042  0A97                     __end_of_lcdPutChar:	
  2043                           
  2044                           	psect	text5
  2045  0D91                     __ptext5:	
  2046 ;; *************** function _ftoa *****************
  2047 ;; Defined at:
  2048 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftoa.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  f               3   36[BANK0 ] float 
  2051 ;;  status          1   39[BANK0 ] PTR int 
  2052 ;;		 -> lcdDataFloat@status(2), 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  l               4   45[BANK0 ] unsigned long 
  2055 ;;  rem             4   41[BANK0 ] unsigned long 
  2056 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  2057 ;;		 -> ftoa@buf(17), 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      PTR unsigned char 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2067 ;;      Params:         0       4       0       0
  2068 ;;      Locals:         0       9       0       0
  2069 ;;      Temps:          0       1       0       0
  2070 ;;      Totals:         0      14       0       0
  2071 ;;Total ram usage:       14 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    3
  2074 ;; This function calls:
  2075 ;;		___ftge
  2076 ;;		___ftmul
  2077 ;;		___ftneg
  2078 ;;		___ftsub
  2079 ;;		___fttol
  2080 ;;		___lltoft
  2081 ;;		_sprintf
  2082 ;; This function is called by:
  2083 ;;		_lcdDataFloat
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           
  2088                           ;psect for function _ftoa
  2089  0D91                     _ftoa:	
  2090                           
  2091                           ;incstack = 0
  2092                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2093  0D91  30AC               	movlw	(low (ftoa@buf| 0))& (0+255)
  2094  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  2095  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  2096  0D94  00C8               	movwf	??_ftoa
  2097  0D95  0848               	movf	??_ftoa,w
  2098  0D96  00D1               	movwf	ftoa@cp
  2099  0D97  0844               	movf	ftoa@f,w
  2100  0D98  00F0               	movwf	___ftge@ff1
  2101  0D99  0845               	movf	ftoa@f+1,w
  2102  0D9A  00F1               	movwf	___ftge@ff1+1
  2103  0D9B  0846               	movf	ftoa@f+2,w
  2104  0D9C  00F2               	movwf	___ftge@ff1+2
  2105  0D9D  3000               	movlw	0
  2106  0D9E  00F3               	movwf	___ftge@ff2
  2107  0D9F  3000               	movlw	0
  2108  0DA0  00F4               	movwf	___ftge@ff2+1
  2109  0DA1  3000               	movlw	0
  2110  0DA2  00F5               	movwf	___ftge@ff2+2
  2111  0DA3  158A  23DC  158A   	fcall	___ftge
  2112  0DA6  1803               	btfsc	3,0
  2113  0DA7  2DC6               	goto	l1884
  2114  0DA8  302D               	movlw	45
  2115  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  2116  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  2117  0DAB  00C8               	movwf	??_ftoa
  2118  0DAC  0851               	movf	ftoa@cp,w
  2119  0DAD  0084               	movwf	4
  2120  0DAE  0848               	movf	??_ftoa,w
  2121  0DAF  1383               	bcf	3,7	;select IRP bank0
  2122  0DB0  0080               	movwf	0
  2123  0DB1  3001               	movlw	1
  2124  0DB2  00C8               	movwf	??_ftoa
  2125  0DB3  0848               	movf	??_ftoa,w
  2126  0DB4  07D1               	addwf	ftoa@cp,f
  2127  0DB5  0844               	movf	ftoa@f,w
  2128  0DB6  00F0               	movwf	___ftneg@f1
  2129  0DB7  0845               	movf	ftoa@f+1,w
  2130  0DB8  00F1               	movwf	___ftneg@f1+1
  2131  0DB9  0846               	movf	ftoa@f+2,w
  2132  0DBA  00F2               	movwf	___ftneg@f1+2
  2133  0DBB  158A  2193  158A   	fcall	___ftneg
  2134  0DBE  0870               	movf	?___ftneg,w
  2135  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
  2136  0DC0  1303               	bcf	3,6	;RP1=0, select bank0
  2137  0DC1  00C4               	movwf	ftoa@f
  2138  0DC2  0871               	movf	?___ftneg+1,w
  2139  0DC3  00C5               	movwf	ftoa@f+1
  2140  0DC4  0872               	movf	?___ftneg+2,w
  2141  0DC5  00C6               	movwf	ftoa@f+2
  2142  0DC6                     l1884:	
  2143  0DC6  1283               	bcf	3,5	;RP0=0, select bank0
  2144  0DC7  1303               	bcf	3,6	;RP1=0, select bank0
  2145  0DC8  0844               	movf	ftoa@f,w
  2146  0DC9  00AA               	movwf	___fttol@f1
  2147  0DCA  0845               	movf	ftoa@f+1,w
  2148  0DCB  00AB               	movwf	___fttol@f1+1
  2149  0DCC  0846               	movf	ftoa@f+2,w
  2150  0DCD  00AC               	movwf	___fttol@f1+2
  2151  0DCE  158A  2503  158A   	fcall	___fttol
  2152  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0DD3  082D               	movf	?___fttol+3,w
  2155  0DD4  00D0               	movwf	ftoa@l+3
  2156  0DD5  082C               	movf	?___fttol+2,w
  2157  0DD6  00CF               	movwf	ftoa@l+2
  2158  0DD7  082B               	movf	?___fttol+1,w
  2159  0DD8  00CE               	movwf	ftoa@l+1
  2160  0DD9  082A               	movf	?___fttol,w
  2161  0DDA  00CD               	movwf	ftoa@l
  2162  0DDB  0850               	movf	ftoa@l+3,w
  2163  0DDC  00FB               	movwf	___lltoft@c+3
  2164  0DDD  084F               	movf	ftoa@l+2,w
  2165  0DDE  00FA               	movwf	___lltoft@c+2
  2166  0DDF  084E               	movf	ftoa@l+1,w
  2167  0DE0  00F9               	movwf	___lltoft@c+1
  2168  0DE1  084D               	movf	ftoa@l,w
  2169  0DE2  00F8               	movwf	___lltoft@c
  2170  0DE3  158A  2297  158A   	fcall	___lltoft
  2171  0DE6  0878               	movf	?___lltoft,w
  2172  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  2173  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  2174  0DE9  00A7               	movwf	___ftsub@f2
  2175  0DEA  0879               	movf	?___lltoft+1,w
  2176  0DEB  00A8               	movwf	___ftsub@f2+1
  2177  0DEC  087A               	movf	?___lltoft+2,w
  2178  0DED  00A9               	movwf	___ftsub@f2+2
  2179  0DEE  0844               	movf	ftoa@f,w
  2180  0DEF  00AA               	movwf	___ftsub@f1
  2181  0DF0  0845               	movf	ftoa@f+1,w
  2182  0DF1  00AB               	movwf	___ftsub@f1+1
  2183  0DF2  0846               	movf	ftoa@f+2,w
  2184  0DF3  00AC               	movwf	___ftsub@f1+2
  2185  0DF4  158A  21EC  158A   	fcall	___ftsub
  2186  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  2187  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  2188  0DF9  0827               	movf	?___ftsub,w
  2189  0DFA  00C4               	movwf	ftoa@f
  2190  0DFB  0828               	movf	?___ftsub+1,w
  2191  0DFC  00C5               	movwf	ftoa@f+1
  2192  0DFD  0829               	movf	?___ftsub+2,w
  2193  0DFE  00C6               	movwf	ftoa@f+2
  2194  0DFF  0844               	movf	ftoa@f,w
  2195  0E00  00FB               	movwf	___ftmul@f2
  2196  0E01  0845               	movf	ftoa@f+1,w
  2197  0E02  00FC               	movwf	___ftmul@f2+1
  2198  0E03  0846               	movf	ftoa@f+2,w
  2199  0E04  00FD               	movwf	___ftmul@f2+2
  2200  0E05  3024               	movlw	36
  2201  0E06  00F8               	movwf	___ftmul@f1
  2202  0E07  3074               	movlw	116
  2203  0E08  00F9               	movwf	___ftmul@f1+1
  2204  0E09  3049               	movlw	73
  2205  0E0A  00FA               	movwf	___ftmul@f1+2
  2206  0E0B  158A  263C  158A   	fcall	___ftmul
  2207  0E0E  0878               	movf	?___ftmul,w
  2208  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  2209  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  2210  0E11  00AA               	movwf	___fttol@f1
  2211  0E12  0879               	movf	?___ftmul+1,w
  2212  0E13  00AB               	movwf	___fttol@f1+1
  2213  0E14  087A               	movf	?___ftmul+2,w
  2214  0E15  00AC               	movwf	___fttol@f1+2
  2215  0E16  158A  2503  158A   	fcall	___fttol
  2216  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  2217  0E1A  1303               	bcf	3,6	;RP1=0, select bank0
  2218  0E1B  082D               	movf	?___fttol+3,w
  2219  0E1C  00CC               	movwf	ftoa@rem+3
  2220  0E1D  082C               	movf	?___fttol+2,w
  2221  0E1E  00CB               	movwf	ftoa@rem+2
  2222  0E1F  082B               	movf	?___fttol+1,w
  2223  0E20  00CA               	movwf	ftoa@rem+1
  2224  0E21  082A               	movf	?___fttol,w
  2225  0E22  00C9               	movwf	ftoa@rem
  2226  0E23  307E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2227  0E24  00C8               	movwf	??_ftoa
  2228  0E25  0848               	movf	??_ftoa,w
  2229  0E26  00AA               	movwf	sprintf@f
  2230  0E27  0850               	movf	ftoa@l+3,w
  2231  0E28  00AE               	movwf	?_sprintf+4
  2232  0E29  084F               	movf	ftoa@l+2,w
  2233  0E2A  00AD               	movwf	?_sprintf+3
  2234  0E2B  084E               	movf	ftoa@l+1,w
  2235  0E2C  00AC               	movwf	?_sprintf+2
  2236  0E2D  084D               	movf	ftoa@l,w
  2237  0E2E  00AB               	movwf	?_sprintf+1
  2238  0E2F  084C               	movf	ftoa@rem+3,w
  2239  0E30  00B2               	movwf	?_sprintf+8
  2240  0E31  084B               	movf	ftoa@rem+2,w
  2241  0E32  00B1               	movwf	?_sprintf+7
  2242  0E33  084A               	movf	ftoa@rem+1,w
  2243  0E34  00B0               	movwf	?_sprintf+6
  2244  0E35  0849               	movf	ftoa@rem,w
  2245  0E36  00AF               	movwf	?_sprintf+5
  2246  0E37  0851               	movf	ftoa@cp,w
  2247  0E38  118A  259E         	fcall	_sprintf
  2248  0E3A  30AC               	movlw	(low (ftoa@buf| 0))& (0+255)
  2249  0E3B  0008               	return
  2250  0E3C                     __end_of_ftoa:	
  2251                           
  2252                           	psect	text6
  2253  059E                     __ptext6:	
  2254 ;; *************** function _sprintf *****************
  2255 ;; Defined at:
  2256 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  sp              1    wreg     PTR unsigned char 
  2259 ;;		 -> ftoa@buf(17), lcdDataInt@buf(16), 
  2260 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  2261 ;;		 -> STR_6(11), STR_1(3), 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  2264 ;;		 -> ftoa@buf(17), lcdDataInt@buf(16), 
  2265 ;;  val             4   25[BANK0 ] unsigned long 
  2266 ;;  tmpval          4    0        struct .
  2267 ;;  prec            2   33[BANK0 ] int 
  2268 ;;  width           2   31[BANK0 ] int 
  2269 ;;  cp              2    0        PTR const unsigned char 
  2270 ;;  len             2    0        unsigned int 
  2271 ;;  c               1   35[BANK0 ] char 
  2272 ;;  flag            1   29[BANK0 ] unsigned char 
  2273 ;;  ap              1   24[BANK0 ] PTR void [1]
  2274 ;;		 -> ?_sprintf(2), 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  2   10[BANK0 ] int 
  2277 ;; Registers used:
  2278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2284 ;;      Params:         0       9       0       0
  2285 ;;      Locals:         0      12       0       0
  2286 ;;      Temps:          0       5       0       0
  2287 ;;      Totals:         0      26       0       0
  2288 ;;Total ram usage:       26 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    1
  2291 ;; This function calls:
  2292 ;;		___lldiv
  2293 ;;		___llmod
  2294 ;;		___wmul
  2295 ;;		_isdigit
  2296 ;; This function is called by:
  2297 ;;		_lcdDataInt
  2298 ;;		_ftoa
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           
  2303                           ;psect for function _sprintf
  2304  059E                     _sprintf:	
  2305                           
  2306                           ;incstack = 0
  2307                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2308                           ;sprintf@sp stored from wreg
  2309  059E  1283               	bcf	3,5	;RP0=0, select bank0
  2310  059F  1303               	bcf	3,6	;RP1=0, select bank0
  2311  05A0  00BE               	movwf	sprintf@sp
  2312                           
  2313                           ;doprnt.c: 494: va_list ap;
  2314                           ;doprnt.c: 499: signed char c;
  2315                           ;doprnt.c: 501: int width;
  2316                           ;doprnt.c: 504: int prec;
  2317                           ;doprnt.c: 508: unsigned char flag;
  2318                           ;doprnt.c: 523: union {
  2319                           ;doprnt.c: 524: unsigned long vd;
  2320                           ;doprnt.c: 525: double integ;
  2321                           ;doprnt.c: 526: } tmpval;
  2322                           ;doprnt.c: 528: unsigned long val;
  2323                           ;doprnt.c: 529: unsigned len;
  2324                           ;doprnt.c: 530: const char * cp;
  2325                           ;doprnt.c: 533: *ap = __va_start();
  2326  05A1  302B               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2327  05A2  00B3               	movwf	??_sprintf
  2328  05A3  0833               	movf	??_sprintf,w
  2329  05A4  00B8               	movwf	sprintf@ap
  2330  05A5                     l1702:	
  2331                           ;doprnt.c: 536: while(c = *f++) {
  2332                           
  2333  05A5  3001               	movlw	1
  2334  05A6  07AA               	addwf	sprintf@f,f
  2335  05A7  30FF               	movlw	-1
  2336  05A8  072A               	addwf	sprintf@f,w
  2337  05A9  0084               	movwf	4
  2338  05AA  158A  200A  118A   	fcall	stringdir
  2339  05AD  00B3               	movwf	??_sprintf
  2340  05AE  0833               	movf	??_sprintf,w
  2341  05AF  00C3               	movwf	sprintf@c
  2342  05B0  0843               	movf	sprintf@c,w
  2343  05B1  1903               	btfsc	3,2
  2344  05B2  2FF2               	goto	l1704
  2345                           
  2346                           ;doprnt.c: 538: if(c != '%')
  2347  05B3  3025               	movlw	37
  2348  05B4  0643               	xorwf	sprintf@c,w
  2349  05B5  1903               	btfsc	3,2
  2350  05B6  2DC3               	goto	l1582
  2351                           
  2352                           ;doprnt.c: 540: {
  2353                           ;doprnt.c: 541: ((*sp++ = (c)));
  2354  05B7  0843               	movf	sprintf@c,w
  2355  05B8  00B3               	movwf	??_sprintf
  2356  05B9  083E               	movf	sprintf@sp,w
  2357  05BA  0084               	movwf	4
  2358  05BB  0833               	movf	??_sprintf,w
  2359  05BC  1383               	bcf	3,7	;select IRP bank0
  2360  05BD  0080               	movwf	0
  2361  05BE  3001               	movlw	1
  2362  05BF  00B3               	movwf	??_sprintf
  2363  05C0  0833               	movf	??_sprintf,w
  2364  05C1  07BE               	addwf	sprintf@sp,f
  2365                           
  2366                           ;doprnt.c: 542: continue;
  2367  05C2  2DA5               	goto	l1702
  2368  05C3                     l1582:	
  2369                           
  2370                           ;doprnt.c: 543: }
  2371                           ;doprnt.c: 546: width = 0;
  2372  05C3  01BF               	clrf	sprintf@width
  2373  05C4  01C0               	clrf	sprintf@width+1
  2374                           
  2375                           ;doprnt.c: 548: flag = 0;
  2376  05C5  01BD               	clrf	sprintf@flag
  2377                           
  2378                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2379  05C6  082A               	movf	sprintf@f,w
  2380  05C7  0084               	movwf	4
  2381  05C8  158A  200A  118A   	fcall	stringdir
  2382  05CB  118A  2004  118A   	fcall	_isdigit
  2383  05CE  1C03               	btfss	3,0
  2384  05CF  2E06               	goto	l1596
  2385                           
  2386                           ;doprnt.c: 598: width = 0;
  2387  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  2388  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  2389  05D2  01BF               	clrf	sprintf@width
  2390  05D3  01C0               	clrf	sprintf@width+1
  2391  05D4                     l1588:	
  2392                           ;doprnt.c: 599: do {
  2393                           
  2394                           
  2395                           ;doprnt.c: 600: width *= 10;
  2396  05D4  300A               	movlw	10
  2397  05D5  00F0               	movwf	___wmul@multiplier
  2398  05D6  3000               	movlw	0
  2399  05D7  00F1               	movwf	___wmul@multiplier+1
  2400  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  2401  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  2402  05DA  0840               	movf	sprintf@width+1,w
  2403  05DB  00F3               	movwf	___wmul@multiplicand+1
  2404  05DC  083F               	movf	sprintf@width,w
  2405  05DD  00F2               	movwf	___wmul@multiplicand
  2406  05DE  158A  222D  118A   	fcall	___wmul
  2407  05E1  0871               	movf	?___wmul+1,w
  2408  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  2409  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  2410  05E4  00C0               	movwf	sprintf@width+1
  2411  05E5  0870               	movf	?___wmul,w
  2412  05E6  00BF               	movwf	sprintf@width
  2413                           
  2414                           ;doprnt.c: 601: width += *f++ - '0';
  2415  05E7  082A               	movf	sprintf@f,w
  2416  05E8  0084               	movwf	4
  2417  05E9  158A  200A  118A   	fcall	stringdir
  2418  05EC  3ED0               	addlw	208
  2419  05ED  00B3               	movwf	??_sprintf
  2420  05EE  30FF               	movlw	255
  2421  05EF  1803               	skipnc
  2422  05F0  3000               	movlw	0
  2423  05F1  00B4               	movwf	??_sprintf+1
  2424  05F2  0833               	movf	??_sprintf,w
  2425  05F3  07BF               	addwf	sprintf@width,f
  2426  05F4  1803               	skipnc
  2427  05F5  0AC0               	incf	sprintf@width+1,f
  2428  05F6  0834               	movf	??_sprintf+1,w
  2429  05F7  07C0               	addwf	sprintf@width+1,f
  2430  05F8  3001               	movlw	1
  2431  05F9  00B3               	movwf	??_sprintf
  2432  05FA  0833               	movf	??_sprintf,w
  2433  05FB  07AA               	addwf	sprintf@f,f
  2434                           
  2435                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2436  05FC  082A               	movf	sprintf@f,w
  2437  05FD  0084               	movwf	4
  2438  05FE  158A  200A  118A   	fcall	stringdir
  2439  0601  118A  2004  118A   	fcall	_isdigit
  2440  0604  1803               	btfsc	3,0
  2441  0605  2DD4               	goto	l1588
  2442  0606                     l1596:	
  2443                           
  2444                           ;doprnt.c: 608: }
  2445                           ;doprnt.c: 611: if(*f == '.') {
  2446  0606  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0607  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0608  082A               	movf	sprintf@f,w
  2449  0609  0084               	movwf	4
  2450  060A  158A  200A  118A   	fcall	stringdir
  2451  060D  3A2E               	xorlw	46
  2452  060E  1D03               	skipz
  2453  060F  2E48               	goto	l1608
  2454                           
  2455                           ;doprnt.c: 613: f++;
  2456  0610  3001               	movlw	1
  2457  0611  00B3               	movwf	??_sprintf
  2458  0612  0833               	movf	??_sprintf,w
  2459  0613  07AA               	addwf	sprintf@f,f
  2460                           
  2461                           ;doprnt.c: 620: {
  2462                           ;doprnt.c: 621: prec = 0;
  2463  0614  01C1               	clrf	sprintf@prec
  2464  0615  01C2               	clrf	sprintf@prec+1
  2465  0616                     l1606:	
  2466                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2467                           
  2468  0616  082A               	movf	sprintf@f,w
  2469  0617  0084               	movwf	4
  2470  0618  158A  200A  118A   	fcall	stringdir
  2471  061B  118A  2004  118A   	fcall	_isdigit
  2472  061E  1C03               	btfss	3,0
  2473  061F  2E51               	goto	l1612
  2474                           
  2475                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2476  0620  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0621  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0622  0842               	movf	sprintf@prec+1,w
  2479  0623  00F1               	movwf	___wmul@multiplier+1
  2480  0624  0841               	movf	sprintf@prec,w
  2481  0625  00F0               	movwf	___wmul@multiplier
  2482  0626  300A               	movlw	10
  2483  0627  00F2               	movwf	___wmul@multiplicand
  2484  0628  3000               	movlw	0
  2485  0629  00F3               	movwf	___wmul@multiplicand+1
  2486  062A  158A  222D  118A   	fcall	___wmul
  2487  062D  1283               	bcf	3,5	;RP0=0, select bank0
  2488  062E  1303               	bcf	3,6	;RP1=0, select bank0
  2489  062F  082A               	movf	sprintf@f,w
  2490  0630  0084               	movwf	4
  2491  0631  158A  200A  118A   	fcall	stringdir
  2492  0634  0770               	addwf	?___wmul,w
  2493  0635  00B3               	movwf	??_sprintf
  2494  0636  3000               	movlw	0
  2495  0637  1803               	skipnc
  2496  0638  3001               	movlw	1
  2497  0639  0771               	addwf	?___wmul+1,w
  2498  063A  00B4               	movwf	??_sprintf+1
  2499  063B  0833               	movf	??_sprintf,w
  2500  063C  3ED0               	addlw	208
  2501  063D  00C1               	movwf	sprintf@prec
  2502  063E  0834               	movf	??_sprintf+1,w
  2503  063F  1803               	skipnc
  2504  0640  3E01               	addlw	1
  2505  0641  3EFF               	addlw	255
  2506  0642  00C2               	movwf	sprintf@prec+1
  2507  0643  3001               	movlw	1
  2508  0644  00B3               	movwf	??_sprintf
  2509  0645  0833               	movf	??_sprintf,w
  2510  0646  07AA               	addwf	sprintf@f,f
  2511  0647  2E16               	goto	l1606
  2512  0648                     l1608:	
  2513                           ;doprnt.c: 624: }
  2514                           ;doprnt.c: 625: } else {
  2515                           
  2516                           
  2517                           ;doprnt.c: 626: prec = 0;
  2518  0648  1283               	bcf	3,5	;RP0=0, select bank0
  2519  0649  1303               	bcf	3,6	;RP1=0, select bank0
  2520  064A  01C1               	clrf	sprintf@prec
  2521  064B  01C2               	clrf	sprintf@prec+1
  2522                           
  2523                           ;doprnt.c: 635: switch(c = *f++) {
  2524                           
  2525                           ;doprnt.c: 630: }
  2526                           ;doprnt.c: 633: loop:
  2527  064C  2E51               	goto	l1612
  2528  064D                     l191:	
  2529                           ;doprnt.c: 641: case 'l':
  2530                           
  2531                           ;doprnt.c: 638: goto alldone;
  2532                           
  2533                           ;doprnt.c: 637: case 0:
  2534                           
  2535                           
  2536                           ;doprnt.c: 643: flag |= 0x10;
  2537  064D  163D               	bsf	sprintf@flag,4
  2538                           
  2539                           ;doprnt.c: 644: goto loop;
  2540  064E  2E51               	goto	l1612
  2541  064F                     l196:	
  2542                           ;doprnt.c: 817: case 'u':
  2543                           
  2544                           ;doprnt.c: 813: continue;
  2545                           
  2546                           ;doprnt.c: 802: default:
  2547                           
  2548                           ;doprnt.c: 698: case 'i':
  2549                           ;doprnt.c: 699: break;
  2550                           
  2551                           ;doprnt.c: 697: case 'd':
  2552                           
  2553                           
  2554                           ;doprnt.c: 818: flag |= 0x40;
  2555  064F  173D               	bsf	sprintf@flag,6
  2556                           
  2557                           ;doprnt.c: 822: }
  2558                           
  2559                           ;doprnt.c: 819: break;
  2560  0650  2E6C               	goto	l194
  2561  0651                     l1612:	
  2562  0651  3001               	movlw	1
  2563  0652  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0653  1303               	bcf	3,6	;RP1=0, select bank0
  2565  0654  07AA               	addwf	sprintf@f,f
  2566  0655  30FF               	movlw	-1
  2567  0656  072A               	addwf	sprintf@f,w
  2568  0657  0084               	movwf	4
  2569  0658  158A  200A  118A   	fcall	stringdir
  2570  065B  00C3               	movwf	sprintf@c
  2571                           
  2572                           ; Switch size 1, requested type "space"
  2573                           ; Number of cases is 5, Range of values is 0 to 117
  2574                           ; switch strategies available:
  2575                           ; Name         Instructions Cycles
  2576                           ; simple_byte           16     9 (average)
  2577                           ; direct_byte          243     7 (fixed)
  2578                           ; jumptable            260     6 (fixed)
  2579                           ;	Chosen strategy is simple_byte
  2580  065C  3A00               	xorlw	0	; case 0
  2581  065D  1903               	skipnz
  2582  065E  2FF2               	goto	l1704
  2583  065F  3A64               	xorlw	100	; case 100
  2584  0660  1903               	skipnz
  2585  0661  2E6C               	goto	l194
  2586  0662  3A0D               	xorlw	13	; case 105
  2587  0663  1903               	skipnz
  2588  0664  2E6C               	goto	l194
  2589  0665  3A05               	xorlw	5	; case 108
  2590  0666  1903               	skipnz
  2591  0667  2E4D               	goto	l191
  2592  0668  3A19               	xorlw	25	; case 117
  2593  0669  1903               	skipnz
  2594  066A  2E4F               	goto	l196
  2595  066B  2DA5               	goto	l1702
  2596  066C                     l194:	
  2597                           
  2598                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2599  066C  1B3D               	btfsc	sprintf@flag,6
  2600  066D  2EA7               	goto	l197
  2601                           
  2602                           ;doprnt.c: 1253: {
  2603                           ;doprnt.c: 1255: if(flag & 0x10)
  2604  066E  1E3D               	btfss	sprintf@flag,4
  2605  066F  2E80               	goto	l1620
  2606                           
  2607                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2608  0670  0838               	movf	sprintf@ap,w
  2609  0671  0084               	movwf	4
  2610  0672  1383               	bcf	3,7	;select IRP bank0
  2611  0673  0800               	movf	0,w
  2612  0674  00B9               	movwf	sprintf@val
  2613  0675  0A84               	incf	4,f
  2614  0676  0800               	movf	0,w
  2615  0677  00BA               	movwf	sprintf@val+1
  2616  0678  0A84               	incf	4,f
  2617  0679  0800               	movf	0,w
  2618  067A  00BB               	movwf	sprintf@val+2
  2619  067B  0A84               	incf	4,f
  2620  067C  0800               	movf	0,w
  2621  067D  00BC               	movwf	sprintf@val+3
  2622  067E  3004               	movlw	4
  2623  067F  2E92               	goto	L2
  2624  0680                     l1620:	
  2625                           
  2626                           ;doprnt.c: 1257: else
  2627                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2628  0680  0838               	movf	sprintf@ap,w
  2629  0681  0084               	movwf	4
  2630  0682  1383               	bcf	3,7	;select IRP bank0
  2631  0683  0800               	movf	0,w
  2632  0684  00B3               	movwf	??_sprintf
  2633  0685  0A84               	incf	4,f
  2634  0686  0800               	movf	0,w
  2635  0687  00B4               	movwf	??_sprintf+1
  2636  0688  0833               	movf	??_sprintf,w
  2637  0689  00B9               	movwf	sprintf@val
  2638  068A  0834               	movf	??_sprintf+1,w
  2639  068B  00BA               	movwf	sprintf@val+1
  2640  068C  3000               	movlw	0
  2641  068D  1BBA               	btfsc	sprintf@val+1,7
  2642  068E  30FF               	movlw	255
  2643  068F  00BB               	movwf	sprintf@val+2
  2644  0690  00BC               	movwf	sprintf@val+3
  2645  0691  3002               	movlw	2
  2646  0692                     L2:	
  2647  0692  00B3               	movwf	??_sprintf
  2648  0693  0833               	movf	??_sprintf,w
  2649  0694  07B8               	addwf	sprintf@ap,f
  2650                           
  2651                           ;doprnt.c: 1261: if((long)val < 0) {
  2652  0695  1FBC               	btfss	sprintf@val+3,7
  2653  0696  2ECB               	goto	l1638
  2654                           
  2655                           ;doprnt.c: 1262: flag |= 0x03;
  2656  0697  3003               	movlw	3
  2657  0698  00B3               	movwf	??_sprintf
  2658  0699  0833               	movf	??_sprintf,w
  2659  069A  04BD               	iorwf	sprintf@flag,f
  2660                           
  2661                           ;doprnt.c: 1263: val = -val;
  2662  069B  09B9               	comf	sprintf@val,f
  2663  069C  09BA               	comf	sprintf@val+1,f
  2664  069D  09BB               	comf	sprintf@val+2,f
  2665  069E  09BC               	comf	sprintf@val+3,f
  2666  069F  0AB9               	incf	sprintf@val,f
  2667  06A0  1903               	skipnz
  2668  06A1  0ABA               	incf	sprintf@val+1,f
  2669  06A2  1903               	skipnz
  2670  06A3  0ABB               	incf	sprintf@val+2,f
  2671  06A4  1903               	skipnz
  2672  06A5  0ABC               	incf	sprintf@val+3,f
  2673                           
  2674                           ;doprnt.c: 1264: }
  2675                           ;doprnt.c: 1266: }
  2676  06A6  2ECB               	goto	l1638
  2677  06A7                     l197:	
  2678                           
  2679                           ;doprnt.c: 1268: else
  2680                           ;doprnt.c: 1273: {
  2681                           ;doprnt.c: 1281: if(flag & 0x10)
  2682  06A7  1E3D               	btfss	sprintf@flag,4
  2683  06A8  2EB9               	goto	l1634
  2684                           
  2685                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2686  06A9  0838               	movf	sprintf@ap,w
  2687  06AA  0084               	movwf	4
  2688  06AB  1383               	bcf	3,7	;select IRP bank0
  2689  06AC  0800               	movf	0,w
  2690  06AD  00B9               	movwf	sprintf@val
  2691  06AE  0A84               	incf	4,f
  2692  06AF  0800               	movf	0,w
  2693  06B0  00BA               	movwf	sprintf@val+1
  2694  06B1  0A84               	incf	4,f
  2695  06B2  0800               	movf	0,w
  2696  06B3  00BB               	movwf	sprintf@val+2
  2697  06B4  0A84               	incf	4,f
  2698  06B5  0800               	movf	0,w
  2699  06B6  00BC               	movwf	sprintf@val+3
  2700  06B7  3004               	movlw	4
  2701  06B8  2EC8               	goto	L3
  2702  06B9                     l1634:	
  2703                           
  2704                           ;doprnt.c: 1283: else
  2705                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2706  06B9  0838               	movf	sprintf@ap,w
  2707  06BA  0084               	movwf	4
  2708  06BB  1383               	bcf	3,7	;select IRP bank0
  2709  06BC  0800               	movf	0,w
  2710  06BD  00B3               	movwf	??_sprintf
  2711  06BE  0A84               	incf	4,f
  2712  06BF  0800               	movf	0,w
  2713  06C0  00B4               	movwf	??_sprintf+1
  2714  06C1  0833               	movf	??_sprintf,w
  2715  06C2  00B9               	movwf	sprintf@val
  2716  06C3  0834               	movf	??_sprintf+1,w
  2717  06C4  00BA               	movwf	sprintf@val+1
  2718  06C5  01BB               	clrf	sprintf@val+2
  2719  06C6  01BC               	clrf	sprintf@val+3
  2720  06C7  3002               	movlw	2
  2721  06C8                     L3:	
  2722  06C8  00B3               	movwf	??_sprintf
  2723  06C9  0833               	movf	??_sprintf,w
  2724  06CA  07B8               	addwf	sprintf@ap,f
  2725  06CB                     l1638:	
  2726                           
  2727                           ;doprnt.c: 1287: }
  2728                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2729  06CB  0841               	movf	sprintf@prec,w
  2730  06CC  0442               	iorwf	sprintf@prec+1,w
  2731  06CD  1D03               	btfss	3,2
  2732  06CE  2EDB               	goto	l1644
  2733  06CF  083C               	movf	sprintf@val+3,w
  2734  06D0  043B               	iorwf	sprintf@val+2,w
  2735  06D1  043A               	iorwf	sprintf@val+1,w
  2736  06D2  0439               	iorwf	sprintf@val,w
  2737  06D3  1D03               	skipz
  2738  06D4  2EDB               	goto	l1644
  2739                           
  2740                           ;doprnt.c: 1291: prec++;
  2741  06D5  3001               	movlw	1
  2742  06D6  07C1               	addwf	sprintf@prec,f
  2743  06D7  1803               	skipnc
  2744  06D8  0AC2               	incf	sprintf@prec+1,f
  2745  06D9  3000               	movlw	0
  2746  06DA  07C2               	addwf	sprintf@prec+1,f
  2747  06DB                     l1644:	
  2748                           
  2749                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2750  06DB  01C3               	clrf	sprintf@c
  2751  06DC  0AC3               	incf	sprintf@c,f
  2752  06DD  300A               	movlw	10
  2753  06DE  0643               	xorwf	sprintf@c,w
  2754  06DF  1903               	btfsc	3,2
  2755  06E0  2F15               	goto	l1656
  2756  06E1                     l1650:	
  2757                           
  2758                           ;doprnt.c: 1306: if(val < dpowers[c])
  2759  06E1  0843               	movf	sprintf@c,w
  2760  06E2  00B3               	movwf	??_sprintf
  2761  06E3  3001               	movlw	1
  2762  06E4                     u2695:	
  2763  06E4  1003               	clrc
  2764  06E5  0DB3               	rlf	??_sprintf,f
  2765  06E6  3EFF               	addlw	-1
  2766  06E7  1D03               	skipz
  2767  06E8  2EE4               	goto	u2695
  2768  06E9  1003               	clrc
  2769  06EA  0D33               	rlf	??_sprintf,w
  2770  06EB  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2771  06EC  0084               	movwf	4
  2772  06ED  158A  200A  118A   	fcall	stringdir
  2773  06F0  00B4               	movwf	??_sprintf+1
  2774  06F1  158A  200A  118A   	fcall	stringdir
  2775  06F4  00B5               	movwf	??_sprintf+2
  2776  06F5  158A  200A  118A   	fcall	stringdir
  2777  06F8  00B6               	movwf	??_sprintf+3
  2778  06F9  158A  200A  118A   	fcall	stringdir
  2779  06FC  00B7               	movwf	??_sprintf+4
  2780  06FD  0837               	movf	??_sprintf+4,w
  2781  06FE  023C               	subwf	sprintf@val+3,w
  2782  06FF  1D03               	skipz
  2783  0700  2F0B               	goto	u2705
  2784  0701  0836               	movf	??_sprintf+3,w
  2785  0702  023B               	subwf	sprintf@val+2,w
  2786  0703  1D03               	skipz
  2787  0704  2F0B               	goto	u2705
  2788  0705  0835               	movf	??_sprintf+2,w
  2789  0706  023A               	subwf	sprintf@val+1,w
  2790  0707  1D03               	skipz
  2791  0708  2F0B               	goto	u2705
  2792  0709  0834               	movf	??_sprintf+1,w
  2793  070A  0239               	subwf	sprintf@val,w
  2794  070B                     u2705:	
  2795  070B  1C03               	btfss	3,0
  2796  070C  2F15               	goto	l1656
  2797                           
  2798                           ;doprnt.c: 1307: break;
  2799  070D  3001               	movlw	1
  2800  070E  00B3               	movwf	??_sprintf
  2801  070F  0833               	movf	??_sprintf,w
  2802  0710  07C3               	addwf	sprintf@c,f
  2803  0711  300A               	movlw	10
  2804  0712  0643               	xorwf	sprintf@c,w
  2805  0713  1D03               	btfss	3,2
  2806  0714  2EE1               	goto	l1650
  2807  0715                     l1656:	
  2808                           
  2809                           ;doprnt.c: 1339: if(c < prec)
  2810  0715  0843               	movf	sprintf@c,w
  2811  0716  00B3               	movwf	??_sprintf
  2812  0717  01B4               	clrf	??_sprintf+1
  2813  0718  1BB3               	btfsc	??_sprintf,7
  2814  0719  03B4               	decf	??_sprintf+1,f
  2815  071A  0834               	movf	??_sprintf+1,w
  2816  071B  3A80               	xorlw	128
  2817  071C  00B5               	movwf	??_sprintf+2
  2818  071D  0842               	movf	sprintf@prec+1,w
  2819  071E  3A80               	xorlw	128
  2820  071F  0235               	subwf	??_sprintf+2,w
  2821  0720  1D03               	skipz
  2822  0721  2F24               	goto	u2725
  2823  0722  0841               	movf	sprintf@prec,w
  2824  0723  0233               	subwf	??_sprintf,w
  2825  0724                     u2725:	
  2826  0724  1803               	skipnc
  2827  0725  2F2D               	goto	l1660
  2828                           
  2829                           ;doprnt.c: 1340: c = prec;
  2830  0726  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0727  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0728  0841               	movf	sprintf@prec,w
  2833  0729  00B3               	movwf	??_sprintf
  2834  072A  0833               	movf	??_sprintf,w
  2835  072B  00C3               	movwf	sprintf@c
  2836  072C  2F47               	goto	l209
  2837  072D                     l1660:	
  2838                           
  2839                           ;doprnt.c: 1341: else if(prec < c)
  2840  072D  1283               	bcf	3,5	;RP0=0, select bank0
  2841  072E  1303               	bcf	3,6	;RP1=0, select bank0
  2842  072F  0843               	movf	sprintf@c,w
  2843  0730  00B3               	movwf	??_sprintf
  2844  0731  01B4               	clrf	??_sprintf+1
  2845  0732  1BB3               	btfsc	??_sprintf,7
  2846  0733  03B4               	decf	??_sprintf+1,f
  2847  0734  0842               	movf	sprintf@prec+1,w
  2848  0735  3A80               	xorlw	128
  2849  0736  00B5               	movwf	??_sprintf+2
  2850  0737  0834               	movf	??_sprintf+1,w
  2851  0738  3A80               	xorlw	128
  2852  0739  0235               	subwf	??_sprintf+2,w
  2853  073A  1D03               	skipz
  2854  073B  2F3E               	goto	u2735
  2855  073C  0833               	movf	??_sprintf,w
  2856  073D  0241               	subwf	sprintf@prec,w
  2857  073E                     u2735:	
  2858  073E  1803               	skipnc
  2859  073F  2F47               	goto	l209
  2860                           
  2861                           ;doprnt.c: 1342: prec = c;
  2862  0740  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0741  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0742  0843               	movf	sprintf@c,w
  2865  0743  00C1               	movwf	sprintf@prec
  2866  0744  01C2               	clrf	sprintf@prec+1
  2867  0745  1BC1               	btfsc	sprintf@prec,7
  2868  0746  03C2               	decf	sprintf@prec+1,f
  2869  0747                     l209:	
  2870                           
  2871                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2872  0747  1283               	bcf	3,5	;RP0=0, select bank0
  2873  0748  1303               	bcf	3,6	;RP1=0, select bank0
  2874  0749  083F               	movf	sprintf@width,w
  2875  074A  0440               	iorwf	sprintf@width+1,w
  2876  074B  1903               	btfsc	3,2
  2877  074C  2F57               	goto	l1674
  2878  074D  083D               	movf	sprintf@flag,w
  2879  074E  3903               	andlw	3
  2880  074F  1903               	btfsc	3,2
  2881  0750  2F57               	goto	l1674
  2882                           
  2883                           ;doprnt.c: 1346: width--;
  2884  0751  30FF               	movlw	255
  2885  0752  07BF               	addwf	sprintf@width,f
  2886  0753  1803               	skipnc
  2887  0754  0AC0               	incf	sprintf@width+1,f
  2888  0755  30FF               	movlw	255
  2889  0756  07C0               	addwf	sprintf@width+1,f
  2890  0757                     l1674:	
  2891                           ;doprnt.c: 1351: else
  2892                           ;doprnt.c: 1352: width = 0;
  2893                           
  2894                           ;doprnt.c: 1350: width -= prec;
  2895                           
  2896                           ;doprnt.c: 1349: if(width > prec)
  2897                           
  2898                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2899                           
  2900                           
  2901                           ;doprnt.c: 1353: }
  2902                           ;doprnt.c: 1381: if(width > c)
  2903  0757  0843               	movf	sprintf@c,w
  2904  0758  00B3               	movwf	??_sprintf
  2905  0759  01B4               	clrf	??_sprintf+1
  2906  075A  1BB3               	btfsc	??_sprintf,7
  2907  075B  03B4               	decf	??_sprintf+1,f
  2908  075C  0834               	movf	??_sprintf+1,w
  2909  075D  3A80               	xorlw	128
  2910  075E  00B5               	movwf	??_sprintf+2
  2911  075F  0840               	movf	sprintf@width+1,w
  2912  0760  3A80               	xorlw	128
  2913  0761  0235               	subwf	??_sprintf+2,w
  2914  0762  1D03               	skipz
  2915  0763  2F66               	goto	u2775
  2916  0764  083F               	movf	sprintf@width,w
  2917  0765  0233               	subwf	??_sprintf,w
  2918  0766                     u2775:	
  2919  0766  1803               	skipnc
  2920  0767  2F76               	goto	l1678
  2921                           
  2922                           ;doprnt.c: 1382: width -= c;
  2923  0768  1283               	bcf	3,5	;RP0=0, select bank0
  2924  0769  1303               	bcf	3,6	;RP1=0, select bank0
  2925  076A  0843               	movf	sprintf@c,w
  2926  076B  00B3               	movwf	??_sprintf
  2927  076C  01B4               	clrf	??_sprintf+1
  2928  076D  1BB3               	btfsc	??_sprintf,7
  2929  076E  03B4               	decf	??_sprintf+1,f
  2930  076F  0833               	movf	??_sprintf,w
  2931  0770  02BF               	subwf	sprintf@width,f
  2932  0771  0834               	movf	??_sprintf+1,w
  2933  0772  1C03               	skipc
  2934  0773  03C0               	decf	sprintf@width+1,f
  2935  0774  02C0               	subwf	sprintf@width+1,f
  2936  0775  2F7A               	goto	l1680
  2937  0776                     l1678:	
  2938                           
  2939                           ;doprnt.c: 1383: else
  2940                           ;doprnt.c: 1384: width = 0;
  2941  0776  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0777  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0778  01BF               	clrf	sprintf@width
  2944  0779  01C0               	clrf	sprintf@width+1
  2945  077A                     l1680:	
  2946                           
  2947                           ;doprnt.c: 1422: {
  2948                           ;doprnt.c: 1424: if(width
  2949                           ;doprnt.c: 1428: )
  2950  077A  083F               	movf	sprintf@width,w
  2951  077B  0440               	iorwf	sprintf@width+1,w
  2952  077C  1903               	btfsc	3,2
  2953  077D  2F93               	goto	l1688
  2954  077E                     l1682:	
  2955                           ;doprnt.c: 1429: do
  2956                           
  2957                           
  2958                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2959  077E  3020               	movlw	32
  2960  077F  00B3               	movwf	??_sprintf
  2961  0780  083E               	movf	sprintf@sp,w
  2962  0781  0084               	movwf	4
  2963  0782  0833               	movf	??_sprintf,w
  2964  0783  1383               	bcf	3,7	;select IRP bank0
  2965  0784  0080               	movwf	0
  2966  0785  3001               	movlw	1
  2967  0786  00B3               	movwf	??_sprintf
  2968  0787  0833               	movf	??_sprintf,w
  2969  0788  07BE               	addwf	sprintf@sp,f
  2970                           
  2971                           ;doprnt.c: 1431: while(--width);
  2972  0789  30FF               	movlw	255
  2973  078A  07BF               	addwf	sprintf@width,f
  2974  078B  1803               	skipnc
  2975  078C  0AC0               	incf	sprintf@width+1,f
  2976  078D  30FF               	movlw	255
  2977  078E  07C0               	addwf	sprintf@width+1,f
  2978  078F  083F               	movf	sprintf@width,w
  2979  0790  0440               	iorwf	sprintf@width+1,w
  2980  0791  1D03               	btfss	3,2
  2981  0792  2F7E               	goto	l1682
  2982  0793                     l1688:	
  2983                           
  2984                           ;doprnt.c: 1438: if(flag & 0x03)
  2985  0793  083D               	movf	sprintf@flag,w
  2986  0794  3903               	andlw	3
  2987  0795  1903               	btfsc	3,2
  2988  0796  2FA2               	goto	l1700
  2989                           
  2990                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2991  0797  302D               	movlw	45
  2992  0798                     L4:	
  2993  0798  00B3               	movwf	??_sprintf
  2994  0799  083E               	movf	sprintf@sp,w
  2995  079A  0084               	movwf	4
  2996  079B  0833               	movf	??_sprintf,w
  2997  079C  1383               	bcf	3,7	;select IRP bank0
  2998  079D  0080               	movwf	0
  2999  079E  3001               	movlw	1
  3000  079F  00B3               	movwf	??_sprintf
  3001  07A0  0833               	movf	??_sprintf,w
  3002  07A1  07BE               	addwf	sprintf@sp,f
  3003  07A2                     l1700:	
  3004  07A2  30FF               	movlw	255
  3005  07A3  07C1               	addwf	sprintf@prec,f
  3006  07A4  1803               	skipnc
  3007  07A5  0AC2               	incf	sprintf@prec+1,f
  3008  07A6  30FF               	movlw	255
  3009  07A7  07C2               	addwf	sprintf@prec+1,f
  3010  07A8  0A41               	incf	sprintf@prec,w
  3011  07A9  1903               	btfsc	3,2
  3012  07AA  0A42               	incf	sprintf@prec+1,w
  3013  07AB  1903               	btfsc	3,2
  3014  07AC  2DA5               	goto	l1702
  3015                           
  3016                           ;doprnt.c: 1478: {
  3017                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3018                           
  3019                           ;doprnt.c: 1469: }
  3020                           ;doprnt.c: 1474: while(prec--) {
  3021  07AD  3000               	movlw	0
  3022  07AE  00A3               	movwf	___llmod@divisor+3
  3023  07AF  3000               	movlw	0
  3024  07B0  00A2               	movwf	___llmod@divisor+2
  3025  07B1  3000               	movlw	0
  3026  07B2  00A1               	movwf	___llmod@divisor+1
  3027  07B3  300A               	movlw	10
  3028  07B4  00A0               	movwf	___llmod@divisor
  3029  07B5  0841               	movf	sprintf@prec,w
  3030  07B6  00B3               	movwf	??_sprintf
  3031  07B7  3001               	movlw	1
  3032  07B8                     u2815:	
  3033  07B8  1003               	clrc
  3034  07B9  0DB3               	rlf	??_sprintf,f
  3035  07BA  3EFF               	addlw	-1
  3036  07BB  1D03               	skipz
  3037  07BC  2FB8               	goto	u2815
  3038  07BD  1003               	clrc
  3039  07BE  0D33               	rlf	??_sprintf,w
  3040  07BF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3041  07C0  0084               	movwf	4
  3042  07C1  158A  200A  118A   	fcall	stringdir
  3043  07C4  00F0               	movwf	___lldiv@divisor
  3044  07C5  158A  200A  118A   	fcall	stringdir
  3045  07C8  00F1               	movwf	___lldiv@divisor+1
  3046  07C9  158A  200A  118A   	fcall	stringdir
  3047  07CC  00F2               	movwf	___lldiv@divisor+2
  3048  07CD  158A  200A  118A   	fcall	stringdir
  3049  07D0  00F3               	movwf	___lldiv@divisor+3
  3050  07D1  083C               	movf	sprintf@val+3,w
  3051  07D2  00F7               	movwf	___lldiv@dividend+3
  3052  07D3  083B               	movf	sprintf@val+2,w
  3053  07D4  00F6               	movwf	___lldiv@dividend+2
  3054  07D5  083A               	movf	sprintf@val+1,w
  3055  07D6  00F5               	movwf	___lldiv@dividend+1
  3056  07D7  0839               	movf	sprintf@val,w
  3057  07D8  00F4               	movwf	___lldiv@dividend
  3058  07D9  158A  2439  118A   	fcall	___lldiv
  3059  07DC  0873               	movf	?___lldiv+3,w
  3060  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  3061  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  3062  07DF  00A7               	movwf	___llmod@dividend+3
  3063  07E0  0872               	movf	?___lldiv+2,w
  3064  07E1  00A6               	movwf	___llmod@dividend+2
  3065  07E2  0871               	movf	?___lldiv+1,w
  3066  07E3  00A5               	movwf	___llmod@dividend+1
  3067  07E4  0870               	movf	?___lldiv,w
  3068  07E5  00A4               	movwf	___llmod@dividend
  3069  07E6  158A  233B  118A   	fcall	___llmod
  3070  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  3071  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  3072  07EB  0820               	movf	?___llmod,w
  3073  07EC  3E30               	addlw	48
  3074  07ED  00B4               	movwf	??_sprintf+1
  3075  07EE  0834               	movf	??_sprintf+1,w
  3076  07EF  00C3               	movwf	sprintf@c
  3077                           
  3078                           ;doprnt.c: 1523: }
  3079                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3080  07F0  0843               	movf	sprintf@c,w
  3081  07F1  2F98               	goto	L4
  3082  07F2                     l1704:	
  3083                           ;doprnt.c: 1525: }
  3084                           ;doprnt.c: 1533: }
  3085                           ;doprnt.c: 1535: alldone:
  3086                           
  3087                           
  3088                           ;doprnt.c: 1538: *sp = 0;
  3089  07F2  083E               	movf	sprintf@sp,w
  3090  07F3  0084               	movwf	4
  3091  07F4  1383               	bcf	3,7	;select IRP bank0
  3092  07F5  0180               	clrf	0
  3093  07F6  0008               	return
  3094  07F7                     __end_of_sprintf:	
  3095                           ;doprnt.c: 1540: return 0;
  3096                           ;	Return value of _sprintf is never used
  3097                           
  3098                           
  3099                           	psect	text7
  3100  0004                     __ptext7:	
  3101 ;; *************** function _isdigit *****************
  3102 ;; Defined at:
  3103 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  c               1    wreg     unsigned char 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  c               1    1[COMMON] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;		None               void
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3117 ;;      Params:         0       0       0       0
  3118 ;;      Locals:         2       0       0       0
  3119 ;;      Temps:          0       0       0       0
  3120 ;;      Totals:         2       0       0       0
  3121 ;;Total ram usage:        2 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_sprintf
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           
  3131                           ;psect for function _isdigit
  3132  0004                     _isdigit:	
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3136                           ;isdigit@c stored from wreg
  3137  0004  00F1               	movwf	isdigit@c
  3138  0005  01F0               	clrf	_isdigit$465
  3139  0006  303A               	movlw	58
  3140  0007  0271               	subwf	isdigit@c,w
  3141  0008  1803               	skipnc
  3142  0009  2810               	goto	l1438
  3143  000A  3030               	movlw	48
  3144  000B  0271               	subwf	isdigit@c,w
  3145  000C  1C03               	skipc
  3146  000D  2810               	goto	l1438
  3147  000E  01F0               	clrf	_isdigit$465
  3148  000F  0AF0               	incf	_isdigit$465,f
  3149  0010                     l1438:	
  3150  0010  0C70               	rrf	_isdigit$465,w
  3151  0011  0008               	return
  3152  0012                     __end_of_isdigit:	
  3153                           
  3154                           	psect	text8
  3155  0A2D                     __ptext8:	
  3156 ;; *************** function ___wmul *****************
  3157 ;; Defined at:
  3158 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;  multiplier      2    0[COMMON] unsigned int 
  3161 ;;  multiplicand    2    2[COMMON] unsigned int 
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  product         2    4[COMMON] unsigned int 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  2    0[COMMON] unsigned int 
  3166 ;; Registers used:
  3167 ;;		wreg, status,2, status,0
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3173 ;;      Params:         4       0       0       0
  3174 ;;      Locals:         2       0       0       0
  3175 ;;      Temps:          0       0       0       0
  3176 ;;      Totals:         6       0       0       0
  3177 ;;Total ram usage:        6 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; This function calls:
  3180 ;;		Nothing
  3181 ;; This function is called by:
  3182 ;;		_sprintf
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           
  3187                           ;psect for function ___wmul
  3188  0A2D                     ___wmul:	
  3189                           
  3190                           ;incstack = 0
  3191                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3192  0A2D  01F4               	clrf	___wmul@product
  3193  0A2E  01F5               	clrf	___wmul@product+1
  3194  0A2F                     l1444:	
  3195  0A2F  1C70               	btfss	___wmul@multiplier,0
  3196  0A30  2A37               	goto	l309
  3197  0A31  0872               	movf	___wmul@multiplicand,w
  3198  0A32  07F4               	addwf	___wmul@product,f
  3199  0A33  1803               	skipnc
  3200  0A34  0AF5               	incf	___wmul@product+1,f
  3201  0A35  0873               	movf	___wmul@multiplicand+1,w
  3202  0A36  07F5               	addwf	___wmul@product+1,f
  3203  0A37                     l309:	
  3204  0A37  3001               	movlw	1
  3205  0A38                     u2155:	
  3206  0A38  1003               	clrc
  3207  0A39  0DF2               	rlf	___wmul@multiplicand,f
  3208  0A3A  0DF3               	rlf	___wmul@multiplicand+1,f
  3209  0A3B  3EFF               	addlw	-1
  3210  0A3C  1D03               	skipz
  3211  0A3D  2A38               	goto	u2155
  3212  0A3E  3001               	movlw	1
  3213  0A3F                     u2165:	
  3214  0A3F  1003               	clrc
  3215  0A40  0CF1               	rrf	___wmul@multiplier+1,f
  3216  0A41  0CF0               	rrf	___wmul@multiplier,f
  3217  0A42  3EFF               	addlw	-1
  3218  0A43  1D03               	skipz
  3219  0A44  2A3F               	goto	u2165
  3220  0A45  0870               	movf	___wmul@multiplier,w
  3221  0A46  0471               	iorwf	___wmul@multiplier+1,w
  3222  0A47  1D03               	btfss	3,2
  3223  0A48  2A2F               	goto	l1444
  3224  0A49  0875               	movf	___wmul@product+1,w
  3225  0A4A  00F1               	movwf	?___wmul+1
  3226  0A4B  0874               	movf	___wmul@product,w
  3227  0A4C  00F0               	movwf	?___wmul
  3228  0A4D  0008               	return
  3229  0A4E                     __end_of___wmul:	
  3230                           
  3231                           	psect	text9
  3232  0B3B                     __ptext9:	
  3233 ;; *************** function ___llmod *****************
  3234 ;; Defined at:
  3235 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  divisor         4    0[BANK0 ] unsigned long 
  3238 ;;  dividend        4    4[BANK0 ] unsigned long 
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  counter         1    9[BANK0 ] unsigned char 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  4    0[BANK0 ] unsigned long 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3250 ;;      Params:         0       8       0       0
  3251 ;;      Locals:         0       1       0       0
  3252 ;;      Temps:          0       1       0       0
  3253 ;;      Totals:         0      10       0       0
  3254 ;;Total ram usage:       10 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_sprintf
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           
  3264                           ;psect for function ___llmod
  3265  0B3B                     ___llmod:	
  3266                           
  3267                           ;incstack = 0
  3268                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  3269  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  3270  0B3C  1303               	bcf	3,6	;RP1=0, select bank0
  3271  0B3D  0823               	movf	___llmod@divisor+3,w
  3272  0B3E  0422               	iorwf	___llmod@divisor+2,w
  3273  0B3F  0421               	iorwf	___llmod@divisor+1,w
  3274  0B40  0420               	iorwf	___llmod@divisor,w
  3275  0B41  1903               	skipnz
  3276  0B42  2B80               	goto	l1566
  3277  0B43  01A9               	clrf	___llmod@counter
  3278  0B44  0AA9               	incf	___llmod@counter,f
  3279  0B45                     l1556:	
  3280  0B45  1BA3               	btfsc	___llmod@divisor+3,7
  3281  0B46  2B55               	goto	l1558
  3282  0B47  3001               	movlw	1
  3283  0B48  00A8               	movwf	??___llmod
  3284  0B49                     u2505:	
  3285  0B49  1003               	clrc
  3286  0B4A  0DA0               	rlf	___llmod@divisor,f
  3287  0B4B  0DA1               	rlf	___llmod@divisor+1,f
  3288  0B4C  0DA2               	rlf	___llmod@divisor+2,f
  3289  0B4D  0DA3               	rlf	___llmod@divisor+3,f
  3290  0B4E  0BA8               	decfsz	??___llmod,f
  3291  0B4F  2B49               	goto	u2505
  3292  0B50  3001               	movlw	1
  3293  0B51  00A8               	movwf	??___llmod
  3294  0B52  0828               	movf	??___llmod,w
  3295  0B53  07A9               	addwf	___llmod@counter,f
  3296  0B54  2B45               	goto	l1556
  3297  0B55                     l1558:	
  3298  0B55  0823               	movf	___llmod@divisor+3,w
  3299  0B56  0227               	subwf	___llmod@dividend+3,w
  3300  0B57  1D03               	skipz
  3301  0B58  2B63               	goto	u2525
  3302  0B59  0822               	movf	___llmod@divisor+2,w
  3303  0B5A  0226               	subwf	___llmod@dividend+2,w
  3304  0B5B  1D03               	skipz
  3305  0B5C  2B63               	goto	u2525
  3306  0B5D  0821               	movf	___llmod@divisor+1,w
  3307  0B5E  0225               	subwf	___llmod@dividend+1,w
  3308  0B5F  1D03               	skipz
  3309  0B60  2B63               	goto	u2525
  3310  0B61  0820               	movf	___llmod@divisor,w
  3311  0B62  0224               	subwf	___llmod@dividend,w
  3312  0B63                     u2525:	
  3313  0B63  1C03               	skipc
  3314  0B64  2B73               	goto	l1562
  3315  0B65  0820               	movf	___llmod@divisor,w
  3316  0B66  02A4               	subwf	___llmod@dividend,f
  3317  0B67  0821               	movf	___llmod@divisor+1,w
  3318  0B68  1C03               	skipc
  3319  0B69  0F21               	incfsz	___llmod@divisor+1,w
  3320  0B6A  02A5               	subwf	___llmod@dividend+1,f
  3321  0B6B  0822               	movf	___llmod@divisor+2,w
  3322  0B6C  1C03               	skipc
  3323  0B6D  0F22               	incfsz	___llmod@divisor+2,w
  3324  0B6E  02A6               	subwf	___llmod@dividend+2,f
  3325  0B6F  0823               	movf	___llmod@divisor+3,w
  3326  0B70  1C03               	skipc
  3327  0B71  0F23               	incfsz	___llmod@divisor+3,w
  3328  0B72  02A7               	subwf	___llmod@dividend+3,f
  3329  0B73                     l1562:	
  3330  0B73  3001               	movlw	1
  3331  0B74                     u2535:	
  3332  0B74  1003               	clrc
  3333  0B75  0CA3               	rrf	___llmod@divisor+3,f
  3334  0B76  0CA2               	rrf	___llmod@divisor+2,f
  3335  0B77  0CA1               	rrf	___llmod@divisor+1,f
  3336  0B78  0CA0               	rrf	___llmod@divisor,f
  3337  0B79  3EFF               	addlw	-1
  3338  0B7A  1D03               	skipz
  3339  0B7B  2B74               	goto	u2535
  3340  0B7C  3001               	movlw	1
  3341  0B7D  02A9               	subwf	___llmod@counter,f
  3342  0B7E  1D03               	btfss	3,2
  3343  0B7F  2B55               	goto	l1558
  3344  0B80                     l1566:	
  3345  0B80  0827               	movf	___llmod@dividend+3,w
  3346  0B81  00A3               	movwf	?___llmod+3
  3347  0B82  0826               	movf	___llmod@dividend+2,w
  3348  0B83  00A2               	movwf	?___llmod+2
  3349  0B84  0825               	movf	___llmod@dividend+1,w
  3350  0B85  00A1               	movwf	?___llmod+1
  3351  0B86  0824               	movf	___llmod@dividend,w
  3352  0B87  00A0               	movwf	?___llmod
  3353  0B88  0008               	return
  3354  0B89                     __end_of___llmod:	
  3355                           
  3356                           	psect	text10
  3357  0C39                     __ptext10:	
  3358 ;; *************** function ___lldiv *****************
  3359 ;; Defined at:
  3360 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  divisor         4    0[COMMON] unsigned long 
  3363 ;;  dividend        4    4[COMMON] unsigned long 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  quotient        4    9[COMMON] unsigned long 
  3366 ;;  counter         1   13[COMMON] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  4    0[COMMON] unsigned long 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3376 ;;      Params:         8       0       0       0
  3377 ;;      Locals:         5       0       0       0
  3378 ;;      Temps:          1       0       0       0
  3379 ;;      Totals:        14       0       0       0
  3380 ;;Total ram usage:       14 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_sprintf
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function ___lldiv
  3391  0C39                     ___lldiv:	
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3395  0C39  3000               	movlw	0
  3396  0C3A  00FC               	movwf	___lldiv@quotient+3
  3397  0C3B  3000               	movlw	0
  3398  0C3C  00FB               	movwf	___lldiv@quotient+2
  3399  0C3D  3000               	movlw	0
  3400  0C3E  00FA               	movwf	___lldiv@quotient+1
  3401  0C3F  3000               	movlw	0
  3402  0C40  00F9               	movwf	___lldiv@quotient
  3403  0C41  0873               	movf	___lldiv@divisor+3,w
  3404  0C42  0472               	iorwf	___lldiv@divisor+2,w
  3405  0C43  0471               	iorwf	___lldiv@divisor+1,w
  3406  0C44  0470               	iorwf	___lldiv@divisor,w
  3407  0C45  1903               	skipnz
  3408  0C46  2C8E               	goto	l1546
  3409  0C47  01FD               	clrf	___lldiv@counter
  3410  0C48  0AFD               	incf	___lldiv@counter,f
  3411  0C49                     l1532:	
  3412  0C49  1BF3               	btfsc	___lldiv@divisor+3,7
  3413  0C4A  2C59               	goto	l1534
  3414  0C4B  3001               	movlw	1
  3415  0C4C  00F8               	movwf	??___lldiv
  3416  0C4D                     u2435:	
  3417  0C4D  1003               	clrc
  3418  0C4E  0DF0               	rlf	___lldiv@divisor,f
  3419  0C4F  0DF1               	rlf	___lldiv@divisor+1,f
  3420  0C50  0DF2               	rlf	___lldiv@divisor+2,f
  3421  0C51  0DF3               	rlf	___lldiv@divisor+3,f
  3422  0C52  0BF8               	decfsz	??___lldiv,f
  3423  0C53  2C4D               	goto	u2435
  3424  0C54  3001               	movlw	1
  3425  0C55  00F8               	movwf	??___lldiv
  3426  0C56  0878               	movf	??___lldiv,w
  3427  0C57  07FD               	addwf	___lldiv@counter,f
  3428  0C58  2C49               	goto	l1532
  3429  0C59                     l1534:	
  3430  0C59  3001               	movlw	1
  3431  0C5A  00F8               	movwf	??___lldiv
  3432  0C5B                     u2455:	
  3433  0C5B  1003               	clrc
  3434  0C5C  0DF9               	rlf	___lldiv@quotient,f
  3435  0C5D  0DFA               	rlf	___lldiv@quotient+1,f
  3436  0C5E  0DFB               	rlf	___lldiv@quotient+2,f
  3437  0C5F  0DFC               	rlf	___lldiv@quotient+3,f
  3438  0C60  0BF8               	decfsz	??___lldiv,f
  3439  0C61  2C5B               	goto	u2455
  3440  0C62  0873               	movf	___lldiv@divisor+3,w
  3441  0C63  0277               	subwf	___lldiv@dividend+3,w
  3442  0C64  1D03               	skipz
  3443  0C65  2C70               	goto	u2465
  3444  0C66  0872               	movf	___lldiv@divisor+2,w
  3445  0C67  0276               	subwf	___lldiv@dividend+2,w
  3446  0C68  1D03               	skipz
  3447  0C69  2C70               	goto	u2465
  3448  0C6A  0871               	movf	___lldiv@divisor+1,w
  3449  0C6B  0275               	subwf	___lldiv@dividend+1,w
  3450  0C6C  1D03               	skipz
  3451  0C6D  2C70               	goto	u2465
  3452  0C6E  0870               	movf	___lldiv@divisor,w
  3453  0C6F  0274               	subwf	___lldiv@dividend,w
  3454  0C70                     u2465:	
  3455  0C70  1C03               	skipc
  3456  0C71  2C81               	goto	l1542
  3457  0C72  0870               	movf	___lldiv@divisor,w
  3458  0C73  02F4               	subwf	___lldiv@dividend,f
  3459  0C74  0871               	movf	___lldiv@divisor+1,w
  3460  0C75  1C03               	skipc
  3461  0C76  0F71               	incfsz	___lldiv@divisor+1,w
  3462  0C77  02F5               	subwf	___lldiv@dividend+1,f
  3463  0C78  0872               	movf	___lldiv@divisor+2,w
  3464  0C79  1C03               	skipc
  3465  0C7A  0F72               	incfsz	___lldiv@divisor+2,w
  3466  0C7B  02F6               	subwf	___lldiv@dividend+2,f
  3467  0C7C  0873               	movf	___lldiv@divisor+3,w
  3468  0C7D  1C03               	skipc
  3469  0C7E  0F73               	incfsz	___lldiv@divisor+3,w
  3470  0C7F  02F7               	subwf	___lldiv@dividend+3,f
  3471  0C80  1479               	bsf	___lldiv@quotient,0
  3472  0C81                     l1542:	
  3473  0C81  3001               	movlw	1
  3474  0C82                     u2475:	
  3475  0C82  1003               	clrc
  3476  0C83  0CF3               	rrf	___lldiv@divisor+3,f
  3477  0C84  0CF2               	rrf	___lldiv@divisor+2,f
  3478  0C85  0CF1               	rrf	___lldiv@divisor+1,f
  3479  0C86  0CF0               	rrf	___lldiv@divisor,f
  3480  0C87  3EFF               	addlw	-1
  3481  0C88  1D03               	skipz
  3482  0C89  2C82               	goto	u2475
  3483  0C8A  3001               	movlw	1
  3484  0C8B  02FD               	subwf	___lldiv@counter,f
  3485  0C8C  1D03               	btfss	3,2
  3486  0C8D  2C59               	goto	l1534
  3487  0C8E                     l1546:	
  3488  0C8E  087C               	movf	___lldiv@quotient+3,w
  3489  0C8F  00F3               	movwf	?___lldiv+3
  3490  0C90  087B               	movf	___lldiv@quotient+2,w
  3491  0C91  00F2               	movwf	?___lldiv+2
  3492  0C92  087A               	movf	___lldiv@quotient+1,w
  3493  0C93  00F1               	movwf	?___lldiv+1
  3494  0C94  0879               	movf	___lldiv@quotient,w
  3495  0C95  00F0               	movwf	?___lldiv
  3496  0C96  0008               	return
  3497  0C97                     __end_of___lldiv:	
  3498                           
  3499                           	psect	text11
  3500  0A97                     __ptext11:	
  3501 ;; *************** function ___lltoft *****************
  3502 ;; Defined at:
  3503 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  c               4    8[COMMON] unsigned long 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  exp             1   13[COMMON] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  3    8[COMMON] float 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0, pclath, cstack
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3517 ;;      Params:         4       0       0       0
  3518 ;;      Locals:         1       0       0       0
  3519 ;;      Temps:          1       0       0       0
  3520 ;;      Totals:         6       0       0       0
  3521 ;;Total ram usage:        6 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    1
  3524 ;; This function calls:
  3525 ;;		___ftpack
  3526 ;; This function is called by:
  3527 ;;		_ftoa
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           
  3532                           ;psect for function ___lltoft
  3533  0A97                     ___lltoft:	
  3534                           
  3535                           ;incstack = 0
  3536                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  3537  0A97  308E               	movlw	142
  3538  0A98  00FC               	movwf	??___lltoft
  3539  0A99  087C               	movf	??___lltoft,w
  3540  0A9A  00FD               	movwf	___lltoft@exp
  3541  0A9B                     l1840:	
  3542  0A9B  30FF               	movlw	255
  3543  0A9C  057B               	andwf	___lltoft@c+3,w
  3544  0A9D  1903               	btfsc	3,2
  3545  0A9E  2AAD               	goto	l1842
  3546  0A9F  3001               	movlw	1
  3547  0AA0                     u3155:	
  3548  0AA0  1003               	clrc
  3549  0AA1  0CFB               	rrf	___lltoft@c+3,f
  3550  0AA2  0CFA               	rrf	___lltoft@c+2,f
  3551  0AA3  0CF9               	rrf	___lltoft@c+1,f
  3552  0AA4  0CF8               	rrf	___lltoft@c,f
  3553  0AA5  3EFF               	addlw	-1
  3554  0AA6  1D03               	skipz
  3555  0AA7  2AA0               	goto	u3155
  3556  0AA8  3001               	movlw	1
  3557  0AA9  00FC               	movwf	??___lltoft
  3558  0AAA  087C               	movf	??___lltoft,w
  3559  0AAB  07FD               	addwf	___lltoft@exp,f
  3560  0AAC  2A9B               	goto	l1840
  3561  0AAD                     l1842:	
  3562  0AAD  0878               	movf	___lltoft@c,w
  3563  0AAE  00F0               	movwf	___ftpack@arg
  3564  0AAF  0879               	movf	___lltoft@c+1,w
  3565  0AB0  00F1               	movwf	___ftpack@arg+1
  3566  0AB1  087A               	movf	___lltoft@c+2,w
  3567  0AB2  00F2               	movwf	___ftpack@arg+2
  3568  0AB3  087D               	movf	___lltoft@exp,w
  3569  0AB4  00FC               	movwf	??___lltoft
  3570  0AB5  087C               	movf	??___lltoft,w
  3571  0AB6  00F3               	movwf	___ftpack@exp
  3572  0AB7  01F4               	clrf	___ftpack@sign
  3573  0AB8  158A  2497         	fcall	___ftpack
  3574  0ABA  0870               	movf	?___ftpack,w
  3575  0ABB  00F8               	movwf	?___lltoft
  3576  0ABC  0871               	movf	?___ftpack+1,w
  3577  0ABD  00F9               	movwf	?___lltoft+1
  3578  0ABE  0872               	movf	?___ftpack+2,w
  3579  0ABF  00FA               	movwf	?___lltoft+2
  3580  0AC0  0008               	return
  3581  0AC1                     __end_of___lltoft:	
  3582                           
  3583                           	psect	text12
  3584  0D03                     __ptext12:	
  3585 ;; *************** function ___fttol *****************
  3586 ;; Defined at:
  3587 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  f1              3   10[BANK0 ] float 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  lval            4   19[BANK0 ] unsigned long 
  3592 ;;  exp1            1   23[BANK0 ] unsigned char 
  3593 ;;  sign1           1   18[BANK0 ] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  4   10[BANK0 ] long 
  3596 ;; Registers used:
  3597 ;;		wreg, status,2, status,0
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3603 ;;      Params:         0       4       0       0
  3604 ;;      Locals:         0       6       0       0
  3605 ;;      Temps:          0       4       0       0
  3606 ;;      Totals:         0      14       0       0
  3607 ;;Total ram usage:       14 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_ftoa
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function ___fttol
  3618  0D03                     ___fttol:	
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3622  0D03  1283               	bcf	3,5	;RP0=0, select bank0
  3623  0D04  1303               	bcf	3,6	;RP1=0, select bank0
  3624  0D05  082A               	movf	___fttol@f1,w
  3625  0D06  00AE               	movwf	??___fttol
  3626  0D07  082B               	movf	___fttol@f1+1,w
  3627  0D08  00AF               	movwf	??___fttol+1
  3628  0D09  082C               	movf	___fttol@f1+2,w
  3629  0D0A  00B0               	movwf	??___fttol+2
  3630  0D0B  1003               	clrc
  3631  0D0C  0D2F               	rlf	??___fttol+1,w
  3632  0D0D  0D30               	rlf	??___fttol+2,w
  3633  0D0E  00B1               	movwf	??___fttol+3
  3634  0D0F  0831               	movf	??___fttol+3,w
  3635  0D10  00B7               	movwf	___fttol@exp1
  3636  0D11  0837               	movf	___fttol@exp1,w
  3637  0D12  1D03               	btfss	3,2
  3638  0D13  2D1D               	goto	l1800
  3639  0D14  3000               	movlw	0
  3640  0D15  00AD               	movwf	?___fttol+3
  3641  0D16  3000               	movlw	0
  3642  0D17  00AC               	movwf	?___fttol+2
  3643  0D18  3000               	movlw	0
  3644  0D19  00AB               	movwf	?___fttol+1
  3645  0D1A  3000               	movlw	0
  3646  0D1B  00AA               	movwf	?___fttol
  3647  0D1C  0008               	return
  3648  0D1D                     l1800:	
  3649  0D1D  082A               	movf	___fttol@f1,w
  3650  0D1E  00AE               	movwf	??___fttol
  3651  0D1F  082B               	movf	___fttol@f1+1,w
  3652  0D20  00AF               	movwf	??___fttol+1
  3653  0D21  082C               	movf	___fttol@f1+2,w
  3654  0D22  00B0               	movwf	??___fttol+2
  3655  0D23  3017               	movlw	23
  3656  0D24                     u3065:	
  3657  0D24  1003               	clrc
  3658  0D25  0CB0               	rrf	??___fttol+2,f
  3659  0D26  0CAF               	rrf	??___fttol+1,f
  3660  0D27  0CAE               	rrf	??___fttol,f
  3661  0D28  3EFF               	addlw	-1
  3662  0D29  1D03               	skipz
  3663  0D2A  2D24               	goto	u3065
  3664  0D2B  082E               	movf	??___fttol,w
  3665  0D2C  00B1               	movwf	??___fttol+3
  3666  0D2D  0831               	movf	??___fttol+3,w
  3667  0D2E  00B2               	movwf	___fttol@sign1
  3668  0D2F  17AB               	bsf	___fttol@f1+1,7
  3669  0D30  30FF               	movlw	255
  3670  0D31  05AA               	andwf	___fttol@f1,f
  3671  0D32  30FF               	movlw	255
  3672  0D33  05AB               	andwf	___fttol@f1+1,f
  3673  0D34  3000               	movlw	0
  3674  0D35  05AC               	andwf	___fttol@f1+2,f
  3675  0D36  082A               	movf	___fttol@f1,w
  3676  0D37  00B3               	movwf	___fttol@lval
  3677  0D38  082B               	movf	___fttol@f1+1,w
  3678  0D39  00B4               	movwf	___fttol@lval+1
  3679  0D3A  082C               	movf	___fttol@f1+2,w
  3680  0D3B  00B5               	movwf	___fttol@lval+2
  3681  0D3C  01B6               	clrf	___fttol@lval+3
  3682  0D3D  308E               	movlw	142
  3683  0D3E  02B7               	subwf	___fttol@exp1,f
  3684  0D3F  1FB7               	btfss	___fttol@exp1,7
  3685  0D40  2D5F               	goto	l1820
  3686  0D41  0837               	movf	___fttol@exp1,w
  3687  0D42  3A80               	xorlw	128
  3688  0D43  3E8F               	addlw	143
  3689  0D44  1803               	skipnc
  3690  0D45  2D4F               	goto	l1818
  3691  0D46  3000               	movlw	0
  3692  0D47  00AD               	movwf	?___fttol+3
  3693  0D48  3000               	movlw	0
  3694  0D49  00AC               	movwf	?___fttol+2
  3695  0D4A  3000               	movlw	0
  3696  0D4B  00AB               	movwf	?___fttol+1
  3697  0D4C  3000               	movlw	0
  3698  0D4D  00AA               	movwf	?___fttol
  3699  0D4E  0008               	return
  3700  0D4F                     l1818:	
  3701  0D4F  3001               	movlw	1
  3702  0D50                     u3095:	
  3703  0D50  1003               	clrc
  3704  0D51  0CB6               	rrf	___fttol@lval+3,f
  3705  0D52  0CB5               	rrf	___fttol@lval+2,f
  3706  0D53  0CB4               	rrf	___fttol@lval+1,f
  3707  0D54  0CB3               	rrf	___fttol@lval,f
  3708  0D55  3EFF               	addlw	-1
  3709  0D56  1D03               	skipz
  3710  0D57  2D50               	goto	u3095
  3711  0D58  3001               	movlw	1
  3712  0D59  00AE               	movwf	??___fttol
  3713  0D5A  082E               	movf	??___fttol,w
  3714  0D5B  07B7               	addwf	___fttol@exp1,f
  3715  0D5C  1903               	btfsc	3,2
  3716  0D5D  2D7A               	goto	l1828
  3717  0D5E  2D4F               	goto	l1818
  3718  0D5F                     l1820:	
  3719  0D5F  3018               	movlw	24
  3720  0D60  0237               	subwf	___fttol@exp1,w
  3721  0D61  1C03               	skipc
  3722  0D62  2D77               	goto	l569
  3723  0D63  3000               	movlw	0
  3724  0D64  00AD               	movwf	?___fttol+3
  3725  0D65  3000               	movlw	0
  3726  0D66  00AC               	movwf	?___fttol+2
  3727  0D67  3000               	movlw	0
  3728  0D68  00AB               	movwf	?___fttol+1
  3729  0D69  3000               	movlw	0
  3730  0D6A  00AA               	movwf	?___fttol
  3731  0D6B  0008               	return
  3732  0D6C                     l1826:	
  3733  0D6C  3001               	movlw	1
  3734  0D6D  00AE               	movwf	??___fttol
  3735  0D6E                     u3125:	
  3736  0D6E  1003               	clrc
  3737  0D6F  0DB3               	rlf	___fttol@lval,f
  3738  0D70  0DB4               	rlf	___fttol@lval+1,f
  3739  0D71  0DB5               	rlf	___fttol@lval+2,f
  3740  0D72  0DB6               	rlf	___fttol@lval+3,f
  3741  0D73  0BAE               	decfsz	??___fttol,f
  3742  0D74  2D6E               	goto	u3125
  3743  0D75  3001               	movlw	1
  3744  0D76  02B7               	subwf	___fttol@exp1,f
  3745  0D77                     l569:	
  3746  0D77  0837               	movf	___fttol@exp1,w
  3747  0D78  1D03               	btfss	3,2
  3748  0D79  2D6C               	goto	l1826
  3749  0D7A                     l1828:	
  3750  0D7A  0832               	movf	___fttol@sign1,w
  3751  0D7B  1903               	btfsc	3,2
  3752  0D7C  2D88               	goto	l1832
  3753  0D7D  09B3               	comf	___fttol@lval,f
  3754  0D7E  09B4               	comf	___fttol@lval+1,f
  3755  0D7F  09B5               	comf	___fttol@lval+2,f
  3756  0D80  09B6               	comf	___fttol@lval+3,f
  3757  0D81  0AB3               	incf	___fttol@lval,f
  3758  0D82  1903               	skipnz
  3759  0D83  0AB4               	incf	___fttol@lval+1,f
  3760  0D84  1903               	skipnz
  3761  0D85  0AB5               	incf	___fttol@lval+2,f
  3762  0D86  1903               	skipnz
  3763  0D87  0AB6               	incf	___fttol@lval+3,f
  3764  0D88                     l1832:	
  3765  0D88  0836               	movf	___fttol@lval+3,w
  3766  0D89  00AD               	movwf	?___fttol+3
  3767  0D8A  0835               	movf	___fttol@lval+2,w
  3768  0D8B  00AC               	movwf	?___fttol+2
  3769  0D8C  0834               	movf	___fttol@lval+1,w
  3770  0D8D  00AB               	movwf	?___fttol+1
  3771  0D8E  0833               	movf	___fttol@lval,w
  3772  0D8F  00AA               	movwf	?___fttol
  3773  0D90  0008               	return
  3774  0D91                     __end_of___fttol:	
  3775                           
  3776                           	psect	text13
  3777  09EC                     __ptext13:	
  3778 ;; *************** function ___ftsub *****************
  3779 ;; Defined at:
  3780 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;  f2              3    7[BANK0 ] float 
  3783 ;;  f1              3   10[BANK0 ] float 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  3    7[BANK0 ] float 
  3788 ;; Registers used:
  3789 ;;		wreg, status,2, status,0, pclath, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3795 ;;      Params:         0       6       0       0
  3796 ;;      Locals:         0       0       0       0
  3797 ;;      Temps:          0       0       0       0
  3798 ;;      Totals:         0       6       0       0
  3799 ;;Total ram usage:        6 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    2
  3802 ;; This function calls:
  3803 ;;		___ftadd
  3804 ;; This function is called by:
  3805 ;;		_ftoa
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function ___ftsub
  3811  09EC                     ___ftsub:	
  3812                           
  3813                           ;incstack = 0
  3814                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3815  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  3816  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  3817  09EE  0829               	movf	___ftsub@f2+2,w
  3818  09EF  0428               	iorwf	___ftsub@f2+1,w
  3819  09F0  0427               	iorwf	___ftsub@f2,w
  3820  09F1  1903               	skipnz
  3821  09F2  29F5               	goto	l1790
  3822  09F3  3080               	movlw	128
  3823  09F4  06A9               	xorwf	___ftsub@f2+2,f
  3824  09F5                     l1790:	
  3825  09F5  082A               	movf	___ftsub@f1,w
  3826  09F6  00F8               	movwf	___ftadd@f1
  3827  09F7  082B               	movf	___ftsub@f1+1,w
  3828  09F8  00F9               	movwf	___ftadd@f1+1
  3829  09F9  082C               	movf	___ftsub@f1+2,w
  3830  09FA  00FA               	movwf	___ftadd@f1+2
  3831  09FB  0827               	movf	___ftsub@f2,w
  3832  09FC  00FB               	movwf	___ftadd@f2
  3833  09FD  0828               	movf	___ftsub@f2+1,w
  3834  09FE  00FC               	movwf	___ftadd@f2+1
  3835  09FF  0829               	movf	___ftsub@f2+2,w
  3836  0A00  00FD               	movwf	___ftadd@f2+2
  3837  0A01  118A  2107         	fcall	___ftadd
  3838  0A03  0878               	movf	?___ftadd,w
  3839  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  3840  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  3841  0A06  00A7               	movwf	?___ftsub
  3842  0A07  0879               	movf	?___ftadd+1,w
  3843  0A08  00A8               	movwf	?___ftsub+1
  3844  0A09  087A               	movf	?___ftadd+2,w
  3845  0A0A  00A9               	movwf	?___ftsub+2
  3846  0A0B  0008               	return
  3847  0A0C                     __end_of___ftsub:	
  3848                           
  3849                           	psect	text14
  3850  0107                     __ptext14:	
  3851 ;; *************** function ___ftadd *****************
  3852 ;; Defined at:
  3853 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;  f1              3    8[COMMON] float 
  3856 ;;  f2              3   11[COMMON] float 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  exp1            1    6[BANK0 ] unsigned char 
  3859 ;;  exp2            1    5[BANK0 ] unsigned char 
  3860 ;;  sign            1    4[BANK0 ] unsigned char 
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  3    8[COMMON] float 
  3863 ;; Registers used:
  3864 ;;		wreg, status,2, status,0, pclath, cstack
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3870 ;;      Params:         6       0       0       0
  3871 ;;      Locals:         0       3       0       0
  3872 ;;      Temps:          0       4       0       0
  3873 ;;      Totals:         6       7       0       0
  3874 ;;Total ram usage:       13 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    1
  3877 ;; This function calls:
  3878 ;;		___ftpack
  3879 ;; This function is called by:
  3880 ;;		___ftsub
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           
  3885                           ;psect for function ___ftadd
  3886  0107                     ___ftadd:	
  3887                           
  3888                           ;incstack = 0
  3889                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3890  0107  0878               	movf	___ftadd@f1,w
  3891  0108  1283               	bcf	3,5	;RP0=0, select bank0
  3892  0109  1303               	bcf	3,6	;RP1=0, select bank0
  3893  010A  00A0               	movwf	??___ftadd
  3894  010B  0879               	movf	___ftadd@f1+1,w
  3895  010C  00A1               	movwf	??___ftadd+1
  3896  010D  087A               	movf	___ftadd@f1+2,w
  3897  010E  00A2               	movwf	??___ftadd+2
  3898  010F  1003               	clrc
  3899  0110  0D21               	rlf	??___ftadd+1,w
  3900  0111  0D22               	rlf	??___ftadd+2,w
  3901  0112  00A3               	movwf	??___ftadd+3
  3902  0113  0823               	movf	??___ftadd+3,w
  3903  0114  00A6               	movwf	___ftadd@exp1
  3904  0115  087B               	movf	___ftadd@f2,w
  3905  0116  00A0               	movwf	??___ftadd
  3906  0117  087C               	movf	___ftadd@f2+1,w
  3907  0118  00A1               	movwf	??___ftadd+1
  3908  0119  087D               	movf	___ftadd@f2+2,w
  3909  011A  00A2               	movwf	??___ftadd+2
  3910  011B  1003               	clrc
  3911  011C  0D21               	rlf	??___ftadd+1,w
  3912  011D  0D22               	rlf	??___ftadd+2,w
  3913  011E  00A3               	movwf	??___ftadd+3
  3914  011F  0823               	movf	??___ftadd+3,w
  3915  0120  00A5               	movwf	___ftadd@exp2
  3916  0121  0826               	movf	___ftadd@exp1,w
  3917  0122  1903               	btfsc	3,2
  3918  0123  2930               	goto	l1462
  3919  0124  0825               	movf	___ftadd@exp2,w
  3920  0125  0226               	subwf	___ftadd@exp1,w
  3921  0126  1803               	skipnc
  3922  0127  2937               	goto	l1466
  3923  0128  0326               	decf	___ftadd@exp1,w
  3924  0129  3AFF               	xorlw	255
  3925  012A  0725               	addwf	___ftadd@exp2,w
  3926  012B  00A0               	movwf	??___ftadd
  3927  012C  3019               	movlw	25
  3928  012D  0220               	subwf	??___ftadd,w
  3929  012E  1C03               	skipc
  3930  012F  2937               	goto	l1466
  3931  0130                     l1462:	
  3932  0130  087B               	movf	___ftadd@f2,w
  3933  0131  00F8               	movwf	?___ftadd
  3934  0132  087C               	movf	___ftadd@f2+1,w
  3935  0133  00F9               	movwf	?___ftadd+1
  3936  0134  087D               	movf	___ftadd@f2+2,w
  3937  0135  00FA               	movwf	?___ftadd+2
  3938  0136  0008               	return
  3939  0137                     l1466:	
  3940  0137  0825               	movf	___ftadd@exp2,w
  3941  0138  1903               	btfsc	3,2
  3942  0139  0008               	return
  3943  013A  0826               	movf	___ftadd@exp1,w
  3944  013B  0225               	subwf	___ftadd@exp2,w
  3945  013C  1803               	skipnc
  3946  013D  2946               	goto	l1472
  3947  013E  0325               	decf	___ftadd@exp2,w
  3948  013F  3AFF               	xorlw	255
  3949  0140  0726               	addwf	___ftadd@exp1,w
  3950  0141  00A0               	movwf	??___ftadd
  3951  0142  3019               	movlw	25
  3952  0143  0220               	subwf	??___ftadd,w
  3953  0144  1803               	btfsc	3,0
  3954  0145  0008               	return
  3955  0146                     l1472:	
  3956  0146  3006               	movlw	6
  3957  0147  00A0               	movwf	??___ftadd
  3958  0148  0820               	movf	??___ftadd,w
  3959  0149  00A4               	movwf	___ftadd@sign
  3960  014A  1BFA               	btfsc	___ftadd@f1+2,7
  3961  014B  17A4               	bsf	___ftadd@sign,7
  3962  014C  1BFD               	btfsc	___ftadd@f2+2,7
  3963  014D  1724               	bsf	___ftadd@sign,6
  3964  014E  17F9               	bsf	___ftadd@f1+1,7
  3965  014F  30FF               	movlw	255
  3966  0150  05F8               	andwf	___ftadd@f1,f
  3967  0151  30FF               	movlw	255
  3968  0152  05F9               	andwf	___ftadd@f1+1,f
  3969  0153  3000               	movlw	0
  3970  0154  05FA               	andwf	___ftadd@f1+2,f
  3971  0155  17FC               	bsf	___ftadd@f2+1,7
  3972  0156  30FF               	movlw	255
  3973  0157  05FB               	andwf	___ftadd@f2,f
  3974  0158  30FF               	movlw	255
  3975  0159  05FC               	andwf	___ftadd@f2+1,f
  3976  015A  3000               	movlw	0
  3977  015B  05FD               	andwf	___ftadd@f2+2,f
  3978  015C  0825               	movf	___ftadd@exp2,w
  3979  015D  0226               	subwf	___ftadd@exp1,w
  3980  015E  1803               	skipnc
  3981  015F  2986               	goto	l1494
  3982  0160                     l1484:	
  3983  0160  3001               	movlw	1
  3984  0161                     u2275:	
  3985  0161  1003               	clrc
  3986  0162  0DFB               	rlf	___ftadd@f2,f
  3987  0163  0DFC               	rlf	___ftadd@f2+1,f
  3988  0164  0DFD               	rlf	___ftadd@f2+2,f
  3989  0165  3EFF               	addlw	-1
  3990  0166  1D03               	skipz
  3991  0167  2961               	goto	u2275
  3992  0168  3001               	movlw	1
  3993  0169  02A5               	subwf	___ftadd@exp2,f
  3994  016A  0825               	movf	___ftadd@exp2,w
  3995  016B  0626               	xorwf	___ftadd@exp1,w
  3996  016C  1903               	skipnz
  3997  016D  2981               	goto	l1492
  3998  016E  3001               	movlw	1
  3999  016F  02A4               	subwf	___ftadd@sign,f
  4000  0170  0824               	movf	___ftadd@sign,w
  4001  0171  3907               	andlw	7
  4002  0172  1903               	btfsc	3,2
  4003  0173  2981               	goto	l1492
  4004  0174  2960               	goto	l1484
  4005  0175                     l1490:	
  4006  0175  3001               	movlw	1
  4007  0176                     u2305:	
  4008  0176  1003               	clrc
  4009  0177  0CFA               	rrf	___ftadd@f1+2,f
  4010  0178  0CF9               	rrf	___ftadd@f1+1,f
  4011  0179  0CF8               	rrf	___ftadd@f1,f
  4012  017A  3EFF               	addlw	-1
  4013  017B  1D03               	skipz
  4014  017C  2976               	goto	u2305
  4015  017D  3001               	movlw	1
  4016  017E  00A0               	movwf	??___ftadd
  4017  017F  0820               	movf	??___ftadd,w
  4018  0180  07A6               	addwf	___ftadd@exp1,f
  4019  0181                     l1492:	
  4020  0181  0826               	movf	___ftadd@exp1,w
  4021  0182  0625               	xorwf	___ftadd@exp2,w
  4022  0183  1903               	btfsc	3,2
  4023  0184  29AF               	goto	l501
  4024  0185  2975               	goto	l1490
  4025  0186                     l1494:	
  4026  0186  0826               	movf	___ftadd@exp1,w
  4027  0187  0225               	subwf	___ftadd@exp2,w
  4028  0188  1803               	skipnc
  4029  0189  29AF               	goto	l501
  4030  018A                     l1496:	
  4031  018A  3001               	movlw	1
  4032  018B                     u2335:	
  4033  018B  1003               	clrc
  4034  018C  0DF8               	rlf	___ftadd@f1,f
  4035  018D  0DF9               	rlf	___ftadd@f1+1,f
  4036  018E  0DFA               	rlf	___ftadd@f1+2,f
  4037  018F  3EFF               	addlw	-1
  4038  0190  1D03               	skipz
  4039  0191  298B               	goto	u2335
  4040  0192  3001               	movlw	1
  4041  0193  02A6               	subwf	___ftadd@exp1,f
  4042  0194  0825               	movf	___ftadd@exp2,w
  4043  0195  0626               	xorwf	___ftadd@exp1,w
  4044  0196  1903               	skipnz
  4045  0197  29AB               	goto	l1504
  4046  0198  3001               	movlw	1
  4047  0199  02A4               	subwf	___ftadd@sign,f
  4048  019A  0824               	movf	___ftadd@sign,w
  4049  019B  3907               	andlw	7
  4050  019C  1903               	btfsc	3,2
  4051  019D  29AB               	goto	l1504
  4052  019E  298A               	goto	l1496
  4053  019F                     l1502:	
  4054  019F  3001               	movlw	1
  4055  01A0                     u2365:	
  4056  01A0  1003               	clrc
  4057  01A1  0CFD               	rrf	___ftadd@f2+2,f
  4058  01A2  0CFC               	rrf	___ftadd@f2+1,f
  4059  01A3  0CFB               	rrf	___ftadd@f2,f
  4060  01A4  3EFF               	addlw	-1
  4061  01A5  1D03               	skipz
  4062  01A6  29A0               	goto	u2365
  4063  01A7  3001               	movlw	1
  4064  01A8  00A0               	movwf	??___ftadd
  4065  01A9  0820               	movf	??___ftadd,w
  4066  01AA  07A5               	addwf	___ftadd@exp2,f
  4067  01AB                     l1504:	
  4068  01AB  0826               	movf	___ftadd@exp1,w
  4069  01AC  0625               	xorwf	___ftadd@exp2,w
  4070  01AD  1D03               	skipz
  4071  01AE  299F               	goto	l1502
  4072  01AF                     l501:	
  4073  01AF  1FA4               	btfss	___ftadd@sign,7
  4074  01B0  29C1               	goto	l1508
  4075  01B1  30FF               	movlw	255
  4076  01B2  06F8               	xorwf	___ftadd@f1,f
  4077  01B3  30FF               	movlw	255
  4078  01B4  06F9               	xorwf	___ftadd@f1+1,f
  4079  01B5  30FF               	movlw	255
  4080  01B6  06FA               	xorwf	___ftadd@f1+2,f
  4081  01B7  3001               	movlw	1
  4082  01B8  07F8               	addwf	___ftadd@f1,f
  4083  01B9  3000               	movlw	0
  4084  01BA  1803               	skipnc
  4085  01BB  3001               	movlw	1
  4086  01BC  07F9               	addwf	___ftadd@f1+1,f
  4087  01BD  3000               	movlw	0
  4088  01BE  1803               	skipnc
  4089  01BF  3001               	movlw	1
  4090  01C0  07FA               	addwf	___ftadd@f1+2,f
  4091  01C1                     l1508:	
  4092  01C1  1F24               	btfss	___ftadd@sign,6
  4093  01C2  29D3               	goto	l1512
  4094  01C3  30FF               	movlw	255
  4095  01C4  06FB               	xorwf	___ftadd@f2,f
  4096  01C5  30FF               	movlw	255
  4097  01C6  06FC               	xorwf	___ftadd@f2+1,f
  4098  01C7  30FF               	movlw	255
  4099  01C8  06FD               	xorwf	___ftadd@f2+2,f
  4100  01C9  3001               	movlw	1
  4101  01CA  07FB               	addwf	___ftadd@f2,f
  4102  01CB  3000               	movlw	0
  4103  01CC  1803               	skipnc
  4104  01CD  3001               	movlw	1
  4105  01CE  07FC               	addwf	___ftadd@f2+1,f
  4106  01CF  3000               	movlw	0
  4107  01D0  1803               	skipnc
  4108  01D1  3001               	movlw	1
  4109  01D2  07FD               	addwf	___ftadd@f2+2,f
  4110  01D3                     l1512:	
  4111  01D3  01A4               	clrf	___ftadd@sign
  4112  01D4  0878               	movf	___ftadd@f1,w
  4113  01D5  07FB               	addwf	___ftadd@f2,f
  4114  01D6  0879               	movf	___ftadd@f1+1,w
  4115  01D7  1103               	clrz
  4116  01D8  1803               	skipnc
  4117  01D9  0A79               	incf	___ftadd@f1+1,w
  4118  01DA  1D03               	btfss	3,2
  4119  01DB  07FC               	addwf	___ftadd@f2+1,f
  4120  01DC  087A               	movf	___ftadd@f1+2,w
  4121  01DD  1103               	clrz
  4122  01DE  1803               	skipnc
  4123  01DF  0A7A               	incf	___ftadd@f1+2,w
  4124  01E0  1D03               	btfss	3,2
  4125  01E1  07FD               	addwf	___ftadd@f2+2,f
  4126  01E2  1FFD               	btfss	___ftadd@f2+2,7
  4127  01E3  29F6               	goto	l1522
  4128  01E4  30FF               	movlw	255
  4129  01E5  06FB               	xorwf	___ftadd@f2,f
  4130  01E6  30FF               	movlw	255
  4131  01E7  06FC               	xorwf	___ftadd@f2+1,f
  4132  01E8  30FF               	movlw	255
  4133  01E9  06FD               	xorwf	___ftadd@f2+2,f
  4134  01EA  3001               	movlw	1
  4135  01EB  07FB               	addwf	___ftadd@f2,f
  4136  01EC  3000               	movlw	0
  4137  01ED  1803               	skipnc
  4138  01EE  3001               	movlw	1
  4139  01EF  07FC               	addwf	___ftadd@f2+1,f
  4140  01F0  3000               	movlw	0
  4141  01F1  1803               	skipnc
  4142  01F2  3001               	movlw	1
  4143  01F3  07FD               	addwf	___ftadd@f2+2,f
  4144  01F4  01A4               	clrf	___ftadd@sign
  4145  01F5  0AA4               	incf	___ftadd@sign,f
  4146  01F6                     l1522:	
  4147  01F6  087B               	movf	___ftadd@f2,w
  4148  01F7  00F0               	movwf	___ftpack@arg
  4149  01F8  087C               	movf	___ftadd@f2+1,w
  4150  01F9  00F1               	movwf	___ftpack@arg+1
  4151  01FA  087D               	movf	___ftadd@f2+2,w
  4152  01FB  00F2               	movwf	___ftpack@arg+2
  4153  01FC  0826               	movf	___ftadd@exp1,w
  4154  01FD  00A0               	movwf	??___ftadd
  4155  01FE  0820               	movf	??___ftadd,w
  4156  01FF  00F3               	movwf	___ftpack@exp
  4157  0200  0824               	movf	___ftadd@sign,w
  4158  0201  00A1               	movwf	??___ftadd+1
  4159  0202  0821               	movf	??___ftadd+1,w
  4160  0203  00F4               	movwf	___ftpack@sign
  4161  0204  158A  2497         	fcall	___ftpack
  4162  0206  0870               	movf	?___ftpack,w
  4163  0207  00F8               	movwf	?___ftadd
  4164  0208  0871               	movf	?___ftpack+1,w
  4165  0209  00F9               	movwf	?___ftadd+1
  4166  020A  0872               	movf	?___ftpack+2,w
  4167  020B  00FA               	movwf	?___ftadd+2
  4168  020C  0008               	return
  4169  020D                     __end_of___ftadd:	
  4170                           
  4171                           	psect	text15
  4172  0993                     __ptext15:	
  4173 ;; *************** function ___ftneg *****************
  4174 ;; Defined at:
  4175 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  f1              3    0[COMMON] float 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  3    0[COMMON] float 
  4182 ;; Registers used:
  4183 ;;		wreg
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4189 ;;      Params:         3       0       0       0
  4190 ;;      Locals:         0       0       0       0
  4191 ;;      Temps:          0       0       0       0
  4192 ;;      Totals:         3       0       0       0
  4193 ;;Total ram usage:        3 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		_ftoa
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           
  4203                           ;psect for function ___ftneg
  4204  0993                     ___ftneg:	
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in ___ftneg: [wreg]
  4208  0993  0872               	movf	___ftneg@f1+2,w
  4209  0994  0471               	iorwf	___ftneg@f1+1,w
  4210  0995  0470               	iorwf	___ftneg@f1,w
  4211  0996  1903               	skipnz
  4212  0997  0008               	return
  4213  0998  3080               	movlw	128
  4214  0999  06F2               	xorwf	___ftneg@f1+2,f
  4215  099A  0008               	return
  4216  099B                     __end_of___ftneg:	
  4217                           
  4218                           	psect	text16
  4219  0E3C                     __ptext16:	
  4220 ;; *************** function ___ftmul *****************
  4221 ;; Defined at:
  4222 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  f1              3    8[COMMON] float 
  4225 ;;  f2              3   11[COMMON] float 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  f3_as_produc    3    5[BANK0 ] unsigned um
  4228 ;;  sign            1    9[BANK0 ] unsigned char 
  4229 ;;  cntr            1    8[BANK0 ] unsigned char 
  4230 ;;  exp             1    4[BANK0 ] unsigned char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  3    8[COMMON] float 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2, status,0, pclath, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4240 ;;      Params:         6       0       0       0
  4241 ;;      Locals:         0       6       0       0
  4242 ;;      Temps:          0       4       0       0
  4243 ;;      Totals:         6      10       0       0
  4244 ;;Total ram usage:       16 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    1
  4247 ;; This function calls:
  4248 ;;		___ftpack
  4249 ;; This function is called by:
  4250 ;;		_ftoa
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function ___ftmul
  4256  0E3C                     ___ftmul:	
  4257                           
  4258                           ;incstack = 0
  4259                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4260  0E3C  0878               	movf	___ftmul@f1,w
  4261  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  4262  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  4263  0E3F  00A0               	movwf	??___ftmul
  4264  0E40  0879               	movf	___ftmul@f1+1,w
  4265  0E41  00A1               	movwf	??___ftmul+1
  4266  0E42  087A               	movf	___ftmul@f1+2,w
  4267  0E43  00A2               	movwf	??___ftmul+2
  4268  0E44  1003               	clrc
  4269  0E45  0D21               	rlf	??___ftmul+1,w
  4270  0E46  0D22               	rlf	??___ftmul+2,w
  4271  0E47  00A3               	movwf	??___ftmul+3
  4272  0E48  0823               	movf	??___ftmul+3,w
  4273  0E49  00A4               	movwf	___ftmul@exp
  4274  0E4A  0824               	movf	___ftmul@exp,w
  4275  0E4B  1D03               	btfss	3,2
  4276  0E4C  2E54               	goto	l1734
  4277  0E4D  3000               	movlw	0
  4278  0E4E  00F8               	movwf	?___ftmul
  4279  0E4F  3000               	movlw	0
  4280  0E50  00F9               	movwf	?___ftmul+1
  4281  0E51  3000               	movlw	0
  4282  0E52  00FA               	movwf	?___ftmul+2
  4283  0E53  0008               	return
  4284  0E54                     l1734:	
  4285  0E54  087B               	movf	___ftmul@f2,w
  4286  0E55  00A0               	movwf	??___ftmul
  4287  0E56  087C               	movf	___ftmul@f2+1,w
  4288  0E57  00A1               	movwf	??___ftmul+1
  4289  0E58  087D               	movf	___ftmul@f2+2,w
  4290  0E59  00A2               	movwf	??___ftmul+2
  4291  0E5A  1003               	clrc
  4292  0E5B  0D21               	rlf	??___ftmul+1,w
  4293  0E5C  0D22               	rlf	??___ftmul+2,w
  4294  0E5D  00A3               	movwf	??___ftmul+3
  4295  0E5E  0823               	movf	??___ftmul+3,w
  4296  0E5F  00A9               	movwf	___ftmul@sign
  4297  0E60  0829               	movf	___ftmul@sign,w
  4298  0E61  1D03               	btfss	3,2
  4299  0E62  2E6A               	goto	l1740
  4300  0E63  3000               	movlw	0
  4301  0E64  00F8               	movwf	?___ftmul
  4302  0E65  3000               	movlw	0
  4303  0E66  00F9               	movwf	?___ftmul+1
  4304  0E67  3000               	movlw	0
  4305  0E68  00FA               	movwf	?___ftmul+2
  4306  0E69  0008               	return
  4307  0E6A                     l1740:	
  4308  0E6A  0829               	movf	___ftmul@sign,w
  4309  0E6B  3E7B               	addlw	123
  4310  0E6C  00A0               	movwf	??___ftmul
  4311  0E6D  0820               	movf	??___ftmul,w
  4312  0E6E  07A4               	addwf	___ftmul@exp,f
  4313  0E6F  0878               	movf	___ftmul@f1,w
  4314  0E70  00A0               	movwf	??___ftmul
  4315  0E71  0879               	movf	___ftmul@f1+1,w
  4316  0E72  00A1               	movwf	??___ftmul+1
  4317  0E73  087A               	movf	___ftmul@f1+2,w
  4318  0E74  00A2               	movwf	??___ftmul+2
  4319  0E75  3010               	movlw	16
  4320  0E76                     u2915:	
  4321  0E76  1003               	clrc
  4322  0E77  0CA2               	rrf	??___ftmul+2,f
  4323  0E78  0CA1               	rrf	??___ftmul+1,f
  4324  0E79  0CA0               	rrf	??___ftmul,f
  4325  0E7A  3EFF               	addlw	-1
  4326  0E7B  1D03               	skipz
  4327  0E7C  2E76               	goto	u2915
  4328  0E7D  0820               	movf	??___ftmul,w
  4329  0E7E  00A3               	movwf	??___ftmul+3
  4330  0E7F  0823               	movf	??___ftmul+3,w
  4331  0E80  00A9               	movwf	___ftmul@sign
  4332  0E81  087B               	movf	___ftmul@f2,w
  4333  0E82  00A0               	movwf	??___ftmul
  4334  0E83  087C               	movf	___ftmul@f2+1,w
  4335  0E84  00A1               	movwf	??___ftmul+1
  4336  0E85  087D               	movf	___ftmul@f2+2,w
  4337  0E86  00A2               	movwf	??___ftmul+2
  4338  0E87  3010               	movlw	16
  4339  0E88                     u2925:	
  4340  0E88  1003               	clrc
  4341  0E89  0CA2               	rrf	??___ftmul+2,f
  4342  0E8A  0CA1               	rrf	??___ftmul+1,f
  4343  0E8B  0CA0               	rrf	??___ftmul,f
  4344  0E8C  3EFF               	addlw	-1
  4345  0E8D  1D03               	skipz
  4346  0E8E  2E88               	goto	u2925
  4347  0E8F  0820               	movf	??___ftmul,w
  4348  0E90  00A3               	movwf	??___ftmul+3
  4349  0E91  0823               	movf	??___ftmul+3,w
  4350  0E92  06A9               	xorwf	___ftmul@sign,f
  4351  0E93  3080               	movlw	128
  4352  0E94  00A0               	movwf	??___ftmul
  4353  0E95  0820               	movf	??___ftmul,w
  4354  0E96  05A9               	andwf	___ftmul@sign,f
  4355  0E97  17F9               	bsf	___ftmul@f1+1,7
  4356  0E98  17FC               	bsf	___ftmul@f2+1,7
  4357  0E99  30FF               	movlw	255
  4358  0E9A  05FB               	andwf	___ftmul@f2,f
  4359  0E9B  30FF               	movlw	255
  4360  0E9C  05FC               	andwf	___ftmul@f2+1,f
  4361  0E9D  3000               	movlw	0
  4362  0E9E  05FD               	andwf	___ftmul@f2+2,f
  4363  0E9F  3000               	movlw	0
  4364  0EA0  00A5               	movwf	___ftmul@f3_as_product
  4365  0EA1  3000               	movlw	0
  4366  0EA2  00A6               	movwf	___ftmul@f3_as_product+1
  4367  0EA3  3000               	movlw	0
  4368  0EA4  00A7               	movwf	___ftmul@f3_as_product+2
  4369  0EA5  3007               	movlw	7
  4370  0EA6  00A0               	movwf	??___ftmul
  4371  0EA7  0820               	movf	??___ftmul,w
  4372  0EA8  00A8               	movwf	___ftmul@cntr
  4373  0EA9                     l1752:	
  4374  0EA9  1C78               	btfss	___ftmul@f1,0
  4375  0EAA  2EB9               	goto	l1756
  4376  0EAB  087B               	movf	___ftmul@f2,w
  4377  0EAC  07A5               	addwf	___ftmul@f3_as_product,f
  4378  0EAD  087C               	movf	___ftmul@f2+1,w
  4379  0EAE  1103               	clrz
  4380  0EAF  1803               	skipnc
  4381  0EB0  0A7C               	incf	___ftmul@f2+1,w
  4382  0EB1  1D03               	btfss	3,2
  4383  0EB2  07A6               	addwf	___ftmul@f3_as_product+1,f
  4384  0EB3  087D               	movf	___ftmul@f2+2,w
  4385  0EB4  1103               	clrz
  4386  0EB5  1803               	skipnc
  4387  0EB6  0A7D               	incf	___ftmul@f2+2,w
  4388  0EB7  1D03               	btfss	3,2
  4389  0EB8  07A7               	addwf	___ftmul@f3_as_product+2,f
  4390  0EB9                     l1756:	
  4391  0EB9  3001               	movlw	1
  4392  0EBA                     u2955:	
  4393  0EBA  1003               	clrc
  4394  0EBB  0CFA               	rrf	___ftmul@f1+2,f
  4395  0EBC  0CF9               	rrf	___ftmul@f1+1,f
  4396  0EBD  0CF8               	rrf	___ftmul@f1,f
  4397  0EBE  3EFF               	addlw	-1
  4398  0EBF  1D03               	skipz
  4399  0EC0  2EBA               	goto	u2955
  4400  0EC1  3001               	movlw	1
  4401  0EC2                     u2965:	
  4402  0EC2  1003               	clrc
  4403  0EC3  0DFB               	rlf	___ftmul@f2,f
  4404  0EC4  0DFC               	rlf	___ftmul@f2+1,f
  4405  0EC5  0DFD               	rlf	___ftmul@f2+2,f
  4406  0EC6  3EFF               	addlw	-1
  4407  0EC7  1D03               	skipz
  4408  0EC8  2EC2               	goto	u2965
  4409  0EC9  3001               	movlw	1
  4410  0ECA  02A8               	subwf	___ftmul@cntr,f
  4411  0ECB  1D03               	btfss	3,2
  4412  0ECC  2EA9               	goto	l1752
  4413  0ECD  3009               	movlw	9
  4414  0ECE  00A0               	movwf	??___ftmul
  4415  0ECF  0820               	movf	??___ftmul,w
  4416  0ED0  00A8               	movwf	___ftmul@cntr
  4417  0ED1                     l1764:	
  4418  0ED1  1C78               	btfss	___ftmul@f1,0
  4419  0ED2  2EE1               	goto	l1768
  4420  0ED3  087B               	movf	___ftmul@f2,w
  4421  0ED4  07A5               	addwf	___ftmul@f3_as_product,f
  4422  0ED5  087C               	movf	___ftmul@f2+1,w
  4423  0ED6  1103               	clrz
  4424  0ED7  1803               	skipnc
  4425  0ED8  0A7C               	incf	___ftmul@f2+1,w
  4426  0ED9  1D03               	btfss	3,2
  4427  0EDA  07A6               	addwf	___ftmul@f3_as_product+1,f
  4428  0EDB  087D               	movf	___ftmul@f2+2,w
  4429  0EDC  1103               	clrz
  4430  0EDD  1803               	skipnc
  4431  0EDE  0A7D               	incf	___ftmul@f2+2,w
  4432  0EDF  1D03               	btfss	3,2
  4433  0EE0  07A7               	addwf	___ftmul@f3_as_product+2,f
  4434  0EE1                     l1768:	
  4435  0EE1  3001               	movlw	1
  4436  0EE2                     u3005:	
  4437  0EE2  1003               	clrc
  4438  0EE3  0CFA               	rrf	___ftmul@f1+2,f
  4439  0EE4  0CF9               	rrf	___ftmul@f1+1,f
  4440  0EE5  0CF8               	rrf	___ftmul@f1,f
  4441  0EE6  3EFF               	addlw	-1
  4442  0EE7  1D03               	skipz
  4443  0EE8  2EE2               	goto	u3005
  4444  0EE9  3001               	movlw	1
  4445  0EEA                     u3015:	
  4446  0EEA  1003               	clrc
  4447  0EEB  0CA7               	rrf	___ftmul@f3_as_product+2,f
  4448  0EEC  0CA6               	rrf	___ftmul@f3_as_product+1,f
  4449  0EED  0CA5               	rrf	___ftmul@f3_as_product,f
  4450  0EEE  3EFF               	addlw	-1
  4451  0EEF  1D03               	skipz
  4452  0EF0  2EEA               	goto	u3015
  4453  0EF1  3001               	movlw	1
  4454  0EF2  02A8               	subwf	___ftmul@cntr,f
  4455  0EF3  1D03               	btfss	3,2
  4456  0EF4  2ED1               	goto	l1764
  4457  0EF5  0825               	movf	___ftmul@f3_as_product,w
  4458  0EF6  00F0               	movwf	___ftpack@arg
  4459  0EF7  0826               	movf	___ftmul@f3_as_product+1,w
  4460  0EF8  00F1               	movwf	___ftpack@arg+1
  4461  0EF9  0827               	movf	___ftmul@f3_as_product+2,w
  4462  0EFA  00F2               	movwf	___ftpack@arg+2
  4463  0EFB  0824               	movf	___ftmul@exp,w
  4464  0EFC  00A0               	movwf	??___ftmul
  4465  0EFD  0820               	movf	??___ftmul,w
  4466  0EFE  00F3               	movwf	___ftpack@exp
  4467  0EFF  0829               	movf	___ftmul@sign,w
  4468  0F00  00A1               	movwf	??___ftmul+1
  4469  0F01  0821               	movf	??___ftmul+1,w
  4470  0F02  00F4               	movwf	___ftpack@sign
  4471  0F03  158A  2497         	fcall	___ftpack
  4472  0F05  0870               	movf	?___ftpack,w
  4473  0F06  00F8               	movwf	?___ftmul
  4474  0F07  0871               	movf	?___ftpack+1,w
  4475  0F08  00F9               	movwf	?___ftmul+1
  4476  0F09  0872               	movf	?___ftpack+2,w
  4477  0F0A  00FA               	movwf	?___ftmul+2
  4478  0F0B  0008               	return
  4479  0F0C                     __end_of___ftmul:	
  4480                           
  4481                           	psect	text17
  4482  0C97                     __ptext17:	
  4483 ;; *************** function ___ftpack *****************
  4484 ;; Defined at:
  4485 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  arg             3    0[COMMON] unsigned um
  4488 ;;  exp             1    3[COMMON] unsigned char 
  4489 ;;  sign            1    4[COMMON] unsigned char 
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  3    0[COMMON] float 
  4494 ;; Registers used:
  4495 ;;		wreg, status,2, status,0
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4501 ;;      Params:         5       0       0       0
  4502 ;;      Locals:         0       0       0       0
  4503 ;;      Temps:          3       0       0       0
  4504 ;;      Totals:         8       0       0       0
  4505 ;;Total ram usage:        8 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		___ftadd
  4511 ;;		___ftmul
  4512 ;;		___lltoft
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function ___ftpack
  4518  0C97                     ___ftpack:	
  4519                           
  4520                           ;incstack = 0
  4521                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4522  0C97  0873               	movf	___ftpack@exp,w
  4523  0C98  1903               	btfsc	3,2
  4524  0C99  2C9F               	goto	l1400
  4525  0C9A  0872               	movf	___ftpack@arg+2,w
  4526  0C9B  0471               	iorwf	___ftpack@arg+1,w
  4527  0C9C  0470               	iorwf	___ftpack@arg,w
  4528  0C9D  1D03               	skipz
  4529  0C9E  2CB2               	goto	l1406
  4530  0C9F                     l1400:	
  4531  0C9F  3000               	movlw	0
  4532  0CA0  00F0               	movwf	?___ftpack
  4533  0CA1  3000               	movlw	0
  4534  0CA2  00F1               	movwf	?___ftpack+1
  4535  0CA3  3000               	movlw	0
  4536  0CA4  00F2               	movwf	?___ftpack+2
  4537  0CA5  0008               	return
  4538  0CA6                     l1404:	
  4539  0CA6  3001               	movlw	1
  4540  0CA7  00F5               	movwf	??___ftpack
  4541  0CA8  0875               	movf	??___ftpack,w
  4542  0CA9  07F3               	addwf	___ftpack@exp,f
  4543  0CAA  3001               	movlw	1
  4544  0CAB                     u2015:	
  4545  0CAB  1003               	clrc
  4546  0CAC  0CF2               	rrf	___ftpack@arg+2,f
  4547  0CAD  0CF1               	rrf	___ftpack@arg+1,f
  4548  0CAE  0CF0               	rrf	___ftpack@arg,f
  4549  0CAF  3EFF               	addlw	-1
  4550  0CB0  1D03               	skipz
  4551  0CB1  2CAB               	goto	u2015
  4552  0CB2                     l1406:	
  4553  0CB2  30FE               	movlw	254
  4554  0CB3  0572               	andwf	___ftpack@arg+2,w
  4555  0CB4  1903               	btfsc	3,2
  4556  0CB5  2CCD               	goto	l470
  4557  0CB6  2CA6               	goto	l1404
  4558  0CB7                     l1408:	
  4559  0CB7  3001               	movlw	1
  4560  0CB8  00F5               	movwf	??___ftpack
  4561  0CB9  0875               	movf	??___ftpack,w
  4562  0CBA  07F3               	addwf	___ftpack@exp,f
  4563  0CBB  3001               	movlw	1
  4564  0CBC  07F0               	addwf	___ftpack@arg,f
  4565  0CBD  3000               	movlw	0
  4566  0CBE  1803               	skipnc
  4567  0CBF  3001               	movlw	1
  4568  0CC0  07F1               	addwf	___ftpack@arg+1,f
  4569  0CC1  3000               	movlw	0
  4570  0CC2  1803               	skipnc
  4571  0CC3  3001               	movlw	1
  4572  0CC4  07F2               	addwf	___ftpack@arg+2,f
  4573  0CC5  3001               	movlw	1
  4574  0CC6                     u2035:	
  4575  0CC6  1003               	clrc
  4576  0CC7  0CF2               	rrf	___ftpack@arg+2,f
  4577  0CC8  0CF1               	rrf	___ftpack@arg+1,f
  4578  0CC9  0CF0               	rrf	___ftpack@arg,f
  4579  0CCA  3EFF               	addlw	-1
  4580  0CCB  1D03               	skipz
  4581  0CCC  2CC6               	goto	u2035
  4582  0CCD                     l470:	
  4583  0CCD  30FF               	movlw	255
  4584  0CCE  0572               	andwf	___ftpack@arg+2,w
  4585  0CCF  1903               	btfsc	3,2
  4586  0CD0  2CDC               	goto	l1416
  4587  0CD1  2CB7               	goto	l1408
  4588  0CD2                     l1414:	
  4589  0CD2  3001               	movlw	1
  4590  0CD3  02F3               	subwf	___ftpack@exp,f
  4591  0CD4  3001               	movlw	1
  4592  0CD5                     u2055:	
  4593  0CD5  1003               	clrc
  4594  0CD6  0DF0               	rlf	___ftpack@arg,f
  4595  0CD7  0DF1               	rlf	___ftpack@arg+1,f
  4596  0CD8  0DF2               	rlf	___ftpack@arg+2,f
  4597  0CD9  3EFF               	addlw	-1
  4598  0CDA  1D03               	skipz
  4599  0CDB  2CD5               	goto	u2055
  4600  0CDC                     l1416:	
  4601  0CDC  1BF1               	btfsc	___ftpack@arg+1,7
  4602  0CDD  2CE2               	goto	l477
  4603  0CDE  3002               	movlw	2
  4604  0CDF  0273               	subwf	___ftpack@exp,w
  4605  0CE0  1803               	skipnc
  4606  0CE1  2CD2               	goto	l1414
  4607  0CE2                     l477:	
  4608  0CE2  1873               	btfsc	___ftpack@exp,0
  4609  0CE3  2CEA               	goto	l478
  4610  0CE4  30FF               	movlw	255
  4611  0CE5  05F0               	andwf	___ftpack@arg,f
  4612  0CE6  307F               	movlw	127
  4613  0CE7  05F1               	andwf	___ftpack@arg+1,f
  4614  0CE8  30FF               	movlw	255
  4615  0CE9  05F2               	andwf	___ftpack@arg+2,f
  4616  0CEA                     l478:	
  4617  0CEA  1003               	clrc
  4618  0CEB  0CF3               	rrf	___ftpack@exp,f
  4619  0CEC  0873               	movf	___ftpack@exp,w
  4620  0CED  00F5               	movwf	??___ftpack
  4621  0CEE  01F6               	clrf	??___ftpack+1
  4622  0CEF  01F7               	clrf	??___ftpack+2
  4623  0CF0  3010               	movlw	16
  4624  0CF1                     u2095:	
  4625  0CF1  1003               	clrc
  4626  0CF2  0DF5               	rlf	??___ftpack,f
  4627  0CF3  0DF6               	rlf	??___ftpack+1,f
  4628  0CF4  0DF7               	rlf	??___ftpack+2,f
  4629  0CF5  3EFF               	addlw	-1
  4630  0CF6  1D03               	skipz
  4631  0CF7  2CF1               	goto	u2095
  4632  0CF8  0875               	movf	??___ftpack,w
  4633  0CF9  04F0               	iorwf	___ftpack@arg,f
  4634  0CFA  0876               	movf	??___ftpack+1,w
  4635  0CFB  04F1               	iorwf	___ftpack@arg+1,f
  4636  0CFC  0877               	movf	??___ftpack+2,w
  4637  0CFD  04F2               	iorwf	___ftpack@arg+2,f
  4638  0CFE  0874               	movf	___ftpack@sign,w
  4639  0CFF  1903               	btfsc	3,2
  4640  0D00  0008               	return
  4641  0D01  17F2               	bsf	___ftpack@arg+2,7
  4642  0D02  0008               	return
  4643  0D03                     __end_of___ftpack:	
  4644                           
  4645                           	psect	text18
  4646  0BDC                     __ptext18:	
  4647 ;; *************** function ___ftge *****************
  4648 ;; Defined at:
  4649 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  ff1             3    0[COMMON] float 
  4652 ;;  ff2             3    3[COMMON] float 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;		None
  4655 ;; Return value:  Size  Location     Type
  4656 ;;		None               void
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4664 ;;      Params:         6       0       0       0
  4665 ;;      Locals:         0       0       0       0
  4666 ;;      Temps:          6       0       0       0
  4667 ;;      Totals:        12       0       0       0
  4668 ;;Total ram usage:       12 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; This function calls:
  4671 ;;		Nothing
  4672 ;; This function is called by:
  4673 ;;		_ftoa
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           
  4678                           ;psect for function ___ftge
  4679  0BDC                     ___ftge:	
  4680                           
  4681                           ;incstack = 0
  4682                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4683  0BDC  1FF2               	btfss	___ftge@ff1+2,7
  4684  0BDD  2C03               	goto	l1712
  4685  0BDE  3000               	movlw	0
  4686  0BDF  00F6               	movwf	??___ftge
  4687  0BE0  3000               	movlw	0
  4688  0BE1  00F7               	movwf	??___ftge+1
  4689  0BE2  3080               	movlw	128
  4690  0BE3  00F8               	movwf	??___ftge+2
  4691  0BE4  0970               	comf	___ftge@ff1,w
  4692  0BE5  00F9               	movwf	??___ftge+3
  4693  0BE6  0971               	comf	___ftge@ff1+1,w
  4694  0BE7  00FA               	movwf	??___ftge+4
  4695  0BE8  0972               	comf	___ftge@ff1+2,w
  4696  0BE9  00FB               	movwf	??___ftge+5
  4697  0BEA  0AF9               	incf	??___ftge+3,f
  4698  0BEB  1903               	skipnz
  4699  0BEC  0AFA               	incf	??___ftge+4,f
  4700  0BED  1903               	skipnz
  4701  0BEE  0AFB               	incf	??___ftge+5,f
  4702  0BEF  0879               	movf	??___ftge+3,w
  4703  0BF0  07F6               	addwf	??___ftge,f
  4704  0BF1  087A               	movf	??___ftge+4,w
  4705  0BF2  1803               	skipnc
  4706  0BF3  0F7A               	incfsz	??___ftge+4,w
  4707  0BF4  2BF6               	goto	u2851
  4708  0BF5  2BF7               	goto	u2852
  4709  0BF6                     u2851:	
  4710  0BF6  07F7               	addwf	??___ftge+1,f
  4711  0BF7                     u2852:	
  4712  0BF7  087B               	movf	??___ftge+5,w
  4713  0BF8  1803               	skipnc
  4714  0BF9  0F7B               	incfsz	??___ftge+5,w
  4715  0BFA  2BFC               	goto	u2853
  4716  0BFB  2BFD               	goto	u2854
  4717  0BFC                     u2853:	
  4718  0BFC  07F8               	addwf	??___ftge+2,f
  4719  0BFD                     u2854:	
  4720  0BFD  0876               	movf	??___ftge,w
  4721  0BFE  00F0               	movwf	___ftge@ff1
  4722  0BFF  0877               	movf	??___ftge+1,w
  4723  0C00  00F1               	movwf	___ftge@ff1+1
  4724  0C01  0878               	movf	??___ftge+2,w
  4725  0C02  00F2               	movwf	___ftge@ff1+2
  4726  0C03                     l1712:	
  4727  0C03  1FF5               	btfss	___ftge@ff2+2,7
  4728  0C04  2C2A               	goto	l1716
  4729  0C05  3000               	movlw	0
  4730  0C06  00F6               	movwf	??___ftge
  4731  0C07  3000               	movlw	0
  4732  0C08  00F7               	movwf	??___ftge+1
  4733  0C09  3080               	movlw	128
  4734  0C0A  00F8               	movwf	??___ftge+2
  4735  0C0B  0973               	comf	___ftge@ff2,w
  4736  0C0C  00F9               	movwf	??___ftge+3
  4737  0C0D  0974               	comf	___ftge@ff2+1,w
  4738  0C0E  00FA               	movwf	??___ftge+4
  4739  0C0F  0975               	comf	___ftge@ff2+2,w
  4740  0C10  00FB               	movwf	??___ftge+5
  4741  0C11  0AF9               	incf	??___ftge+3,f
  4742  0C12  1903               	skipnz
  4743  0C13  0AFA               	incf	??___ftge+4,f
  4744  0C14  1903               	skipnz
  4745  0C15  0AFB               	incf	??___ftge+5,f
  4746  0C16  0879               	movf	??___ftge+3,w
  4747  0C17  07F6               	addwf	??___ftge,f
  4748  0C18  087A               	movf	??___ftge+4,w
  4749  0C19  1803               	skipnc
  4750  0C1A  0F7A               	incfsz	??___ftge+4,w
  4751  0C1B  2C1D               	goto	u2871
  4752  0C1C  2C1E               	goto	u2872
  4753  0C1D                     u2871:	
  4754  0C1D  07F7               	addwf	??___ftge+1,f
  4755  0C1E                     u2872:	
  4756  0C1E  087B               	movf	??___ftge+5,w
  4757  0C1F  1803               	skipnc
  4758  0C20  0F7B               	incfsz	??___ftge+5,w
  4759  0C21  2C23               	goto	u2873
  4760  0C22  2C24               	goto	u2874
  4761  0C23                     u2873:	
  4762  0C23  07F8               	addwf	??___ftge+2,f
  4763  0C24                     u2874:	
  4764  0C24  0876               	movf	??___ftge,w
  4765  0C25  00F3               	movwf	___ftge@ff2
  4766  0C26  0877               	movf	??___ftge+1,w
  4767  0C27  00F4               	movwf	___ftge@ff2+1
  4768  0C28  0878               	movf	??___ftge+2,w
  4769  0C29  00F5               	movwf	___ftge@ff2+2
  4770  0C2A                     l1716:	
  4771  0C2A  3080               	movlw	128
  4772  0C2B  06F2               	xorwf	___ftge@ff1+2,f
  4773  0C2C  3080               	movlw	128
  4774  0C2D  06F5               	xorwf	___ftge@ff2+2,f
  4775  0C2E  0875               	movf	___ftge@ff2+2,w
  4776  0C2F  0272               	subwf	___ftge@ff1+2,w
  4777  0C30  1D03               	skipz
  4778  0C31  0008               	return
  4779  0C32  0874               	movf	___ftge@ff2+1,w
  4780  0C33  0271               	subwf	___ftge@ff1+1,w
  4781  0C34  1D03               	skipz
  4782  0C35  0008               	return
  4783  0C36  0873               	movf	___ftge@ff2,w
  4784  0C37  0270               	subwf	___ftge@ff1,w
  4785  0C38  0008               	return
  4786  0C39                     __end_of___ftge:	
  4787                           
  4788                           	psect	text19
  4789  0AF1                     __ptext19:	
  4790 ;; *************** function _init *****************
  4791 ;; Defined at:
  4792 ;;		line 27 in file "main.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  1    wreg      void 
  4799 ;; Registers used:
  4800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4806 ;;      Params:         0       0       0       0
  4807 ;;      Locals:         0       0       0       0
  4808 ;;      Temps:          0       4       0       0
  4809 ;;      Totals:         0       4       0       0
  4810 ;;Total ram usage:        4 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    6
  4813 ;; This function calls:
  4814 ;;		_lcdInit
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _init
  4822  0AF1                     _init:	
  4823                           
  4824                           ;main.c: 30: ANS4 = 0;
  4825                           
  4826                           ;incstack = 0
  4827                           ; Regs used in _init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4828  0AF1  1283               	bcf	3,5	;RP0=0, select bank2
  4829  0AF2  1703               	bsf	3,6	;RP1=1, select bank2
  4830  0AF3  121E               	bcf	30,4	;volatile
  4831                           
  4832                           ;main.c: 31: ANS5 = 0;
  4833  0AF4  129E               	bcf	30,5	;volatile
  4834                           
  4835                           ;main.c: 32: ANS6 = 0;
  4836  0AF5  131E               	bcf	30,6	;volatile
  4837                           
  4838                           ;main.c: 33: ANS7 = 0;
  4839  0AF6  139E               	bcf	30,7	;volatile
  4840                           
  4841                           ;main.c: 34: ANS8 = 0;
  4842  0AF7  101F               	bcf	31,0	;volatile
  4843                           
  4844                           ;main.c: 35: ANS9 = 0;
  4845  0AF8  109F               	bcf	31,1	;volatile
  4846                           
  4847                           ;main.c: 36: ANS10 = 0;
  4848  0AF9  111F               	bcf	31,2	;volatile
  4849                           
  4850                           ;main.c: 37: ANS11 = 0;
  4851  0AFA  119F               	bcf	31,3	;volatile
  4852                           
  4853                           ;main.c: 40: TRISB = 0b00000000;
  4854  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
  4855  0AFC  1303               	bcf	3,6	;RP1=0, select bank1
  4856  0AFD  0186               	clrf	6	;volatile
  4857                           
  4858                           ;main.c: 41: PORTB = 0;
  4859  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  4860  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  4861  0B00  0186               	clrf	6	;volatile
  4862                           
  4863                           ;main.c: 42: TRISC = 0b00000000;
  4864  0B01  1683               	bsf	3,5	;RP0=1, select bank1
  4865  0B02  1303               	bcf	3,6	;RP1=0, select bank1
  4866  0B03  0187               	clrf	7	;volatile
  4867                           
  4868                           ;main.c: 43: PORTC = 0;
  4869  0B04  1283               	bcf	3,5	;RP0=0, select bank0
  4870  0B05  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0B06  0187               	clrf	7	;volatile
  4872                           
  4873                           ;main.c: 46: lcd.dataPort = &PORTC;
  4874  0B07  3000               	movlw	0
  4875  0B08  1683               	bsf	3,5	;RP0=1, select bank1
  4876  0B09  1303               	bcf	3,6	;RP1=0, select bank1
  4877  0B0A  00A9               	movwf	((low ((_lcd| 0+8))+1))^(0+128)
  4878  0B0B  3007               	movlw	7
  4879  0B0C  00A8               	movwf	(low ((_lcd| 0+8)))^(0+128)
  4880                           
  4881                           ;main.c: 47: lcd.regPort = &PORTB;
  4882  0B0D  3000               	movlw	0
  4883  0B0E  00A1               	movwf	(_lcd+1)^(0+128)
  4884  0B0F  3006               	movlw	6
  4885  0B10  00A0               	movwf	_lcd^(0+128)
  4886                           
  4887                           ;main.c: 48: lcd.regRS = 4;
  4888  0B11  3004               	movlw	4
  4889  0B12  00A2               	movwf	(_lcd^(0+128)+2)
  4890  0B13  3000               	movlw	0
  4891  0B14  00A3               	movwf	(_lcd^(0+128)+3)
  4892                           
  4893                           ;main.c: 49: lcd.regRW = 5;
  4894  0B15  3005               	movlw	5
  4895  0B16  00A4               	movwf	(_lcd^(0+128)+4)
  4896  0B17  3000               	movlw	0
  4897  0B18  00A5               	movwf	(_lcd^(0+128)+5)
  4898                           
  4899                           ;main.c: 50: lcd.regEN = 6;
  4900  0B19  3006               	movlw	6
  4901  0B1A  00A6               	movwf	(_lcd^(0+128)+6)
  4902  0B1B  3000               	movlw	0
  4903  0B1C  00A7               	movwf	(_lcd^(0+128)+7)
  4904                           
  4905                           ;main.c: 51: lcd.use4Bit = 1;
  4906  0B1D  3001               	movlw	1
  4907  0B1E  00AA               	movwf	(_lcd^(0+128)+10)
  4908  0B1F  3000               	movlw	0
  4909  0B20  00AB               	movwf	(_lcd^(0+128)+11)
  4910                           
  4911                           ;main.c: 52: lcdInit(lcd);
  4912  0B21  3059               	movlw	lcdInit@lcd& (0+255)
  4913  0B22  0084               	movwf	4
  4914  0B23  30A0               	movlw	low _lcd
  4915  0B24  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0B25  1303               	bcf	3,6	;RP1=0, select bank0
  4917  0B26  00EB               	movwf	??_init
  4918  0B27  0804               	movf	4,w
  4919  0B28  00EC               	movwf	??_init+1
  4920  0B29  300C               	movlw	12
  4921  0B2A  00ED               	movwf	??_init+2
  4922  0B2B                     u3410:	
  4923  0B2B  086B               	movf	??_init,w
  4924  0B2C  0084               	movwf	4
  4925  0B2D  1383               	bcf	3,7	;select IRP bank1
  4926  0B2E  0800               	movf	0,w
  4927  0B2F  00EE               	movwf	??_init+3
  4928  0B30  0AEB               	incf	??_init,f
  4929  0B31  086C               	movf	??_init+1,w
  4930  0B32  0084               	movwf	4
  4931  0B33  086E               	movf	??_init+3,w
  4932  0B34  0080               	movwf	0
  4933  0B35  0AEC               	incf	??_init+1,f
  4934  0B36  0BED               	decfsz	??_init+2,f
  4935  0B37  2B2B               	goto	u3410
  4936  0B38  158A  270C         	fcall	_lcdInit
  4937  0B3A  0008               	return
  4938  0B3B                     __end_of_init:	
  4939                           
  4940                           	psect	text20
  4941  0F0C                     __ptext20:	
  4942 ;; *************** function _lcdInit *****************
  4943 ;; Defined at:
  4944 ;;		line 77 in file "../lib/lcd1602.h"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;  lcd            12   57[BANK0 ] struct LCD_1602
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      void 
  4951 ;; Registers used:
  4952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4958 ;;      Params:         0      12       0       0
  4959 ;;      Locals:         0       2       0       0
  4960 ;;      Temps:          0       4       0       0
  4961 ;;      Totals:         0      18       0       0
  4962 ;;Total ram usage:       18 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:    5
  4965 ;; This function calls:
  4966 ;;		_lcdClear
  4967 ;;		_lcdCommand
  4968 ;; This function is called by:
  4969 ;;		_init
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           
  4974                           ;psect for function _lcdInit
  4975  0F0C                     _lcdInit:	
  4976                           
  4977                           ;lcd1602.h: 79: if (lcd.use4Bit == 1) {
  4978                           
  4979                           ;incstack = 0
  4980                           ; Regs used in _lcdInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4981  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  4982  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  4983  0F0E  0363               	decf	lcdInit@lcd+10,w
  4984  0F0F  0464               	iorwf	lcdInit@lcd+11,w
  4985  0F10  1D03               	btfss	3,2
  4986  0F11  2F4C               	goto	l1850
  4987                           
  4988                           ;lcd1602.h: 80: lcdCommand(lcd, 0x33);
  4989  0F12  3037               	movlw	lcdCommand@lcd& (0+255)
  4990  0F13  0084               	movwf	4
  4991  0F14  3059               	movlw	low lcdInit@lcd
  4992  0F15  00E5               	movwf	??_lcdInit
  4993  0F16  0804               	movf	4,w
  4994  0F17  00E6               	movwf	??_lcdInit+1
  4995  0F18  300C               	movlw	12
  4996  0F19  00E7               	movwf	??_lcdInit+2
  4997  0F1A                     u3180:	
  4998  0F1A  0865               	movf	??_lcdInit,w
  4999  0F1B  0084               	movwf	4
  5000  0F1C  1383               	bcf	3,7	;select IRP bank0
  5001  0F1D  0800               	movf	0,w
  5002  0F1E  00E8               	movwf	??_lcdInit+3
  5003  0F1F  0AE5               	incf	??_lcdInit,f
  5004  0F20  0866               	movf	??_lcdInit+1,w
  5005  0F21  0084               	movwf	4
  5006  0F22  0868               	movf	??_lcdInit+3,w
  5007  0F23  0080               	movwf	0
  5008  0F24  0AE6               	incf	??_lcdInit+1,f
  5009  0F25  0BE7               	decfsz	??_lcdInit+2,f
  5010  0F26  2F1A               	goto	u3180
  5011  0F27  3033               	movlw	51
  5012  0F28  00C3               	movwf	lcdCommand@cmd
  5013  0F29  3000               	movlw	0
  5014  0F2A  00C4               	movwf	lcdCommand@cmd+1
  5015  0F2B  158A  220C  158A   	fcall	_lcdCommand
  5016                           
  5017                           ;lcd1602.h: 81: lcdCommand(lcd, 0x32);
  5018  0F2E  3037               	movlw	lcdCommand@lcd& (0+255)
  5019  0F2F  0084               	movwf	4
  5020  0F30  3059               	movlw	low lcdInit@lcd
  5021  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  5022  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  5023  0F33  00E5               	movwf	??_lcdInit
  5024  0F34  0804               	movf	4,w
  5025  0F35  00E6               	movwf	??_lcdInit+1
  5026  0F36  300C               	movlw	12
  5027  0F37  00E7               	movwf	??_lcdInit+2
  5028  0F38                     u3190:	
  5029  0F38  0865               	movf	??_lcdInit,w
  5030  0F39  0084               	movwf	4
  5031  0F3A  1383               	bcf	3,7	;select IRP bank0
  5032  0F3B  0800               	movf	0,w
  5033  0F3C  00E8               	movwf	??_lcdInit+3
  5034  0F3D  0AE5               	incf	??_lcdInit,f
  5035  0F3E  0866               	movf	??_lcdInit+1,w
  5036  0F3F  0084               	movwf	4
  5037  0F40  0868               	movf	??_lcdInit+3,w
  5038  0F41  0080               	movwf	0
  5039  0F42  0AE6               	incf	??_lcdInit+1,f
  5040  0F43  0BE7               	decfsz	??_lcdInit+2,f
  5041  0F44  2F38               	goto	u3190
  5042  0F45  3032               	movlw	50
  5043  0F46  00C3               	movwf	lcdCommand@cmd
  5044  0F47  3000               	movlw	0
  5045  0F48  00C4               	movwf	lcdCommand@cmd+1
  5046  0F49  158A  220C  158A   	fcall	_lcdCommand
  5047  0F4C                     l1850:	
  5048                           
  5049                           ;lcd1602.h: 82: }
  5050                           ;lcd1602.h: 85: lcdCommand(lcd, lcd.use4Bit == 1 ? LCD_CMD_USE_4_BIT_2_LINE_5x7_MTX : LC
      +                          D_CMD_USE_8_BIT_2_LINE_5x7_MTX);
  5051  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  5052  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  5053  0F4E  0363               	decf	lcdInit@lcd+10,w
  5054  0F4F  0464               	iorwf	lcdInit@lcd+11,w
  5055  0F50  1903               	btfsc	3,2
  5056  0F51  2F54               	goto	l1854
  5057  0F52  303F               	movlw	low (_LCD_CMD_USE_8_BIT_2_LINE_5x7_MTX-__stringbase)
  5058  0F53  2F55               	goto	L7
  5059  0F54                     l1854:	
  5060  0F54  3041               	movlw	low (_LCD_CMD_USE_4_BIT_2_LINE_5x7_MTX-__stringbase)
  5061  0F55                     L7:	
  5062  0F55  0084               	movwf	4
  5063  0F56  158A  200A  158A   	fcall	stringdir
  5064  0F59  00E9               	movwf	_lcdInit$120
  5065  0F5A  158A  200A  158A   	fcall	stringdir
  5066  0F5D  00EA               	movwf	_lcdInit$120+1
  5067  0F5E  3037               	movlw	lcdCommand@lcd& (0+255)
  5068  0F5F  0084               	movwf	4
  5069  0F60  3059               	movlw	low lcdInit@lcd
  5070  0F61  00E5               	movwf	??_lcdInit
  5071  0F62  0804               	movf	4,w
  5072  0F63  00E6               	movwf	??_lcdInit+1
  5073  0F64  300C               	movlw	12
  5074  0F65  00E7               	movwf	??_lcdInit+2
  5075  0F66                     u3210:	
  5076  0F66  0865               	movf	??_lcdInit,w
  5077  0F67  0084               	movwf	4
  5078  0F68  1383               	bcf	3,7	;select IRP bank0
  5079  0F69  0800               	movf	0,w
  5080  0F6A  00E8               	movwf	??_lcdInit+3
  5081  0F6B  0AE5               	incf	??_lcdInit,f
  5082  0F6C  0866               	movf	??_lcdInit+1,w
  5083  0F6D  0084               	movwf	4
  5084  0F6E  0868               	movf	??_lcdInit+3,w
  5085  0F6F  0080               	movwf	0
  5086  0F70  0AE6               	incf	??_lcdInit+1,f
  5087  0F71  0BE7               	decfsz	??_lcdInit+2,f
  5088  0F72  2F66               	goto	u3210
  5089  0F73  086A               	movf	_lcdInit$120+1,w
  5090  0F74  00C4               	movwf	lcdCommand@cmd+1
  5091  0F75  0869               	movf	_lcdInit$120,w
  5092  0F76  00C3               	movwf	lcdCommand@cmd
  5093  0F77  158A  220C  158A   	fcall	_lcdCommand
  5094                           
  5095                           ;lcd1602.h: 86: lcdCommand(lcd, LCD_CMD_FIRST_LINE_FIRST_POS);
  5096  0F7A  3037               	movlw	lcdCommand@lcd& (0+255)
  5097  0F7B  0084               	movwf	4
  5098  0F7C  3059               	movlw	low lcdInit@lcd
  5099  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  5100  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  5101  0F7F  00E5               	movwf	??_lcdInit
  5102  0F80  0804               	movf	4,w
  5103  0F81  00E6               	movwf	??_lcdInit+1
  5104  0F82  300C               	movlw	12
  5105  0F83  00E7               	movwf	??_lcdInit+2
  5106  0F84                     u3220:	
  5107  0F84  0865               	movf	??_lcdInit,w
  5108  0F85  0084               	movwf	4
  5109  0F86  1383               	bcf	3,7	;select IRP bank0
  5110  0F87  0800               	movf	0,w
  5111  0F88  00E8               	movwf	??_lcdInit+3
  5112  0F89  0AE5               	incf	??_lcdInit,f
  5113  0F8A  0866               	movf	??_lcdInit+1,w
  5114  0F8B  0084               	movwf	4
  5115  0F8C  0868               	movf	??_lcdInit+3,w
  5116  0F8D  0080               	movwf	0
  5117  0F8E  0AE6               	incf	??_lcdInit+1,f
  5118  0F8F  0BE7               	decfsz	??_lcdInit+2,f
  5119  0F90  2F84               	goto	u3220
  5120  0F91  303D               	movlw	low (_LCD_CMD_FIRST_LINE_FIRST_POS-__stringbase)
  5121  0F92  0084               	movwf	4
  5122  0F93  158A  200A  158A   	fcall	stringdir
  5123  0F96  00C3               	movwf	lcdCommand@cmd
  5124  0F97  158A  200A  158A   	fcall	stringdir
  5125  0F9A  00C4               	movwf	lcdCommand@cmd+1
  5126  0F9B  158A  220C  158A   	fcall	_lcdCommand
  5127                           
  5128                           ;lcd1602.h: 87: lcdCommand(lcd, LCD_CMD_DISPLAY_ON_CURSOR_OFF);
  5129  0F9E  3037               	movlw	lcdCommand@lcd& (0+255)
  5130  0F9F  0084               	movwf	4
  5131  0FA0  3059               	movlw	low lcdInit@lcd
  5132  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  5133  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  5134  0FA3  00E5               	movwf	??_lcdInit
  5135  0FA4  0804               	movf	4,w
  5136  0FA5  00E6               	movwf	??_lcdInit+1
  5137  0FA6  300C               	movlw	12
  5138  0FA7  00E7               	movwf	??_lcdInit+2
  5139  0FA8                     u3230:	
  5140  0FA8  0865               	movf	??_lcdInit,w
  5141  0FA9  0084               	movwf	4
  5142  0FAA  1383               	bcf	3,7	;select IRP bank0
  5143  0FAB  0800               	movf	0,w
  5144  0FAC  00E8               	movwf	??_lcdInit+3
  5145  0FAD  0AE5               	incf	??_lcdInit,f
  5146  0FAE  0866               	movf	??_lcdInit+1,w
  5147  0FAF  0084               	movwf	4
  5148  0FB0  0868               	movf	??_lcdInit+3,w
  5149  0FB1  0080               	movwf	0
  5150  0FB2  0AE6               	incf	??_lcdInit+1,f
  5151  0FB3  0BE7               	decfsz	??_lcdInit+2,f
  5152  0FB4  2FA8               	goto	u3230
  5153  0FB5  3049               	movlw	low (_LCD_CMD_DISPLAY_ON_CURSOR_OFF-__stringbase)
  5154  0FB6  0084               	movwf	4
  5155  0FB7  158A  200A  158A   	fcall	stringdir
  5156  0FBA  00C3               	movwf	lcdCommand@cmd
  5157  0FBB  158A  200A  158A   	fcall	stringdir
  5158  0FBE  00C4               	movwf	lcdCommand@cmd+1
  5159  0FBF  158A  220C  158A   	fcall	_lcdCommand
  5160                           
  5161                           ;lcd1602.h: 88: lcdCommand(lcd, LCD_CMD_INCREMENT_CURSOR);
  5162  0FC2  3037               	movlw	lcdCommand@lcd& (0+255)
  5163  0FC3  0084               	movwf	4
  5164  0FC4  3059               	movlw	low lcdInit@lcd
  5165  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  5166  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  5167  0FC7  00E5               	movwf	??_lcdInit
  5168  0FC8  0804               	movf	4,w
  5169  0FC9  00E6               	movwf	??_lcdInit+1
  5170  0FCA  300C               	movlw	12
  5171  0FCB  00E7               	movwf	??_lcdInit+2
  5172  0FCC                     u3240:	
  5173  0FCC  0865               	movf	??_lcdInit,w
  5174  0FCD  0084               	movwf	4
  5175  0FCE  1383               	bcf	3,7	;select IRP bank0
  5176  0FCF  0800               	movf	0,w
  5177  0FD0  00E8               	movwf	??_lcdInit+3
  5178  0FD1  0AE5               	incf	??_lcdInit,f
  5179  0FD2  0866               	movf	??_lcdInit+1,w
  5180  0FD3  0084               	movwf	4
  5181  0FD4  0868               	movf	??_lcdInit+3,w
  5182  0FD5  0080               	movwf	0
  5183  0FD6  0AE6               	incf	??_lcdInit+1,f
  5184  0FD7  0BE7               	decfsz	??_lcdInit+2,f
  5185  0FD8  2FCC               	goto	u3240
  5186  0FD9  304B               	movlw	low (_LCD_CMD_INCREMENT_CURSOR-__stringbase)
  5187  0FDA  0084               	movwf	4
  5188  0FDB  158A  200A  158A   	fcall	stringdir
  5189  0FDE  00C3               	movwf	lcdCommand@cmd
  5190  0FDF  158A  200A  158A   	fcall	stringdir
  5191  0FE2  00C4               	movwf	lcdCommand@cmd+1
  5192  0FE3  158A  220C  158A   	fcall	_lcdCommand
  5193                           
  5194                           ;lcd1602.h: 90: lcdClear(lcd);
  5195  0FE6  3049               	movlw	lcdClear@lcd& (0+255)
  5196  0FE7  0084               	movwf	4
  5197  0FE8  3059               	movlw	low lcdInit@lcd
  5198  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  5199  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  5200  0FEB  00E5               	movwf	??_lcdInit
  5201  0FEC  0804               	movf	4,w
  5202  0FED  00E6               	movwf	??_lcdInit+1
  5203  0FEE  300C               	movlw	12
  5204  0FEF  00E7               	movwf	??_lcdInit+2
  5205  0FF0                     u3250:	
  5206  0FF0  0865               	movf	??_lcdInit,w
  5207  0FF1  0084               	movwf	4
  5208  0FF2  1383               	bcf	3,7	;select IRP bank0
  5209  0FF3  0800               	movf	0,w
  5210  0FF4  00E8               	movwf	??_lcdInit+3
  5211  0FF5  0AE5               	incf	??_lcdInit,f
  5212  0FF6  0866               	movf	??_lcdInit+1,w
  5213  0FF7  0084               	movwf	4
  5214  0FF8  0868               	movf	??_lcdInit+3,w
  5215  0FF9  0080               	movwf	0
  5216  0FFA  0AE6               	incf	??_lcdInit+1,f
  5217  0FFB  0BE7               	decfsz	??_lcdInit+2,f
  5218  0FFC  2FF0               	goto	u3250
  5219  0FFD  158A  224E         	fcall	_lcdClear
  5220  0FFF  0008               	return
  5221  1000                     __end_of_lcdInit:	
  5222                           
  5223                           	psect	text21
  5224  0A4E                     __ptext21:	
  5225 ;; *************** function _lcdClear *****************
  5226 ;; Defined at:
  5227 ;;		line 93 in file "../lib/lcd1602.h"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;  lcd            12   41[BANK0 ] struct LCD_1602
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5241 ;;      Params:         0      12       0       0
  5242 ;;      Locals:         0       0       0       0
  5243 ;;      Temps:          0       4       0       0
  5244 ;;      Totals:         0      16       0       0
  5245 ;;Total ram usage:       16 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    4
  5248 ;; This function calls:
  5249 ;;		_lcdCommand
  5250 ;; This function is called by:
  5251 ;;		_lcdInit
  5252 ;;		_main
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _lcdClear
  5258  0A4E                     _lcdClear:	
  5259                           
  5260                           ;lcd1602.h: 94: lcdCommand(lcd, LCD_CMD_CLEAR);
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _lcdClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5264  0A4E  3037               	movlw	lcdCommand@lcd& (0+255)
  5265  0A4F  0084               	movwf	4
  5266  0A50  3049               	movlw	low lcdClear@lcd
  5267  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  5268  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  5269  0A53  00D5               	movwf	??_lcdClear
  5270  0A54  0804               	movf	4,w
  5271  0A55  00D6               	movwf	??_lcdClear+1
  5272  0A56  300C               	movlw	12
  5273  0A57  00D7               	movwf	??_lcdClear+2
  5274  0A58                     u2550:	
  5275  0A58  0855               	movf	??_lcdClear,w
  5276  0A59  0084               	movwf	4
  5277  0A5A  1383               	bcf	3,7	;select IRP bank0
  5278  0A5B  0800               	movf	0,w
  5279  0A5C  00D8               	movwf	??_lcdClear+3
  5280  0A5D  0AD5               	incf	??_lcdClear,f
  5281  0A5E  0856               	movf	??_lcdClear+1,w
  5282  0A5F  0084               	movwf	4
  5283  0A60  0858               	movf	??_lcdClear+3,w
  5284  0A61  0080               	movwf	0
  5285  0A62  0AD6               	incf	??_lcdClear+1,f
  5286  0A63  0BD7               	decfsz	??_lcdClear+2,f
  5287  0A64  2A58               	goto	u2550
  5288  0A65  304D               	movlw	low (_LCD_CMD_CLEAR-__stringbase)
  5289  0A66  0084               	movwf	4
  5290  0A67  158A  200A  158A   	fcall	stringdir
  5291  0A6A  00C3               	movwf	lcdCommand@cmd
  5292  0A6B  158A  200A  158A   	fcall	stringdir
  5293  0A6E  00C4               	movwf	lcdCommand@cmd+1
  5294  0A6F  158A  220C         	fcall	_lcdCommand
  5295  0A71  0008               	return
  5296  0A72                     __end_of_lcdClear:	
  5297                           
  5298                           	psect	text22
  5299  0A0C                     __ptext22:	
  5300 ;; *************** function _lcdCommand *****************
  5301 ;; Defined at:
  5302 ;;		line 149 in file "../lib/lcd1602.h"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  lcd            12   23[BANK0 ] struct LCD_1602
  5305 ;;  cmd             2   35[BANK0 ] unsigned int 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5317 ;;      Params:         0      14       0       0
  5318 ;;      Locals:         0       0       0       0
  5319 ;;      Temps:          0       4       0       0
  5320 ;;      Totals:         0      18       0       0
  5321 ;;Total ram usage:       18 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    3
  5324 ;; This function calls:
  5325 ;;		_lcdProcess
  5326 ;; This function is called by:
  5327 ;;		_lcdInit
  5328 ;;		_lcdClear
  5329 ;;		_main
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function _lcdCommand
  5335  0A0C                     _lcdCommand:	
  5336                           
  5337                           ;lcd1602.h: 150: lcdProcess(lcd, cmd, 0);
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in _lcdCommand: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5341  0A0C  3022               	movlw	lcdProcess@lcd& (0+255)
  5342  0A0D  0084               	movwf	4
  5343  0A0E  3037               	movlw	low lcdCommand@lcd
  5344  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  5345  0A10  1303               	bcf	3,6	;RP1=0, select bank0
  5346  0A11  00C5               	movwf	??_lcdCommand
  5347  0A12  0804               	movf	4,w
  5348  0A13  00C6               	movwf	??_lcdCommand+1
  5349  0A14  300C               	movlw	12
  5350  0A15  00C7               	movwf	??_lcdCommand+2
  5351  0A16                     u2110:	
  5352  0A16  0845               	movf	??_lcdCommand,w
  5353  0A17  0084               	movwf	4
  5354  0A18  1383               	bcf	3,7	;select IRP bank0
  5355  0A19  0800               	movf	0,w
  5356  0A1A  00C8               	movwf	??_lcdCommand+3
  5357  0A1B  0AC5               	incf	??_lcdCommand,f
  5358  0A1C  0846               	movf	??_lcdCommand+1,w
  5359  0A1D  0084               	movwf	4
  5360  0A1E  0848               	movf	??_lcdCommand+3,w
  5361  0A1F  0080               	movwf	0
  5362  0A20  0AC6               	incf	??_lcdCommand+1,f
  5363  0A21  0BC7               	decfsz	??_lcdCommand+2,f
  5364  0A22  2A16               	goto	u2110
  5365  0A23  0844               	movf	lcdCommand@cmd+1,w
  5366  0A24  00AF               	movwf	lcdProcess@cmd+1
  5367  0A25  0843               	movf	lcdCommand@cmd,w
  5368  0A26  00AE               	movwf	lcdProcess@cmd
  5369  0A27  3000               	movlw	0
  5370  0A28  00B0               	movwf	lcdProcess@isData
  5371  0A29  00B1               	movwf	lcdProcess@isData+1
  5372  0A2A  118A  23D0         	fcall	_lcdProcess
  5373  0A2C  0008               	return
  5374  0A2D                     __end_of_lcdCommand:	
  5375                           
  5376                           	psect	text23
  5377  03D0                     __ptext23:	
  5378 ;; *************** function _lcdProcess *****************
  5379 ;; Defined at:
  5380 ;;		line 97 in file "../lib/lcd1602.h"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  lcd            12    2[BANK0 ] struct LCD_1602
  5383 ;;  cmd             2   14[BANK0 ] unsigned int 
  5384 ;;  isData          2   16[BANK0 ] unsigned int 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;		None
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  1    wreg      void 
  5389 ;; Registers used:
  5390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5396 ;;      Params:         0      16       0       0
  5397 ;;      Locals:         0       0       0       0
  5398 ;;      Temps:          0       5       0       0
  5399 ;;      Totals:         0      21       0       0
  5400 ;;Total ram usage:       21 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    2
  5403 ;; This function calls:
  5404 ;;		_lcdClearRegPin
  5405 ;;		_lcdDelay
  5406 ;;		_lcdSetRegPin
  5407 ;; This function is called by:
  5408 ;;		_lcdCommand
  5409 ;;		_lcdPutChar
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _lcdProcess
  5415  03D0                     _lcdProcess:	
  5416                           
  5417                           ;lcd1602.h: 98: if (lcd.use4Bit == 1) {
  5418                           
  5419                           ;incstack = 0
  5420                           ; Regs used in _lcdProcess: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5421  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  5422  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  5423  03D2  032C               	decf	lcdProcess@lcd+10,w
  5424  03D3  042D               	iorwf	lcdProcess@lcd+11,w
  5425  03D4  1D03               	btfss	3,2
  5426  03D5  2CF7               	goto	l1382
  5427                           
  5428                           ;lcd1602.h: 102: *lcd.dataPort = (((cmd & 0xF0) >> 4) << 4) | (*lcd.dataPort & 0x0F);
  5429  03D6  082A               	movf	low ((lcdProcess@lcd| 0+8)),w
  5430  03D7  0084               	movwf	4
  5431  03D8  1783               	bsf	3,7
  5432  03D9  1C2B               	btfss	(low ((lcdProcess@lcd| 0+8))+1),0
  5433  03DA  1383               	bcf	3,7
  5434  03DB  300F               	movlw	15
  5435  03DC  0500               	andwf	0,w
  5436  03DD  00B2               	movwf	??_lcdProcess
  5437  03DE  082F               	movf	lcdProcess@cmd+1,w
  5438  03DF  00B4               	movwf	??_lcdProcess+2
  5439  03E0  082E               	movf	lcdProcess@cmd,w
  5440  03E1  00B3               	movwf	??_lcdProcess+1
  5441  03E2  3004               	movlw	4
  5442  03E3                     u1825:	
  5443  03E3  1003               	clrc
  5444  03E4  0CB4               	rrf	??_lcdProcess+2,f
  5445  03E5  0CB3               	rrf	??_lcdProcess+1,f
  5446  03E6  3EFF               	addlw	-1
  5447  03E7  1D03               	skipz
  5448  03E8  2BE3               	goto	u1825
  5449  03E9  0833               	movf	??_lcdProcess+1,w
  5450  03EA  390F               	andlw	15
  5451  03EB  00B5               	movwf	??_lcdProcess+3
  5452  03EC  3003               	movlw	3
  5453  03ED                     u1835:	
  5454  03ED  1003               	clrc
  5455  03EE  0DB5               	rlf	??_lcdProcess+3,f
  5456  03EF  3EFF               	addlw	-1
  5457  03F0  1D03               	skipz
  5458  03F1  2BED               	goto	u1835
  5459  03F2  1003               	clrc
  5460  03F3  0D35               	rlf	??_lcdProcess+3,w
  5461  03F4  0432               	iorwf	??_lcdProcess,w
  5462  03F5  00B6               	movwf	??_lcdProcess+4
  5463  03F6  082A               	movf	low ((lcdProcess@lcd| 0+8)),w
  5464  03F7  0084               	movwf	4
  5465  03F8  1783               	bsf	3,7
  5466  03F9  1C2B               	btfss	(low ((lcdProcess@lcd| 0+8))+1),0
  5467  03FA  1383               	bcf	3,7
  5468  03FB  0836               	movf	??_lcdProcess+4,w
  5469  03FC  0080               	movwf	0
  5470                           
  5471                           ;lcd1602.h: 105: if (isData == 1) {
  5472  03FD  0330               	decf	lcdProcess@isData,w
  5473  03FE  0431               	iorwf	lcdProcess@isData+1,w
  5474  03FF  1D03               	btfss	3,2
  5475  0400  2C1E               	goto	l1366
  5476                           
  5477                           ;lcd1602.h: 106: lcdSetRegPin(lcd, lcd.regRS);
  5478  0401  3070               	movlw	lcdSetRegPin@lcd& (0+255)
  5479  0402  0084               	movwf	4
  5480  0403  3022               	movlw	low lcdProcess@lcd
  5481  0404  00B2               	movwf	??_lcdProcess
  5482  0405  0804               	movf	4,w
  5483  0406  00B3               	movwf	??_lcdProcess+1
  5484  0407  300C               	movlw	12
  5485  0408  00B4               	movwf	??_lcdProcess+2
  5486  0409                     u1850:	
  5487  0409  0832               	movf	??_lcdProcess,w
  5488  040A  0084               	movwf	4
  5489  040B  1383               	bcf	3,7	;select IRP bank0
  5490  040C  0800               	movf	0,w
  5491  040D  00B5               	movwf	??_lcdProcess+3
  5492  040E  0AB2               	incf	??_lcdProcess,f
  5493  040F  0833               	movf	??_lcdProcess+1,w
  5494  0410  0084               	movwf	4
  5495  0411  0835               	movf	??_lcdProcess+3,w
  5496  0412  0080               	movwf	0
  5497  0413  0AB3               	incf	??_lcdProcess+1,f
  5498  0414  0BB4               	decfsz	??_lcdProcess+2,f
  5499  0415  2C09               	goto	u1850
  5500  0416  0824               	movf	lcdProcess@lcd+2,w
  5501  0417  00B6               	movwf	??_lcdProcess+4
  5502  0418  0836               	movf	??_lcdProcess+4,w
  5503  0419  00FC               	movwf	lcdSetRegPin@pin
  5504  041A  158A  21C1  118A   	fcall	_lcdSetRegPin
  5505                           
  5506                           ;lcd1602.h: 107: } else {
  5507  041D  2C3C               	goto	l108
  5508  041E                     l1366:	
  5509                           
  5510                           ;lcd1602.h: 108: lcdClearRegPin(lcd, lcd.regRS);
  5511  041E  3070               	movlw	lcdClearRegPin@lcd& (0+255)
  5512  041F  0084               	movwf	4
  5513  0420  3022               	movlw	low lcdProcess@lcd
  5514  0421  1283               	bcf	3,5	;RP0=0, select bank0
  5515  0422  1303               	bcf	3,6	;RP1=0, select bank0
  5516  0423  00B2               	movwf	??_lcdProcess
  5517  0424  0804               	movf	4,w
  5518  0425  00B3               	movwf	??_lcdProcess+1
  5519  0426  300C               	movlw	12
  5520  0427  00B4               	movwf	??_lcdProcess+2
  5521  0428                     u1860:	
  5522  0428  0832               	movf	??_lcdProcess,w
  5523  0429  0084               	movwf	4
  5524  042A  1383               	bcf	3,7	;select IRP bank0
  5525  042B  0800               	movf	0,w
  5526  042C  00B5               	movwf	??_lcdProcess+3
  5527  042D  0AB2               	incf	??_lcdProcess,f
  5528  042E  0833               	movf	??_lcdProcess+1,w
  5529  042F  0084               	movwf	4
  5530  0430  0835               	movf	??_lcdProcess+3,w
  5531  0431  0080               	movwf	0
  5532  0432  0AB3               	incf	??_lcdProcess+1,f
  5533  0433  0BB4               	decfsz	??_lcdProcess+2,f
  5534  0434  2C28               	goto	u1860
  5535  0435  0824               	movf	lcdProcess@lcd+2,w
  5536  0436  00B6               	movwf	??_lcdProcess+4
  5537  0437  0836               	movf	??_lcdProcess+4,w
  5538  0438  00FC               	movwf	lcdClearRegPin@pin
  5539  0439  158A  21D6  118A   	fcall	_lcdClearRegPin
  5540  043C                     l108:	
  5541                           
  5542                           ;lcd1602.h: 109: }
  5543                           ;lcd1602.h: 112: lcdClearRegPin(lcd, lcd.regRW);
  5544  043C  3070               	movlw	lcdClearRegPin@lcd& (0+255)
  5545  043D  0084               	movwf	4
  5546  043E  3022               	movlw	low lcdProcess@lcd
  5547  043F  1283               	bcf	3,5	;RP0=0, select bank0
  5548  0440  1303               	bcf	3,6	;RP1=0, select bank0
  5549  0441  00B2               	movwf	??_lcdProcess
  5550  0442  0804               	movf	4,w
  5551  0443  00B3               	movwf	??_lcdProcess+1
  5552  0444  300C               	movlw	12
  5553  0445  00B4               	movwf	??_lcdProcess+2
  5554  0446                     u1870:	
  5555  0446  0832               	movf	??_lcdProcess,w
  5556  0447  0084               	movwf	4
  5557  0448  1383               	bcf	3,7	;select IRP bank0
  5558  0449  0800               	movf	0,w
  5559  044A  00B5               	movwf	??_lcdProcess+3
  5560  044B  0AB2               	incf	??_lcdProcess,f
  5561  044C  0833               	movf	??_lcdProcess+1,w
  5562  044D  0084               	movwf	4
  5563  044E  0835               	movf	??_lcdProcess+3,w
  5564  044F  0080               	movwf	0
  5565  0450  0AB3               	incf	??_lcdProcess+1,f
  5566  0451  0BB4               	decfsz	??_lcdProcess+2,f
  5567  0452  2C46               	goto	u1870
  5568  0453  0826               	movf	lcdProcess@lcd+4,w
  5569  0454  00B6               	movwf	??_lcdProcess+4
  5570  0455  0836               	movf	??_lcdProcess+4,w
  5571  0456  00FC               	movwf	lcdClearRegPin@pin
  5572  0457  158A  21D6  118A   	fcall	_lcdClearRegPin
  5573                           
  5574                           ;lcd1602.h: 115: lcdSetRegPin(lcd, lcd.regEN);
  5575  045A  3070               	movlw	lcdSetRegPin@lcd& (0+255)
  5576  045B  0084               	movwf	4
  5577  045C  3022               	movlw	low lcdProcess@lcd
  5578  045D  1283               	bcf	3,5	;RP0=0, select bank0
  5579  045E  1303               	bcf	3,6	;RP1=0, select bank0
  5580  045F  00B2               	movwf	??_lcdProcess
  5581  0460  0804               	movf	4,w
  5582  0461  00B3               	movwf	??_lcdProcess+1
  5583  0462  300C               	movlw	12
  5584  0463  00B4               	movwf	??_lcdProcess+2
  5585  0464                     u1880:	
  5586  0464  0832               	movf	??_lcdProcess,w
  5587  0465  0084               	movwf	4
  5588  0466  1383               	bcf	3,7	;select IRP bank0
  5589  0467  0800               	movf	0,w
  5590  0468  00B5               	movwf	??_lcdProcess+3
  5591  0469  0AB2               	incf	??_lcdProcess,f
  5592  046A  0833               	movf	??_lcdProcess+1,w
  5593  046B  0084               	movwf	4
  5594  046C  0835               	movf	??_lcdProcess+3,w
  5595  046D  0080               	movwf	0
  5596  046E  0AB3               	incf	??_lcdProcess+1,f
  5597  046F  0BB4               	decfsz	??_lcdProcess+2,f
  5598  0470  2C64               	goto	u1880
  5599  0471  0828               	movf	lcdProcess@lcd+6,w
  5600  0472  00B6               	movwf	??_lcdProcess+4
  5601  0473  0836               	movf	??_lcdProcess+4,w
  5602  0474  00FC               	movwf	lcdSetRegPin@pin
  5603  0475  158A  21C1  118A   	fcall	_lcdSetRegPin
  5604                           
  5605                           ;lcd1602.h: 116: lcdDelay();
  5606  0478  158A  218C  118A   	fcall	_lcdDelay
  5607                           
  5608                           ;lcd1602.h: 117: lcdClearRegPin(lcd, lcd.regEN);
  5609  047B  3070               	movlw	lcdClearRegPin@lcd& (0+255)
  5610  047C  0084               	movwf	4
  5611  047D  3022               	movlw	low lcdProcess@lcd
  5612  047E  1283               	bcf	3,5	;RP0=0, select bank0
  5613  047F  1303               	bcf	3,6	;RP1=0, select bank0
  5614  0480  00B2               	movwf	??_lcdProcess
  5615  0481  0804               	movf	4,w
  5616  0482  00B3               	movwf	??_lcdProcess+1
  5617  0483  300C               	movlw	12
  5618  0484  00B4               	movwf	??_lcdProcess+2
  5619  0485                     u1890:	
  5620  0485  0832               	movf	??_lcdProcess,w
  5621  0486  0084               	movwf	4
  5622  0487  1383               	bcf	3,7	;select IRP bank0
  5623  0488  0800               	movf	0,w
  5624  0489  00B5               	movwf	??_lcdProcess+3
  5625  048A  0AB2               	incf	??_lcdProcess,f
  5626  048B  0833               	movf	??_lcdProcess+1,w
  5627  048C  0084               	movwf	4
  5628  048D  0835               	movf	??_lcdProcess+3,w
  5629  048E  0080               	movwf	0
  5630  048F  0AB3               	incf	??_lcdProcess+1,f
  5631  0490  0BB4               	decfsz	??_lcdProcess+2,f
  5632  0491  2C85               	goto	u1890
  5633  0492  0828               	movf	lcdProcess@lcd+6,w
  5634  0493  00B6               	movwf	??_lcdProcess+4
  5635  0494  0836               	movf	??_lcdProcess+4,w
  5636  0495  00FC               	movwf	lcdClearRegPin@pin
  5637  0496  158A  21D6  118A   	fcall	_lcdClearRegPin
  5638                           
  5639                           ;lcd1602.h: 120: *lcd.dataPort = ((cmd & 0x0F) << 4) | (*lcd.dataPort & 0x0F);
  5640  0499  1283               	bcf	3,5	;RP0=0, select bank0
  5641  049A  1303               	bcf	3,6	;RP1=0, select bank0
  5642  049B  082A               	movf	low ((lcdProcess@lcd| 0+8)),w
  5643  049C  0084               	movwf	4
  5644  049D  1783               	bsf	3,7
  5645  049E  1C2B               	btfss	(low ((lcdProcess@lcd| 0+8))+1),0
  5646  049F  1383               	bcf	3,7
  5647  04A0  300F               	movlw	15
  5648  04A1  0500               	andwf	0,w
  5649  04A2  00B2               	movwf	??_lcdProcess
  5650  04A3  082E               	movf	lcdProcess@cmd,w
  5651  04A4  390F               	andlw	15
  5652  04A5  00B3               	movwf	??_lcdProcess+1
  5653  04A6  3003               	movlw	3
  5654  04A7                     u1905:	
  5655  04A7  1003               	clrc
  5656  04A8  0DB3               	rlf	??_lcdProcess+1,f
  5657  04A9  3EFF               	addlw	-1
  5658  04AA  1D03               	skipz
  5659  04AB  2CA7               	goto	u1905
  5660  04AC  1003               	clrc
  5661  04AD  0D33               	rlf	??_lcdProcess+1,w
  5662  04AE  0432               	iorwf	??_lcdProcess,w
  5663  04AF  00B4               	movwf	??_lcdProcess+2
  5664  04B0  082A               	movf	low ((lcdProcess@lcd| 0+8)),w
  5665  04B1  0084               	movwf	4
  5666  04B2  1783               	bsf	3,7
  5667  04B3  1C2B               	btfss	(low ((lcdProcess@lcd| 0+8))+1),0
  5668  04B4  1383               	bcf	3,7
  5669  04B5  0834               	movf	??_lcdProcess+2,w
  5670  04B6  0080               	movwf	0
  5671                           
  5672                           ;lcd1602.h: 123: lcdSetRegPin(lcd, lcd.regEN);
  5673  04B7  3070               	movlw	lcdSetRegPin@lcd& (0+255)
  5674  04B8  0084               	movwf	4
  5675  04B9  3022               	movlw	low lcdProcess@lcd
  5676  04BA  00B2               	movwf	??_lcdProcess
  5677  04BB  0804               	movf	4,w
  5678  04BC  00B3               	movwf	??_lcdProcess+1
  5679  04BD  300C               	movlw	12
  5680  04BE  00B4               	movwf	??_lcdProcess+2
  5681  04BF                     u1910:	
  5682  04BF  0832               	movf	??_lcdProcess,w
  5683  04C0  0084               	movwf	4
  5684  04C1  1383               	bcf	3,7	;select IRP bank0
  5685  04C2  0800               	movf	0,w
  5686  04C3  00B5               	movwf	??_lcdProcess+3
  5687  04C4  0AB2               	incf	??_lcdProcess,f
  5688  04C5  0833               	movf	??_lcdProcess+1,w
  5689  04C6  0084               	movwf	4
  5690  04C7  0835               	movf	??_lcdProcess+3,w
  5691  04C8  0080               	movwf	0
  5692  04C9  0AB3               	incf	??_lcdProcess+1,f
  5693  04CA  0BB4               	decfsz	??_lcdProcess+2,f
  5694  04CB  2CBF               	goto	u1910
  5695  04CC  0828               	movf	lcdProcess@lcd+6,w
  5696  04CD  00B6               	movwf	??_lcdProcess+4
  5697  04CE  0836               	movf	??_lcdProcess+4,w
  5698  04CF  00FC               	movwf	lcdSetRegPin@pin
  5699  04D0  158A  21C1  118A   	fcall	_lcdSetRegPin
  5700                           
  5701                           ;lcd1602.h: 124: lcdDelay();
  5702  04D3  158A  218C  118A   	fcall	_lcdDelay
  5703                           
  5704                           ;lcd1602.h: 125: lcdClearRegPin(lcd, lcd.regEN);
  5705  04D6  3070               	movlw	lcdClearRegPin@lcd& (0+255)
  5706  04D7  0084               	movwf	4
  5707  04D8  3022               	movlw	low lcdProcess@lcd
  5708  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  5709  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  5710  04DB  00B2               	movwf	??_lcdProcess
  5711  04DC  0804               	movf	4,w
  5712  04DD  00B3               	movwf	??_lcdProcess+1
  5713  04DE  300C               	movlw	12
  5714  04DF  00B4               	movwf	??_lcdProcess+2
  5715  04E0                     u1920:	
  5716  04E0  0832               	movf	??_lcdProcess,w
  5717  04E1  0084               	movwf	4
  5718  04E2  1383               	bcf	3,7	;select IRP bank0
  5719  04E3  0800               	movf	0,w
  5720  04E4  00B5               	movwf	??_lcdProcess+3
  5721  04E5  0AB2               	incf	??_lcdProcess,f
  5722  04E6  0833               	movf	??_lcdProcess+1,w
  5723  04E7  0084               	movwf	4
  5724  04E8  0835               	movf	??_lcdProcess+3,w
  5725  04E9  0080               	movwf	0
  5726  04EA  0AB3               	incf	??_lcdProcess+1,f
  5727  04EB  0BB4               	decfsz	??_lcdProcess+2,f
  5728  04EC  2CE0               	goto	u1920
  5729  04ED  0828               	movf	lcdProcess@lcd+6,w
  5730  04EE  00B6               	movwf	??_lcdProcess+4
  5731  04EF  0836               	movf	??_lcdProcess+4,w
  5732  04F0  00FC               	movwf	lcdClearRegPin@pin
  5733  04F1  158A  21D6  118A   	fcall	_lcdClearRegPin
  5734                           
  5735                           ;lcd1602.h: 127: lcdDelay();
  5736  04F4  158A  218C         	fcall	_lcdDelay
  5737                           
  5738                           ;lcd1602.h: 128: } else {
  5739  04F6  0008               	return
  5740  04F7                     l1382:	
  5741                           
  5742                           ;lcd1602.h: 130: if (isData == 1) {
  5743  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  5744  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  5745  04F9  0330               	decf	lcdProcess@isData,w
  5746  04FA  0431               	iorwf	lcdProcess@isData+1,w
  5747  04FB  1D03               	btfss	3,2
  5748  04FC  2D1A               	goto	l1386
  5749                           
  5750                           ;lcd1602.h: 131: lcdSetRegPin(lcd, lcd.regRS);
  5751  04FD  3070               	movlw	lcdSetRegPin@lcd& (0+255)
  5752  04FE  0084               	movwf	4
  5753  04FF  3022               	movlw	low lcdProcess@lcd
  5754  0500  00B2               	movwf	??_lcdProcess
  5755  0501  0804               	movf	4,w
  5756  0502  00B3               	movwf	??_lcdProcess+1
  5757  0503  300C               	movlw	12
  5758  0504  00B4               	movwf	??_lcdProcess+2
  5759  0505                     u1940:	
  5760  0505  0832               	movf	??_lcdProcess,w
  5761  0506  0084               	movwf	4
  5762  0507  1383               	bcf	3,7	;select IRP bank0
  5763  0508  0800               	movf	0,w
  5764  0509  00B5               	movwf	??_lcdProcess+3
  5765  050A  0AB2               	incf	??_lcdProcess,f
  5766  050B  0833               	movf	??_lcdProcess+1,w
  5767  050C  0084               	movwf	4
  5768  050D  0835               	movf	??_lcdProcess+3,w
  5769  050E  0080               	movwf	0
  5770  050F  0AB3               	incf	??_lcdProcess+1,f
  5771  0510  0BB4               	decfsz	??_lcdProcess+2,f
  5772  0511  2D05               	goto	u1940
  5773  0512  0824               	movf	lcdProcess@lcd+2,w
  5774  0513  00B6               	movwf	??_lcdProcess+4
  5775  0514  0836               	movf	??_lcdProcess+4,w
  5776  0515  00FC               	movwf	lcdSetRegPin@pin
  5777  0516  158A  21C1  118A   	fcall	_lcdSetRegPin
  5778                           
  5779                           ;lcd1602.h: 132: } else {
  5780  0519  2D38               	goto	l111
  5781  051A                     l1386:	
  5782                           
  5783                           ;lcd1602.h: 133: lcdClearRegPin(lcd, lcd.regRS);
  5784  051A  3070               	movlw	lcdClearRegPin@lcd& (0+255)
  5785  051B  0084               	movwf	4
  5786  051C  3022               	movlw	low lcdProcess@lcd
  5787  051D  1283               	bcf	3,5	;RP0=0, select bank0
  5788  051E  1303               	bcf	3,6	;RP1=0, select bank0
  5789  051F  00B2               	movwf	??_lcdProcess
  5790  0520  0804               	movf	4,w
  5791  0521  00B3               	movwf	??_lcdProcess+1
  5792  0522  300C               	movlw	12
  5793  0523  00B4               	movwf	??_lcdProcess+2
  5794  0524                     u1950:	
  5795  0524  0832               	movf	??_lcdProcess,w
  5796  0525  0084               	movwf	4
  5797  0526  1383               	bcf	3,7	;select IRP bank0
  5798  0527  0800               	movf	0,w
  5799  0528  00B5               	movwf	??_lcdProcess+3
  5800  0529  0AB2               	incf	??_lcdProcess,f
  5801  052A  0833               	movf	??_lcdProcess+1,w
  5802  052B  0084               	movwf	4
  5803  052C  0835               	movf	??_lcdProcess+3,w
  5804  052D  0080               	movwf	0
  5805  052E  0AB3               	incf	??_lcdProcess+1,f
  5806  052F  0BB4               	decfsz	??_lcdProcess+2,f
  5807  0530  2D24               	goto	u1950
  5808  0531  0824               	movf	lcdProcess@lcd+2,w
  5809  0532  00B6               	movwf	??_lcdProcess+4
  5810  0533  0836               	movf	??_lcdProcess+4,w
  5811  0534  00FC               	movwf	lcdClearRegPin@pin
  5812  0535  158A  21D6  118A   	fcall	_lcdClearRegPin
  5813  0538                     l111:	
  5814                           
  5815                           ;lcd1602.h: 134: }
  5816                           ;lcd1602.h: 137: lcdClearRegPin(lcd, lcd.regRW);
  5817  0538  3070               	movlw	lcdClearRegPin@lcd& (0+255)
  5818  0539  0084               	movwf	4
  5819  053A  3022               	movlw	low lcdProcess@lcd
  5820  053B  1283               	bcf	3,5	;RP0=0, select bank0
  5821  053C  1303               	bcf	3,6	;RP1=0, select bank0
  5822  053D  00B2               	movwf	??_lcdProcess
  5823  053E  0804               	movf	4,w
  5824  053F  00B3               	movwf	??_lcdProcess+1
  5825  0540  300C               	movlw	12
  5826  0541  00B4               	movwf	??_lcdProcess+2
  5827  0542                     u1960:	
  5828  0542  0832               	movf	??_lcdProcess,w
  5829  0543  0084               	movwf	4
  5830  0544  1383               	bcf	3,7	;select IRP bank0
  5831  0545  0800               	movf	0,w
  5832  0546  00B5               	movwf	??_lcdProcess+3
  5833  0547  0AB2               	incf	??_lcdProcess,f
  5834  0548  0833               	movf	??_lcdProcess+1,w
  5835  0549  0084               	movwf	4
  5836  054A  0835               	movf	??_lcdProcess+3,w
  5837  054B  0080               	movwf	0
  5838  054C  0AB3               	incf	??_lcdProcess+1,f
  5839  054D  0BB4               	decfsz	??_lcdProcess+2,f
  5840  054E  2D42               	goto	u1960
  5841  054F  0826               	movf	lcdProcess@lcd+4,w
  5842  0550  00B6               	movwf	??_lcdProcess+4
  5843  0551  0836               	movf	??_lcdProcess+4,w
  5844  0552  00FC               	movwf	lcdClearRegPin@pin
  5845  0553  158A  21D6  118A   	fcall	_lcdClearRegPin
  5846                           
  5847                           ;lcd1602.h: 140: *lcd.dataPort = cmd;
  5848  0556  1283               	bcf	3,5	;RP0=0, select bank0
  5849  0557  1303               	bcf	3,6	;RP1=0, select bank0
  5850  0558  082E               	movf	lcdProcess@cmd,w
  5851  0559  00B2               	movwf	??_lcdProcess
  5852  055A  082A               	movf	low ((lcdProcess@lcd| 0+8)),w
  5853  055B  0084               	movwf	4
  5854  055C  1783               	bsf	3,7
  5855  055D  1C2B               	btfss	(low ((lcdProcess@lcd| 0+8))+1),0
  5856  055E  1383               	bcf	3,7
  5857  055F  0832               	movf	??_lcdProcess,w
  5858  0560  0080               	movwf	0
  5859                           
  5860                           ;lcd1602.h: 143: lcdSetRegPin(lcd, lcd.regEN);
  5861  0561  3070               	movlw	lcdSetRegPin@lcd& (0+255)
  5862  0562  0084               	movwf	4
  5863  0563  3022               	movlw	low lcdProcess@lcd
  5864  0564  00B2               	movwf	??_lcdProcess
  5865  0565  0804               	movf	4,w
  5866  0566  00B3               	movwf	??_lcdProcess+1
  5867  0567  300C               	movlw	12
  5868  0568  00B4               	movwf	??_lcdProcess+2
  5869  0569                     u1970:	
  5870  0569  0832               	movf	??_lcdProcess,w
  5871  056A  0084               	movwf	4
  5872  056B  1383               	bcf	3,7	;select IRP bank0
  5873  056C  0800               	movf	0,w
  5874  056D  00B5               	movwf	??_lcdProcess+3
  5875  056E  0AB2               	incf	??_lcdProcess,f
  5876  056F  0833               	movf	??_lcdProcess+1,w
  5877  0570  0084               	movwf	4
  5878  0571  0835               	movf	??_lcdProcess+3,w
  5879  0572  0080               	movwf	0
  5880  0573  0AB3               	incf	??_lcdProcess+1,f
  5881  0574  0BB4               	decfsz	??_lcdProcess+2,f
  5882  0575  2D69               	goto	u1970
  5883  0576  0828               	movf	lcdProcess@lcd+6,w
  5884  0577  00B6               	movwf	??_lcdProcess+4
  5885  0578  0836               	movf	??_lcdProcess+4,w
  5886  0579  00FC               	movwf	lcdSetRegPin@pin
  5887  057A  158A  21C1  118A   	fcall	_lcdSetRegPin
  5888                           
  5889                           ;lcd1602.h: 144: lcdDelay();
  5890  057D  158A  218C  118A   	fcall	_lcdDelay
  5891                           
  5892                           ;lcd1602.h: 145: lcdClearRegPin(lcd, lcd.regEN);
  5893  0580  3070               	movlw	lcdClearRegPin@lcd& (0+255)
  5894  0581  0084               	movwf	4
  5895  0582  3022               	movlw	low lcdProcess@lcd
  5896  0583  1283               	bcf	3,5	;RP0=0, select bank0
  5897  0584  1303               	bcf	3,6	;RP1=0, select bank0
  5898  0585  00B2               	movwf	??_lcdProcess
  5899  0586  0804               	movf	4,w
  5900  0587  00B3               	movwf	??_lcdProcess+1
  5901  0588  300C               	movlw	12
  5902  0589  00B4               	movwf	??_lcdProcess+2
  5903  058A                     u1980:	
  5904  058A  0832               	movf	??_lcdProcess,w
  5905  058B  0084               	movwf	4
  5906  058C  1383               	bcf	3,7	;select IRP bank0
  5907  058D  0800               	movf	0,w
  5908  058E  00B5               	movwf	??_lcdProcess+3
  5909  058F  0AB2               	incf	??_lcdProcess,f
  5910  0590  0833               	movf	??_lcdProcess+1,w
  5911  0591  0084               	movwf	4
  5912  0592  0835               	movf	??_lcdProcess+3,w
  5913  0593  0080               	movwf	0
  5914  0594  0AB3               	incf	??_lcdProcess+1,f
  5915  0595  0BB4               	decfsz	??_lcdProcess+2,f
  5916  0596  2D8A               	goto	u1980
  5917  0597  0828               	movf	lcdProcess@lcd+6,w
  5918  0598  00B6               	movwf	??_lcdProcess+4
  5919  0599  0836               	movf	??_lcdProcess+4,w
  5920  059A  00FC               	movwf	lcdClearRegPin@pin
  5921  059B  158A  21D6         	fcall	_lcdClearRegPin
  5922  059D  0008               	return
  5923  059E                     __end_of_lcdProcess:	
  5924                           
  5925                           	psect	text24
  5926  09C1                     __ptext24:	
  5927 ;; *************** function _lcdSetRegPin *****************
  5928 ;; Defined at:
  5929 ;;		line 195 in file "../lib/lcd1602.h"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  lcd            12    0[COMMON] struct LCD_1602
  5932 ;;  pin             1   12[COMMON] unsigned char 
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;		None
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  1    wreg      void 
  5937 ;; Registers used:
  5938 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5944 ;;      Params:        13       0       0       0
  5945 ;;      Locals:         0       0       0       0
  5946 ;;      Temps:          0       2       0       0
  5947 ;;      Totals:        13       2       0       0
  5948 ;;Total ram usage:       15 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_lcdProcess
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _lcdSetRegPin
  5959  09C1                     _lcdSetRegPin:	
  5960                           
  5961                           ;lcd1602.h: 196: *lcd.regPort |= 1 << pin;
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in _lcdSetRegPin: [wreg-fsr0h+status,2+status,0]
  5965  09C1  3001               	movlw	1
  5966  09C2  1283               	bcf	3,5	;RP0=0, select bank0
  5967  09C3  1303               	bcf	3,6	;RP1=0, select bank0
  5968  09C4  00A0               	movwf	??_lcdSetRegPin
  5969  09C5  0A7C               	incf	lcdSetRegPin@pin,w
  5970  09C6  29C9               	goto	u1794
  5971  09C7                     u1795:	
  5972  09C7  1003               	clrc
  5973  09C8  0DA0               	rlf	??_lcdSetRegPin,f
  5974  09C9                     u1794:	
  5975  09C9  3EFF               	addlw	-1
  5976  09CA  1D03               	skipz
  5977  09CB  29C7               	goto	u1795
  5978  09CC  0820               	movf	??_lcdSetRegPin,w
  5979  09CD  00A1               	movwf	??_lcdSetRegPin+1
  5980  09CE  0870               	movf	lcdSetRegPin@lcd,w
  5981  09CF  0084               	movwf	4
  5982  09D0  1783               	bsf	3,7
  5983  09D1  1C71               	btfss	lcdSetRegPin@lcd+1,0
  5984  09D2  1383               	bcf	3,7
  5985  09D3  0821               	movf	??_lcdSetRegPin+1,w
  5986  09D4  0480               	iorwf	0,f
  5987  09D5  0008               	return
  5988  09D6                     __end_of_lcdSetRegPin:	
  5989                           
  5990                           	psect	text25
  5991  098C                     __ptext25:	
  5992 ;; *************** function _lcdDelay *****************
  5993 ;; Defined at:
  5994 ;;		line 191 in file "../lib/lcd1602.h"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;		None
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;		None
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0, pclath, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6008 ;;      Params:         0       0       0       0
  6009 ;;      Locals:         0       0       0       0
  6010 ;;      Temps:          0       0       0       0
  6011 ;;      Totals:         0       0       0       0
  6012 ;;Total ram usage:        0 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    1
  6015 ;; This function calls:
  6016 ;;		_delayUS
  6017 ;; This function is called by:
  6018 ;;		_lcdProcess
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _lcdDelay
  6024  098C                     _lcdDelay:	
  6025                           
  6026                           ;lcd1602.h: 192: delayUS(200);
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _lcdDelay: [wreg+status,2+status,0+pclath+cstack]
  6030  098C  30C8               	movlw	200
  6031  098D  00F0               	movwf	delayUS@us
  6032  098E  3000               	movlw	0
  6033  098F  00F1               	movwf	delayUS@us+1
  6034  0990  158A  21A3         	fcall	_delayUS
  6035  0992  0008               	return
  6036  0993                     __end_of_lcdDelay:	
  6037                           
  6038                           	psect	text26
  6039  09A3                     __ptext26:	
  6040 ;; *************** function _delayUS *****************
  6041 ;; Defined at:
  6042 ;;		line 14 in file "../lib/delay.h"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;  us              2    0[COMMON] unsigned int 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;		None
  6047 ;; Return value:  Size  Location     Type
  6048 ;;                  1    wreg      void 
  6049 ;; Registers used:
  6050 ;;		wreg, status,2, status,0
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 0/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6056 ;;      Params:         2       0       0       0
  6057 ;;      Locals:         0       0       0       0
  6058 ;;      Temps:          0       0       0       0
  6059 ;;      Totals:         2       0       0       0
  6060 ;;Total ram usage:        2 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_lcdDelay
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function _delayUS
  6071  09A3                     _delayUS:	
  6072  09A3                     l1350:	
  6073                           ;delay.h: 15: while (us) {
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  6077                           
  6078  09A3  0870               	movf	delayUS@us,w
  6079  09A4  0471               	iorwf	delayUS@us+1,w
  6080  09A5  1903               	btfsc	3,2
  6081  09A6  0008               	return
  6082                           
  6083                           ;delay.h: 16: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6084  09A7  0000               	nop
  6085                           
  6086                           ;delay.h: 17: us--;
  6087  09A8  3001               	movlw	1
  6088  09A9  02F0               	subwf	delayUS@us,f
  6089  09AA  3000               	movlw	0
  6090  09AB  1C03               	skipc
  6091  09AC  03F1               	decf	delayUS@us+1,f
  6092  09AD  02F1               	subwf	delayUS@us+1,f
  6093  09AE  29A3               	goto	l1350
  6094  09AF                     __end_of_delayUS:	
  6095                           
  6096                           	psect	text27
  6097  09D6                     __ptext27:	
  6098 ;; *************** function _lcdClearRegPin *****************
  6099 ;; Defined at:
  6100 ;;		line 199 in file "../lib/lcd1602.h"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;  lcd            12    0[COMMON] struct LCD_1602
  6103 ;;  pin             1   12[COMMON] unsigned char 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;		None
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      void 
  6108 ;; Registers used:
  6109 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6115 ;;      Params:        13       0       0       0
  6116 ;;      Locals:         0       0       0       0
  6117 ;;      Temps:          0       2       0       0
  6118 ;;      Totals:        13       2       0       0
  6119 ;;Total ram usage:       15 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_lcdProcess
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           
  6129                           ;psect for function _lcdClearRegPin
  6130  09D6                     _lcdClearRegPin:	
  6131                           
  6132                           ;lcd1602.h: 200: *lcd.regPort &= ~(1 << pin);
  6133                           
  6134                           ;incstack = 0
  6135                           ; Regs used in _lcdClearRegPin: [wreg-fsr0h+status,2+status,0]
  6136  09D6  3001               	movlw	1
  6137  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  6138  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  6139  09D9  00A0               	movwf	??_lcdClearRegPin
  6140  09DA  0A7C               	incf	lcdClearRegPin@pin,w
  6141  09DB  29DE               	goto	u1804
  6142  09DC                     u1805:	
  6143  09DC  1003               	clrc
  6144  09DD  0DA0               	rlf	??_lcdClearRegPin,f
  6145  09DE                     u1804:	
  6146  09DE  3EFF               	addlw	-1
  6147  09DF  1D03               	skipz
  6148  09E0  29DC               	goto	u1805
  6149  09E1  0820               	movf	??_lcdClearRegPin,w
  6150  09E2  3AFF               	xorlw	255
  6151  09E3  00A1               	movwf	??_lcdClearRegPin+1
  6152  09E4  0870               	movf	lcdClearRegPin@lcd,w
  6153  09E5  0084               	movwf	4
  6154  09E6  1783               	bsf	3,7
  6155  09E7  1C71               	btfss	lcdClearRegPin@lcd+1,0
  6156  09E8  1383               	bcf	3,7
  6157  09E9  0821               	movf	??_lcdClearRegPin+1,w
  6158  09EA  0580               	andwf	0,f
  6159  09EB  0008               	return
  6160  09EC                     __end_of_lcdClearRegPin:	
  6161                           
  6162                           	psect	text28
  6163  09AF                     __ptext28:	
  6164 ;; *************** function _delayMS *****************
  6165 ;; Defined at:
  6166 ;;		line 21 in file "../lib/delay.h"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  us              2    0[COMMON] unsigned int 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6180 ;;      Params:         2       0       0       0
  6181 ;;      Locals:         0       0       0       0
  6182 ;;      Temps:          1       0       0       0
  6183 ;;      Totals:         3       0       0       0
  6184 ;;Total ram usage:        3 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_main
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function _delayMS
  6195  09AF                     _delayMS:	
  6196  09AF                     l1900:	
  6197                           ;delay.h: 22: while (us) {
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in _delayMS: [wreg+status,2+status,0]
  6201                           
  6202  09AF  0870               	movf	delayMS@us,w
  6203  09B0  0471               	iorwf	delayMS@us+1,w
  6204  09B1  1903               	btfsc	3,2
  6205  09B2  0008               	return
  6206                           
  6207                           ;delay.h: 23: _delay((unsigned long)((1)*(4000000/4000.0)));
  6208  09B3  30C7               	movlw	199
  6209  09B4  00F2               	movwf	??_delayMS
  6210  09B5                     u3557:	
  6211  09B5  29B6               	nop2
  6212  09B6  0BF2               	decfsz	??_delayMS,f
  6213  09B7  29B5               	goto	u3557
  6214  09B8  29B9               	nop2
  6215  09B9  29BA               	nop2
  6216                           
  6217                           ;delay.h: 24: us--;
  6218  09BA  3001               	movlw	1
  6219  09BB  02F0               	subwf	delayMS@us,f
  6220  09BC  3000               	movlw	0
  6221  09BD  1C03               	skipc
  6222  09BE  03F1               	decf	delayMS@us+1,f
  6223  09BF  02F1               	subwf	delayMS@us+1,f
  6224  09C0  29AF               	goto	l1900
  6225  09C1                     __end_of_delayMS:	
  6226  007E                     btemp	set	126	;btemp
  6227  007E                     wtemp0	set	126


Data Sizes:
    Strings     64
    Constant    78
    Data        0
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     28      57
    BANK2            80      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> lcdDataFloat@status(BANK0[2]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_6(CODE[11]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), lcdDataInt@buf(BANK1[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    lcdDataFloat@str	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcdData@str	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK1[17]), STR_5(CODE[14]), STR_4(CODE[16]), STR_3(CODE[3]), 
		 -> STR_2(CODE[17]), lcdDataInt@buf(BANK1[16]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    S25LCD_1602$dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    lcd.dataPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR0[1]), 

    S25LCD_1602$regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.regPort	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 


Critical Paths under _main in COMMON

    _ftoa->___ftmul
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _lcdProcess->_lcdClearRegPin
    _lcdProcess->_lcdSetRegPin
    _lcdDelay->_delayUS

Critical Paths under _main in BANK0

    _main->_lcdDataFloat
    _main->_lcdDataInt
    _lcdDataInt->_lcdData
    _lcdDataFloat->_lcdData
    _lcdData->_lcdPutChar
    _lcdPutChar->_lcdProcess
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _init->_lcdInit
    _lcdInit->_lcdClear
    _lcdClear->_lcdCommand
    _lcdCommand->_lcdProcess
    _lcdProcess->_lcdClearRegPin
    _lcdProcess->_lcdSetRegPin

Critical Paths under _main in BANK1

    _main->_lcdDataInt

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     4      4   39494
                                             20 BANK1      8     4      4
                            _delayMS
                               _init
                           _lcdClear
                         _lcdCommand
                            _lcdData
                       _lcdDataFloat
                         _lcdDataInt
 ---------------------------------------------------------------------------------
 (1) _lcdDataInt                                          34    20     14    5918
                                             66 BANK0     14     0     14
                                              0 BANK1     20    20      0
                            _lcdData
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _lcdDataFloat                                        31    14     17   14201
                                             66 BANK0     14    14      0
                                              0 BANK1     17     0     17
                               _ftoa
                            _lcdData
 ---------------------------------------------------------------------------------
 (2) _lcdData                                             24    10     14    3440
                                             42 BANK0     24    10     14
                         _lcdPutChar
 ---------------------------------------------------------------------------------
 (3) _lcdPutChar                                          19     6     13    2692
                                             23 BANK0     19     6     13
                         _lcdProcess
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                14    10      4    9979
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             34    25      9    2272
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     265
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    1790
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             10 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    2787
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    2614
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2100
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     242
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _init                                                 4     4      0    8015
                                             75 BANK0      4     4      0
                            _lcdInit
 ---------------------------------------------------------------------------------
 (2) _lcdInit                                             18     6     12    8015
                                             57 BANK0     18     6     12
                           _lcdClear
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (1) _lcdClear                                            16     4     12    3986
                                             41 BANK0     16     4     12
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (1) _lcdCommand                                          18     4     14    3752
                                             23 BANK0     18     4     14
                         _lcdProcess
 ---------------------------------------------------------------------------------
 (4) _lcdProcess                                          21     5     16    2542
                                              2 BANK0     21     5     16
                     _lcdClearRegPin
                           _lcdDelay
                       _lcdSetRegPin
 ---------------------------------------------------------------------------------
 (5) _lcdSetRegPin                                        15     2     13     574
                                              0 COMMON    13     0     13
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcdDelay                                             0     0      0      76
                            _delayUS
 ---------------------------------------------------------------------------------
 (6) _delayUS                                              2     0      2      76
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (5) _lcdClearRegPin                                      15     2     13     786
                                              0 COMMON    13     0     13
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _delayMS                                              3     1      2     182
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delayMS
   _init
     _lcdInit
       _lcdClear
         _lcdCommand
           _lcdProcess
             _lcdClearRegPin
             _lcdDelay
               _delayUS
             _lcdSetRegPin
       _lcdCommand
         _lcdProcess
           _lcdClearRegPin
           _lcdDelay
             _delayUS
           _lcdSetRegPin
   _lcdClear
     _lcdCommand
       _lcdProcess
         _lcdClearRegPin
         _lcdDelay
           _delayUS
         _lcdSetRegPin
   _lcdCommand
     _lcdProcess
       _lcdClearRegPin
       _lcdDelay
         _delayUS
       _lcdSetRegPin
   _lcdData
     _lcdPutChar
       _lcdProcess
         _lcdClearRegPin
         _lcdDelay
           _delayUS
         _lcdSetRegPin
   _lcdDataFloat
     _ftoa
       ___ftge
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
     _lcdData
       _lcdPutChar
         _lcdProcess
           _lcdClearRegPin
           _lcdDelay
             _delayUS
           _lcdSetRegPin
   _lcdDataInt
     _lcdData
       _lcdPutChar
         _lcdProcess
           _lcdClearRegPin
           _lcdDelay
             _delayUS
           _lcdSetRegPin
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     50      50       3      100.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50     1C      39       5       71.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      97       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      97      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Nov 03 00:13:10 2019

                                           pc 0002                                            fsr 0004  
                         ___wmul@multiplicand 0072                                  ___ftadd@exp1 0026  
                                ___ftadd@exp2 0025                                  ___ftadd@sign 0024  
                                         l111 0538                                           l108 043C  
                                         l132 00CB                                           l127 00D2  
                                         l209 0747                                           l162 0210  
                                         l501 01AF                                           l309 0A37  
                                         l191 064D                                           l194 066C  
                                         l196 064F                                           l197 06A7  
                                         l470 0CCD                                           l477 0CE2  
                                         l478 0CEA                                           l569 0D77  
                                         _lcd 00A0                                           fsr0 0004  
                                         indf 0000                                          l1400 0C9F  
                                        l1404 0CA6                                          l1350 09A3  
                                        l1414 0CD2                                          l1406 0CB2  
                                        l1502 019F                                          l1416 0CDC  
                                        l1408 0CB7                                          l1512 01D3  
                                        l1504 01AB                                          l1522 01F6  
                                        l1508 01C1                                          l1532 0C49  
                                        l1444 0A2F                                          l1700 07A2  
                                        l1620 0680                                          l1612 0651  
                                        l1366 041E                                          l1382 04F7  
                                        l1462 0130                                          l1542 0C81  
                                        l1534 0C59                                          l1438 0010  
                                        l1606 0616                                          l1702 05A5  
                                        l1712 0C03                                          l1472 0146  
                                        l1800 0D1D                                          l1704 07F2  
                                        l1608 0648                                          l1386 051A  
                                        l1490 0175                                          l1466 0137  
                                        l1546 0C8E                                          l1562 0B73  
                                        l1650 06E1                                          l1634 06B9  
                                        l1900 09AF                                          l1716 0C2A  
                                        l1740 0E6A                                          l1492 0181  
                                        l1484 0160                                          l1820 0D5F  
                                        l1556 0B45                                          l1660 072D  
                                        l1644 06DB                                          l1734 0E54  
                                        l1494 0186                                          l1558 0B55  
                                        l1566 0B80                                          l1638 06CB  
                                        l1582 05C3                                          l1752 0EA9  
                                        l1496 018A                                          l1832 0D88  
                                        l1840 0A9B                                          l1680 077A  
                                        l1656 0715                                          l1912 0039  
                                        l1850 0F4C                                          l1826 0D6C  
                                        l1818 0D4F                                          l1842 0AAD  
                                        l1682 077E                                          l1674 0757  
                                        l1764 0ED1                                          l1756 0EB9  
                                        l1828 0D7A                                          l1588 05D4  
                                        l1596 0606                                          l1932 00E9  
                                        l1854 0F54                                          l1790 09F5  
                                        l1678 0776                                          l1918 0050  
                                        l1768 0EE1                                          l1688 0793  
                                        l1872 0B8D                                          l1928 00B4  
                                        l1884 0DC6                                          STR_1 089B  
                                        STR_2 085E                                          STR_3 0898  
                                        STR_4 086F                                          _ANS4 08F4  
                                        STR_5 087F                                          _ANS5 08F5  
                                        STR_6 088D                                          _ANS6 08F6  
                                        _ANS7 08F7                                          _ANS8 08F8  
                                        _ANS9 08F9                                          u2110 0A16  
                                        u2015 0CAB                                          u2035 0CC6  
                                        u3005 0EE2                                          u2055 0CD5  
                                        u3015 0EEA                                          u2305 0176  
                                        u3210 0F66                                          u2155 0A38  
                                        u3220 0F84                                          u3125 0D6E  
                                        u2165 0A3F                                          u3230 0FA8  
                                        u2095 0CF1                                          u2335 018B  
                                        u3240 0FCC                                          u3400 00F3  
                                        u3320 0ADB                                          u3065 0D24  
                                        u2505 0B49                                          u3250 0FF0  
                                        u3410 0B2B                                          u2275 0161  
                                        u3155 0AA0                                          u2435 0C4D  
                                        u1804 09DE                                          u3180 0F1A  
                                        u3260 0BAC                                          u3500 0327  
                                        u3420 021A                                          u1805 09DC  
                                        u2365 01A0                                          u2525 0B63  
                                        u1910 04BF                                          u2550 0A58  
                                        u3190 0F38                                          u3510 034E  
                                        u3430 0234                                          u3095 0D50  
                                        u2455 0C5B                                          u2535 0B74  
                                        u1920 04E0                                          u2560 0A7C  
                                        u3520 0368                                          u3440 025A  
                                        u1905 04A7                                          u1825 03E3  
                                        u2465 0C70                                          u2705 070B  
                                        u1850 0409                                          u3530 0388  
                                        u3450 027A                                          u1835 03ED  
                                        u2475 0C82                                          u3355 0074  
                                        u1940 0505                                          u1860 0428  
                                        u3540 03AE                                          u3460 02A0  
                                        u2725 0724                                          u3365 009B  
                                        u1950 0524                                          u1870 0446  
                                        u3470 02C7                                          u2815 07B8  
                                        u2735 073E                                          u1960 0542  
                                        u1880 0464                                          u3480 02E1  
                                        u1794 09C9                                          u1970 0569  
                                        u1890 0485                                          u3490 0301  
                                        u1795 09C7                                          u2851 0BF6  
                                        u2915 0E76                                          u3395 00E7  
                                        u1980 058A                                          u2852 0BF7  
                                        u3557 09B5                                          u2853 0BFC  
                                        u2925 0E88                                          u2854 0BFD  
                                        u2871 0C1D                                          u2775 0766  
                                        u2695 06E4                                          u2872 0C1E  
                                        u2873 0C23                                          u2874 0C24  
                                        u2955 0EBA                                          u2965 0EC2  
                                        _main 020D                                          _ftoa 0D91  
                                ___ftpack@arg 0070                                          _init 0AF1  
                                ___ftpack@exp 0073                                          btemp 007E  
                                        start 0000                                  ___ftmul@cntr 0028  
                                ___ftmul@sign 0029                                  ___fttol@exp1 0037  
                                ___fttol@lval 0033          __end_of_LCD_CMD_FIRST_LINE_FIRST_POS 084E  
                _LCD_CMD_FIRST_LINE_FIRST_POS 084C                                         ?_main 00D1  
                                       ?_ftoa 0044                                         ?_init 0070  
                             __end_of___ftadd 020D                                         _ANS10 08FA  
                                       _ANS11 08FB                                 __CFG_WDTE$OFF 0000  
                             __end_of___ftneg 099B                               __end_of___lldiv 0C97  
                             __end_of___ftmul 0F0C                               __end_of___llmod 0B89  
                             __end_of___ftsub 0A0C                               __end_of___fttol 0D91  
                        __end_of_lcdDataFloat 0107                                         _PORTB 0006  
                                       _PORTC 0007                                         _TRISB 0086  
                                       _TRISC 0087                               __end_of_delayMS 09C1  
                             __end_of_delayUS 09AF                               __end_of_lcdData 0BDC  
                                ___lltoft@exp 007D                               __end_of_lcdInit 1000  
    __end_of_LCD_CMD_USE_8_BIT_2_LINE_5x7_MTX 0850              _LCD_CMD_USE_8_BIT_2_LINE_5x7_MTX 084E  
                             __end_of_dpowers 0838                               __end_of_isdigit 0012  
                               ___ftpack@sign 0074                                         ftoa@f 0044  
                                       ftoa@l 004D                                         pclath 000A  
                                       status 0003                                         wtemp0 007E  
                             __end_of_sprintf 07F7                               __initialization 07F7  
                                __end_of_main 03D0                                lcdDataFloat@di 006B  
                                __end_of_ftoa 0E3C                                  __end_of_init 0B3B  
                     __size_of_lcdClearRegPin 0016                                        ??_main 00D5  
                                      ??_ftoa 0048                                 ___fttol@sign1 0032  
                                      ??_init 006B                          __end_of_lcdSetRegPin 09D6  
                            ___llmod@dividend 0024                              __end_of___ftpack 0D03  
                            __end_of___lltoft 0AC1                              _lcdDataFloat$185 0069  
                            __end_of_lcdDelay 0993                              __end_of_lcdClear 0A72  
                                      ___ftge 0BDC                                        ___wmul 0A2D  
                                   ??___ftadd 0020                                     ??___ftneg 0073  
                                   ??___lldiv 0078                                     ??___ftmul 0020  
                                   ??___llmod 0028                                     ??___ftsub 007E  
                                   ??___fttol 002E                                     ??_delayMS 0072  
                                   ??_delayUS 0072                                     ??_lcdData 0058  
                                   ??_lcdInit 0065                            lcdDataFloat@status 0067  
                                      ftoa@cp 0051                         ___ftmul@f3_as_product 0025  
                                   ??_isdigit 0070                                     ??_sprintf 0033  
                     __end_of__initialization 07FD                                    ___ftadd@f1 0078  
                                  ___ftadd@f2 007B                                    ___ftge@ff1 0070  
                                  ___ftge@ff2 0073                                    ___ftneg@f1 0070  
                                  ___ftmul@f1 0078                                    ___ftmul@f2 007B  
                                  ___ftsub@f1 002A                                    ___ftsub@f2 0027  
                                  ___fttol@f1 002A                                __pcstackCOMMON 0070  
                                  ___lltoft@c 0078                         __size_of_lcdDataFloat 00F5  
                             lcdDataFloat@lcd 00BD                               lcdDataFloat@num 00C9  
                             lcdDataFloat@str 006D      __end_of_LCD_CMD_USE_4_BIT_1_LINE_5x7_MTX 0854  
            _LCD_CMD_USE_4_BIT_1_LINE_5x7_MTX 0852                                  sprintf@width 003F  
                                  __pbssBANK1 00A0  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_0 0848  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_0 0846  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_1 0846  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_1 0844  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_2 0844  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_2 0842  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_3 0842  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_3 0840  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_4 0840  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_4 083E  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_5 083E  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_5 083C  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_6 083C  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_6 083A  __end_of_LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_7 083A  
        _LCD_CMD_CUSTOM_CHAR_DEF_CGRAM_ADDR_7 0838                                  _lcdDataFloat 0012  
                                  _lcdDataInt 0AC1                                    __pmaintext 020D  
                                     ?___ftge 0070                                    _lcdCommand 0A0C  
                                     ?___wmul 0070                                _lcdClearRegPin 09D6  
                       __size_of_lcdSetRegPin 0015             __end_of_LCD_CMD_DISPLAY_CURSOR_ON 0858  
                                   ?___ftpack 0070                                     ?___lltoft 0078  
                                  _lcdPutChar 0A72                                    _lcdProcess 03D0  
                                   ?_lcdDelay 0070                                     ?_lcdClear 0049  
                       __end_of_LCD_CMD_CLEAR 085E                                    __stringtab 0800  
                             lcdSetRegPin@lcd 0070                               lcdSetRegPin@pin 007C  
                                _lcdSetRegPin 09C1                        __end_of_lcdClearRegPin 09EC  
                             __size_of___ftge 005D                                       ___ftadd 0107  
                                     ___ftneg 0993                                       ___lldiv 0C39  
                             __size_of___wmul 0021                                       ___ftmul 0E3C  
                                     ___llmod 0B3B                                       ___ftsub 09EC  
                                     ___fttol 0D03                                       _delayMS 09AF  
                                     _delayUS 09A3                                    ??___ftpack 0075  
                                     _lcdData 0B89                                       _lcdInit 0F0C  
                                  ??___lltoft 007C                                       __ptext1 0AC1  
                                     __ptext2 0012                                       __ptext3 0B89  
                                     __ptext4 0A72                                       __ptext5 0D91  
                                     __ptext6 059E                                       __ptext7 0004  
                                     __ptext8 0A2D                                       __ptext9 0B3B  
                                     _dpowers 0810                                       _isdigit 0004  
                                  ??_lcdDelay 0072                                    ??_lcdClear 0055  
    __end_of_LCD_CMD_USE_4_BIT_2_LINE_5x7_MTX 0852              _LCD_CMD_USE_4_BIT_2_LINE_5x7_MTX 0850  
                                     _sprintf 059E                                       clrloop0 099C  
                        end_of_initialization 07FD                                    lcdData@lcd 004A  
                                     ftoa@buf 00AC                                       ftoa@rem 0049  
                                  lcdData@str 0056                               ___lldiv@divisor 0070  
                            lcdProcess@isData 0030                               ___lldiv@counter 007D  
                                 ?_lcdDataInt 0062                               ?_lcdClearRegPin 0070  
                                  lcdInit@lcd 0059                                   ?_lcdCommand 0037  
                                 ?_lcdPutChar 0037                                   ?_lcdProcess 0022  
       __end_of_LCD_CMD_LCD_DISPLAY_CURSOR_ON 0856                 _LCD_CMD_LCD_DISPLAY_CURSOR_ON 0854  
                                 ___ftmul@exp 0024                                __end_of___ftge 0C39  
                              __end_of___wmul 0A4E                           start_initialization 07F7  
                               lcdDataFloat@c 006E                           __size_of_lcdDataInt 0030  
                                  ftoa@status 0047                                 lcdDataInt@buf 00C1  
                               lcdDataInt@lcd 0062                                 lcdDataInt@num 006E  
                         __size_of_lcdCommand 0021                               ___llmod@divisor 0020  
                         __size_of_lcdPutChar 0025                               ___llmod@counter 0029  
                         __size_of_lcdProcess 01CE                                      ??___ftge 0076  
                                    ??___wmul 0074                             __size_of___ftpack 006C  
                           __size_of___lltoft 002A                                     ___latbits 0001  
                               __pcstackBANK0 0020                                 __pcstackBANK1 00BD  
                   _LCD_CMD_DISPLAY_CURSOR_ON 0856                             __size_of_lcdDelay 0007  
                           __size_of_lcdClear 0024                                   sprintf@flag 003D  
                                 sprintf@prec 0041                                      ?___ftadd 0078  
            __end_of_LCD_CMD_INCREMENT_CURSOR 085C                                      ?___ftneg 0070  
                                 _lcdInit$120 0069                                      ?___lldiv 0070  
                                    ?___ftmul 0078                                      ?___llmod 0020  
                                    ?___ftsub 0027                                      ?___fttol 002A  
                                    ?_delayMS 0070                                      ?_delayUS 0070  
                                    ?_lcdData 004A                                     __pstrings 0800  
                                    ?_lcdInit 0059                                 lcdCommand@cmd 0043  
                               lcdCommand@lcd 0037                                      ?_isdigit 0070  
                                    ?_sprintf 002A                                     delayMS@us 0070  
                                   delayUS@us 0070                              ??_lcdClearRegPin 0020  
                              ___wmul@product 0074                                     clear_ram0 099B  
                                ??_lcdDataInt 00BD                         lcdDataFloat@precision 00CC  
                                ??_lcdCommand 0045                                  ??_lcdPutChar 0044  
                                ??_lcdProcess 0032                                   __stringbase 080F  
         __end_of_LCD_CMD_JUMP_TO_SECOND_LINE 084C                   _LCD_CMD_JUMP_TO_SECOND_LINE 084A  
                           ___wmul@multiplier 0070                            __end_of_lcdDataInt 0AF1  
                          __end_of_lcdCommand 0A2D                             lcdClearRegPin@lcd 0070  
                           lcdClearRegPin@pin 007C                            __end_of_lcdPutChar 0A97  
                          __end_of_lcdProcess 059E                              __size_of___ftadd 0106  
                            __size_of___ftneg 0008                              __size_of___lldiv 005E  
                            __size_of___ftmul 00D0                              __size_of___llmod 004E  
                            __size_of___ftsub 0020                              __size_of___fttol 008E  
                                    ___ftpack 0C97                            __end_of__stringtab 0810  
                                    ___lltoft 0A97                              __size_of_delayMS 0012  
                                 _isdigit$465 0070                              __size_of_delayUS 000C  
                            __size_of_lcdData 0053                      _LCD_CMD_INCREMENT_CURSOR 085A  
                            __size_of_lcdInit 00F4                                    sprintf@val 0039  
                            __size_of_isdigit 000E                                      _lcdDelay 098C  
                                    _lcdClear 0A4E                                      __ptext10 0C39  
                                    __ptext11 0A97                                      __ptext20 0F0C  
                                    __ptext12 0D03                                      __ptext21 0A4E  
                                    __ptext13 09EC                                      __ptext22 0A0C  
                                    __ptext14 0107                                      __ptext23 03D0  
                                    __ptext15 0993                                      __ptext24 09C1  
                                    __ptext16 0E3C                                      __ptext25 098C  
                                    __ptext17 0C97                                      __ptext26 09A3  
                                    __ptext18 0BDC                                      __ptext27 09D6  
                                    __ptext19 0AF1                                      __ptext28 09AF  
                               _LCD_CMD_CLEAR 085C                              __size_of_sprintf 0259  
                               __size_of_main 01C3                                 __size_of_ftoa 00AB  
                               __size_of_init 004A                                 ?_lcdDataFloat 00BD  
                                    lcdData@c 0060                                      main@argc 00D1  
                                    main@argv 00D3         __end_of_LCD_CMD_SECOND_LINE_FIRST_POS 084A  
               _LCD_CMD_SECOND_LINE_FIRST_POS 0848         __end_of_LCD_CMD_DISPLAY_ON_CURSOR_OFF 085A  
               _LCD_CMD_DISPLAY_ON_CURSOR_OFF 0858                                   lcdClear@lcd 0049  
                                    isdigit@c 0071                                 lcdPutChar@lcd 0037  
                               lcdPutChar@str 0043                                     sprintf@ap 0038  
                                   sprintf@sp 003E                                ??_lcdDataFloat 0062  
                            ___lldiv@dividend 0074                                 ?_lcdSetRegPin 0070  
                                   stringcode 080A                                 lcdProcess@cmd 002E  
                               lcdProcess@lcd 0022                                      sprintf@c 0043  
                                    sprintf@f 002A                              ___lldiv@quotient 0079  
                                    stringdir 080A                                      stringtab 0800  
                           __CFG_FOSC$INTRCIO 0000                                ??_lcdSetRegPin 0020  
